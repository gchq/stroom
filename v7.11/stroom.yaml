openapi: 3.0.1
info:
  contact:
    name: stroom
    url: https://github.com/gchq/stroom
  description: Various APIs for interacting with Stroom and its data
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Stroom API
  version: v1/v2
servers:
- url: /api
security:
- ApiKeyAuth: []
paths:
  /account/v1:
    get:
      operationId: listAccounts
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageAccount"
          description: default response
      summary: Get all accounts.
      tags:
      - Account
    post:
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
        description: account
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Create an account.
      tags:
      - Account
  /account/v1/search:
    post:
      operationId: searchAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindAccountRequest"
        description: account
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageAccount"
          description: default response
      summary: Search for an account by email.
      tags:
      - Account
  /account/v1/{id}:
    delete:
      operationId: deleteAccount
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete an account by ID.
      tags:
      - Account
    get:
      operationId: fetchAccount
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
          description: default response
      summary: Get an account by ID.
      tags:
      - Account
    put:
      operationId: updateAccount
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountRequest"
        description: account
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Update an account.
      tags:
      - Account
  /activity/v1:
    get:
      operationId: listActivities
      parameters:
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageActivity"
          description: default response
      summary: Lists activities
      tags:
      - Activities
    post:
      operationId: createActivity
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: default response
      summary: Create an Activity
      tags:
      - Activities
  /activity/v1/acknowledge:
    post:
      operationId: acknowledgeSplash
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcknowledgeSplashRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Acknowledge the slash screen
      tags:
      - Activities
  /activity/v1/current:
    get:
      operationId: getCurrentActivity
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: default response
      summary: Gets the current activity
      tags:
      - Activities
    put:
      operationId: setCurrentActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: default response
      summary: Gets the current activity
      tags:
      - Activities
  /activity/v1/fields:
    get:
      operationId: listActivityFieldDefinitions
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilterFieldDefinition"
          description: default response
      summary: Lists activity field definitions
      tags:
      - Activities
  /activity/v1/validate:
    post:
      operationId: validateActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
        description: activity
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityValidationResult"
          description: default response
      summary: Validate an Activity
      tags:
      - Activities
  /activity/v1/{id}:
    delete:
      operationId: deleteActivity
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete an activity
      tags:
      - Activities
    get:
      operationId: fetchActivity
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: default response
      summary: Fetch an Activity
      tags:
      - Activities
    put:
      operationId: updateActivity
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
          description: default response
      summary: Update an Activity
      tags:
      - Activities
  /analyticDataShard/v1/find:
    post:
      operationId: findAnalyticDataShards
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindAnalyticDataShardCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageAnalyticDataShard"
          description: default response
      summary: Find the analytic data shards for the specified analytic
      tags:
      - AnalyticNotifications
  /analyticDataShard/v1/getData:
    post:
      operationId: getShardData
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAnalyticShardDataRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
          description: default response
      summary: Get the data for the shard
      tags:
      - AnalyticNotifications
  /analyticProcess/v1/getDefaultProcessingFilterExpression:
    post:
      operationId: getDefaultProcessingFilterExpression
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: query
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressionOperator"
          description: default response
      summary: Find the default processing filter expression
      tags:
      - AnalyticProcess
  /analyticProcess/v1/tracker:
    post:
      operationId: findAnalyticProcessTracker
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: analyticUuid
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticTracker"
          description: default response
      summary: Find the analytic process tracker for the specified process
      tags:
      - AnalyticProcess
  /analyticRule/v1/sendTestEmail:
    post:
      operationId: testEmailTemplates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationEmailDestination"
        description: emailDestination
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Tests the email subject/body templates using an example detection event.
      tags:
      - Queries
  /analyticRule/v1/testTemplate:
    post:
      operationId: testTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StringWrapper"
        description: template
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringWrapper"
          description: default response
      summary: Tests the email template using an example detection event.
      tags:
      - Queries
  /analyticRule/v1/{uuid}:
    get:
      operationId: fetchAnalyticRule
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticRuleDoc"
          description: default response
      summary: Fetch an analytic rule doc by its UUID
      tags:
      - Queries
    put:
      operationId: updateAnalyticRule
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyticRuleDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticRuleDoc"
          description: default response
      summary: Update an analytic rule doc
      tags:
      - Queries
  /annotation/v1:
    get:
      operationId: getAnnotationById
      parameters:
      - in: query
        name: annotationId
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
          description: default response
      summary: Gets an annotation by id
      tags:
      - Annotations
  /annotation/v1/batchChange:
    post:
      operationId: batchChangeAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiAnnotationChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Applies a change to multiple annotations
      tags:
      - Annotations
  /annotation/v1/change:
    post:
      operationId: changeAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleAnnotationChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Applies a change to an annotation
      tags:
      - Annotations
  /annotation/v1/changeAnnotationEntry:
    post:
      operationId: changeAnnotationEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAnnotationEntryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Change an annotation entry
      tags:
      - Annotations
  /annotation/v1/changeDocumentPermissions:
    post:
      operationId: changeDocumentPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleDocumentPermissionChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Change document permissions
      tags:
      - Annotations
  /annotation/v1/create:
    post:
      operationId: createAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAnnotationRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
          description: default response
      summary: Creates an annotation
      tags:
      - Annotations
  /annotation/v1/createAnnotationTag:
    post:
      operationId: createAnnotationTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAnnotationTagRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationTag"
          description: default response
      summary: Create an annotation tag
      tags:
      - Annotations
  /annotation/v1/delete:
    delete:
      operationId: deleteAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: annotationRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Deletes an annotation
      tags:
      - Annotations
  /annotation/v1/deleteAnnotationEntry:
    post:
      operationId: deleteAnnotationEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteAnnotationEntryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete an annotation entry
      tags:
      - Annotations
  /annotation/v1/deleteAnnotationTag:
    delete:
      operationId: deleteAnnotationTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationTag"
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete an annotation tag
      tags:
      - Annotations
  /annotation/v1/fetchAnnotationEntry:
    post:
      operationId: fetchAnnotationEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchAnnotationEntryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationEntry"
          description: default response
      summary: Fetch an annotation entry
      tags:
      - Annotations
  /annotation/v1/findAnnotationTags:
    post:
      operationId: findAnnotationTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionCriteria"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageAnnotationTag"
          description: default response
      summary: Finds annotation tags matching request
      tags:
      - Annotations
  /annotation/v1/findAnnotations:
    post:
      operationId: findAnnotations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindAnnotationRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageAnnotation"
          description: default response
      summary: Finds annotations
      tags:
      - Annotations
  /annotation/v1/getAnnotationEntries:
    post:
      operationId: getAnnotationEntries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: annotationRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnnotationEntry"
          description: default response
      summary: Gets annotation entries
      tags:
      - Annotations
  /annotation/v1/getLinkedEvents:
    post:
      operationId: getAnnotationLinkedEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: annotationRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventId"
          description: default response
      summary: Gets a list of events linked to this annotation
      tags:
      - Annotations
  /annotation/v1/getStandardComments:
    get:
      operationId: getAnnotationSampleComments
      parameters:
      - in: query
        name: filter
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Gets a list of predefined comments
      tags:
      - Annotations
  /annotation/v1/updateAnnotationTag:
    put:
      operationId: updateAnnotationTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationTag"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationTag"
          description: default response
      summary: Update an annotation tag
      tags:
      - Annotations
  /apikey/v1:
    delete:
      deprecated: true
      operationId: deleteAllApiKeys
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Delete all API keys.
      tags:
      - Api Keys
    post:
      deprecated: true
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKeyRequest"
        description: CreateApiKeyRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
          description: default response
      summary: Create a new API key.
      tags:
      - Api Keys
  /apikey/v1/byData/{data}:
    delete:
      deprecated: true
      operationId: deleteApiKeyByData
      parameters:
      - in: path
        name: data
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Delete an API key by the data itself.
      tags:
      - Api Keys
    get:
      deprecated: true
      operationId: fetchApiKeyByData
      parameters:
      - in: path
        name: data
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
          description: default response
      summary: Read a API key by the data itself.
      tags:
      - Api Keys
  /apikey/v1/noauth/getDefaultApiKeyExpirySeconds:
    get:
      deprecated: true
      operationId: getDefaultApiKeyExpirySeconds
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
      summary: Get the default time taken for API keys to expire
      tags:
      - Api Keys
  /apikey/v1/search:
    post:
      deprecated: true
      operationId: searchApiKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchApiKeyRequest"
        description: SearchRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyResultPage"
          description: default response
      summary: Submit a search request for API keys
      tags:
      - Api Keys
  /apikey/v1/{id}:
    delete:
      deprecated: true
      operationId: deleteApiKey
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Delete a API key by ID.
      tags:
      - Api Keys
    get:
      deprecated: true
      operationId: fetchApiKey
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
          description: default response
      summary: Read a API key by ID.
      tags:
      - Api Keys
  /apikey/v1/{id}/enabled:
    get:
      deprecated: true
      operationId: toggleApiKeyEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      - in: query
        name: enabled
        required: true
        schema:
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Enable or disable the state of an API key.
      tags:
      - Api Keys
  /apikey/v2:
    post:
      operationId: createApiKey_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHashedApiKeyRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateHashedApiKeyResponse"
          description: default response
      summary: Creates a new API key
      tags:
      - API Key
  /apikey/v2/deleteBatch:
    delete:
      operationId: deleteApiKey_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        description: ids
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Delete a batch of API keys by ID.
      tags:
      - API Key
  /apikey/v2/find:
    post:
      operationId: findApiKeysByCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindApiKeyCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageHashedApiKey"
          description: default response
      summary: Find the API keys matching the supplied criteria
      tags:
      - API Key
  /apikey/v2/verifyApiKey:
    post:
      operationId: findApiKeysByCriteria_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyApiKeyRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDesc"
          description: default response
      summary: Check if the passed API key is valid
      tags:
      - API Key
  /apikey/v2/{id}:
    delete:
      operationId: deleteApiKey_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete an API key by ID.
      tags:
      - API Key
    get:
      operationId: fetchApiKey_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HashedApiKey"
          description: default response
      summary: Fetch a dictionary doc by its UUID
      tags:
      - API Key
    put:
      operationId: updateApiKey
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HashedApiKey"
        description: apiKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HashedApiKey"
          description: default response
      summary: Update a dictionary doc
      tags:
      - API Key
  /authentication/v1/noauth/changePassword:
    post:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        description: changePasswordRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResponse"
          description: default response
      summary: Change a user's password.
      tags:
      - Authentication
  /authentication/v1/noauth/confirmPassword:
    post:
      operationId: confirmPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmPasswordRequest"
        description: confirmPasswordRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmPasswordResponse"
          description: default response
      summary: Confirm an authenticated user's current password.
      tags:
      - Authentication
  /authentication/v1/noauth/fetchPasswordPolicy:
    get:
      operationId: fetchPasswordPolicy
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalIdpPasswordPolicyConfig"
          description: default response
      summary: Get the password policy
      tags:
      - Authentication
  /authentication/v1/noauth/login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        description: Credentials
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
          description: default response
      summary: Handle a login request made using username and password credentials.
      tags:
      - Authentication
  /authentication/v1/noauth/logout:
    get:
      operationId: logout
      parameters:
      - in: query
        name: post_logout_redirect_uri
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Log a user out of their session
      tags:
      - Authentication
  /authentication/v1/noauth/reset:
    post:
      operationId: resetEmail
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: email
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Reset a user account using an email address.
      tags:
      - Authentication
  /authproxy/v1/noauth/fetchClientCredsToken:
    post:
      operationId: fetchClientCredsToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCredentials"
        description: clientCredentials
        required: true
      responses:
        default:
          content:
            text/plain:
              schema:
                type: string
          description: default response
      summary: Fetch an access token from the configured IDP using the supplied client
        credentials
      tags:
      - AuthProxy
  /cache/v1:
    delete:
      operationId: clearCache
      parameters:
      - in: query
        name: cacheName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
      summary: Clears a cache
      tags:
      - Caches
  /cache/v1/info:
    get:
      operationId: getCacheInfo
      parameters:
      - in: query
        name: cacheName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheInfoResponse"
          description: default response
      summary: Gets cache info
      tags:
      - Caches
  /cache/v1/list:
    get:
      operationId: listCaches
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheNamesResponse"
          description: default response
      summary: Lists caches
      tags:
      - Caches
  /cluster/lock/v1/keepALive/{nodeName}:
    put:
      operationId: keepClusterLockAlive
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterLockKey"
        description: key
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Keep a lock alive
      tags:
      - Cluster lock
  /cluster/lock/v1/release/{nodeName}:
    put:
      operationId: releaseClusterLock
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterLockKey"
        description: key
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Release a lock
      tags:
      - Cluster lock
  /cluster/lock/v1/try/{nodeName}:
    put:
      operationId: tryClusterLock
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterLockKey"
        description: key
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Try to lock
      tags:
      - Cluster lock
  /config/v1:
    post:
      operationId: createConfigProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigProperty"
        description: configProperty
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigProperty"
          description: default response
      summary: Create a configuration property
      tags:
      - Global Config
  /config/v1/clusterProperties/{propertyName}:
    put:
      operationId: updateConfigProperty
      parameters:
      - in: path
        name: propertyName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigProperty"
        description: configProperty
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigProperty"
          description: default response
      summary: Update a configuration property
      tags:
      - Global Config
  /config/v1/clusterProperties/{propertyName}/yamlOverrideValue/{nodeName}:
    get:
      operationId: getConfigYamlValueByNodeAndName
      parameters:
      - in: path
        name: propertyName
        required: true
        schema:
          type: string
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverrideValueString"
          description: default response
      summary: Get the property value from the YAML configuration in the specified
        node.
      tags:
      - Global Config
  /config/v1/noauth/fetchExtendedUiConfig:
    get:
      operationId: fetchExtendedUiConfig
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedUiConfig"
          description: default response
      summary: Fetch the extended UI configuration
      tags:
      - Global Config
  /config/v1/nodeProperties/{nodeName}:
    post:
      operationId: listConfigPropertiesByNode
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalConfigCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListConfigResponse"
          description: default response
      summary: List all properties matching the criteria on the requested node.
      tags:
      - Global Config
  /config/v1/properties:
    post:
      operationId: listConfigProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalConfigCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListConfigResponse"
          description: default response
      summary: List all properties matching the criteria on the current node.
      tags:
      - Global Config
  /config/v1/properties/{propertyName}:
    get:
      operationId: getConfigPropertyByName
      parameters:
      - in: path
        name: propertyName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigProperty"
          description: default response
      summary: "Fetch a property by its name, e.g. 'stroom.path.home'"
      tags:
      - Global Config
  /content/v1/export:
    post:
      operationId: exportContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRefs"
        description: docRefs
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Export content
      tags:
      - Content
  /content/v1/fetchDependencies:
    post:
      operationId: fetchContentDependencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DependencyCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageDependency"
          description: default response
      summary: Fetch content dependencies
      tags:
      - Content
  /content/v1/import:
    post:
      operationId: importContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportConfigRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportConfigResponse"
          description: default response
      summary: Import content
      tags:
      - Content
  /contentTemplates/v1:
    get:
      operationId: fetchContentTemplates
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentTemplates"
          description: default response
      summary: Get content templates
      tags:
      - Content Templates
    put:
      operationId: updateContentTemplates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentTemplates"
        description: contentTemplates
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentTemplates"
          description: default response
      summary: Update content templates
      tags:
      - Content Templates
  /contentTemplates/v1/fields:
    get:
      operationId: fetchFields
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueryField"
                uniqueItems: true
          description: default response
      summary: Get the list of fields for use in the match expression.
      tags:
      - Content Templates
  /dashboard/v1/columnValues:
    post:
      operationId: getColumnValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnValuesRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnValues"
          description: default response
      summary: Get unique column values so the user can filter table results more
        easily
      tags:
      - Dashboards
  /dashboard/v1/columnValues/{nodeName}:
    post:
      operationId: getColumnValues_1
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnValuesRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnValues"
          description: default response
      summary: Get unique column values so the user can filter table results more
        easily
      tags:
      - Dashboards
  /dashboard/v1/downloadQuery:
    post:
      operationId: downloadDashboardQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardSearchRequest"
        description: downloadQueryRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download a query
      tags:
      - Dashboards
  /dashboard/v1/downloadSearchResults:
    post:
      operationId: downloadDashboardSearchResultsLocal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadSearchResultsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download search results
      tags:
      - Dashboards
  /dashboard/v1/downloadSearchResults/{nodeName}:
    post:
      operationId: downloadDashboardSearchResultsNode
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadSearchResultsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download search results
      tags:
      - Dashboards
  /dashboard/v1/search:
    post:
      operationId: dashboardSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardSearchRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSearchResponse"
          description: default response
      summary: Perform a new search or get new results
      tags:
      - Dashboards
  /dashboard/v1/search/{nodeName}:
    post:
      operationId: dashboardSearch_1
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardSearchRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSearchResponse"
          description: default response
      summary: Perform a new search or get new results
      tags:
      - Dashboards
  /dashboard/v1/validateExpression:
    post:
      operationId: validateDashboardExpression
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: expression
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateExpressionResult"
          description: default response
      summary: Validate an expression
      tags:
      - Dashboards
  /dashboard/v1/{uuid}:
    get:
      operationId: fetchDashboard
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardDoc"
          description: default response
      summary: Fetch a dashboard doc by its UUID
      tags:
      - Dashboards
    put:
      operationId: updateDashboard
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardDoc"
          description: default response
      summary: Update a dashboard doc
      tags:
      - Dashboards
  /data/v1/download:
    post:
      operationId: downloadData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindMetaCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download matching data
      tags:
      - Data
  /data/v1/fetch:
    post:
      operationId: fetchData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchDataRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractFetchDataResult"
          description: default response
      summary: Fetch matching data
      tags:
      - Data
  /data/v1/upload:
    post:
      operationId: uploadData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadDataRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceKey"
          description: default response
      summary: Upload data
      tags:
      - Data
  /data/v1/{id}/info:
    get:
      operationId: viewDataInfo
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataInfoSection"
          description: default response
      summary: Find full info about a data item
      tags:
      - Data
  /data/v1/{id}/metaAttributes:
    post:
      operationId: getDataMetaAttributes
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
          description: default response
      summary: Get extended attributes for a data item
      tags:
      - Data
  /data/v1/{id}/parts/{partNo}/child-types:
    get:
      operationId: getChildStreamTypes
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: partNo
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                uniqueItems: true
          description: default response
      summary: List child types for a stream
      tags:
      - Data
  /dataDownload/v1/downloadZip:
    post:
      operationId: downloadZip
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindMetaCriteria"
        description: criteria
        required: true
      responses:
        default:
          description: Returns Stroom content data as a zip file
      summary: Retrieve content matching the provided criteria as a zip file
      tags:
      - Data Download
  /dataRetentionRules/v1:
    get:
      operationId: fetchDataRetentionRules
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataRetentionRules"
          description: default response
      summary: Get data retention rules
      tags:
      - Data Retention Rules
    put:
      operationId: updateDataRetentionRules
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataRetentionRules"
        description: dataRetentionRules
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataRetentionRules"
          description: default response
      summary: Update data retention rules
      tags:
      - Data Retention Rules
  /dataRetentionRules/v1/impactSummary:
    post:
      operationId: getDataRetentionImpactSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataRetentionDeleteSummaryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataRetentionDeleteSummaryResponse"
          description: default response
      summary: Get a summary of meta deletions with the passed data retention rules
      tags:
      - Data Retention Rules
  /dataRetentionRules/v1/impactSummary/{queryId}:
    delete:
      operationId: stopDataRetentionImpactSummary
      parameters:
      - in: path
        name: queryId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Stop a running query
      tags:
      - Data Retention Rules
  /dataSource/v1/fetchDefaultExtractionPipeline:
    post:
      operationId: fetchDefaultExtractionPipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: dataSourceRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Fetch default extraction pipeline
      tags:
      - Data Sources
  /dataSource/v1/fetchDocumentation:
    post:
      operationId: fetchDocumentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: dataSourceRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Documentation"
          description: default response
      summary: Fetch documentation for a data source
      tags:
      - Data Sources
  /dataSource/v1/findFields:
    post:
      operationId: findDataSourceFields
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindFieldCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageQueryField"
          description: default response
      summary: Find data source fields
      tags:
      - Data Sources
  /dbStatus/v1:
    get:
      operationId: getDbSystemTableStatus
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageDBTableStatus"
          description: default response
      summary: Find status of the DB
      tags:
      - Database Status
    post:
      operationId: findDbSystemTableStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindDBTableCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageDBTableStatus"
          description: default response
      summary: Find status of the DB
      tags:
      - Database Status
  /dictionary/v1/download:
    post:
      operationId: downloadDictionary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download a dictionary doc
      tags:
      - Dictionaries (v1)
  /dictionary/v1/{uuid}:
    get:
      operationId: fetchDictionary
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DictionaryDoc"
          description: default response
      summary: Fetch a dictionary doc by its UUID
      tags:
      - Dictionaries (v1)
    put:
      operationId: updateDictionary
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DictionaryDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DictionaryDoc"
          description: default response
      summary: Update a dictionary doc
      tags:
      - Dictionaries (v1)
  /documentation/v1/download:
    post:
      operationId: downloadDocumentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download a documentation doc
      tags:
      - Documentation (v1)
  /documentation/v1/{uuid}:
    get:
      operationId: fetchDocumentation_1
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationDoc"
          description: default response
      summary: Fetch a documentation doc by its UUID
      tags:
      - Documentation (v1)
    put:
      operationId: updateDocumentation
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentationDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationDoc"
          description: default response
      summary: Update a documentation doc
      tags:
      - Documentation (v1)
  /duplicateCheck/v1/delete:
    post:
      operationId: deleteDuplicateCheckRows
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDuplicateCheckRequest"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete duplicate check rows
      tags:
      - DuplicateCheck
  /duplicateCheck/v1/find:
    post:
      operationId: findDuplicateCheckRows
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindDuplicateCheckCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateCheckRows"
          description: default response
      summary: Find the duplicate check data for the current analytic
      tags:
      - DuplicateCheck
  /elasticCluster/v1/testCluster:
    post:
      operationId: testElasticCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElasticClusterDoc"
        description: elasticClusterDoc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticClusterTestResponse"
          description: default response
      summary: Test connection to the Elasticsearch cluster
      tags:
      - Elastic Clusters
  /elasticCluster/v1/{uuid}:
    get:
      operationId: fetchElasticCluster
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticClusterDoc"
          description: default response
      summary: Fetch an Elasticsearch cluster doc by its UUID
      tags:
      - Elastic Clusters
    put:
      operationId: updateElasticCluster
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElasticClusterDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticClusterDoc"
          description: default response
      summary: Update an Elasticsearch cluster doc
      tags:
      - Elastic Clusters
  /elasticIndex/v1/testIndex:
    post:
      operationId: testElasticIndex
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElasticIndexDoc"
        description: elasticIndexDoc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticIndexTestResponse"
          description: default response
      summary: Test the Elasticsearch index
      tags:
      - Elastic Indices
  /elasticIndex/v1/{uuid}:
    get:
      operationId: fetchElasticIndex
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticIndexDoc"
          description: default response
      summary: Fetch an Elasticsearch index doc by its UUID
      tags:
      - Elastic Indices
    put:
      operationId: updateElasticIndex
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElasticIndexDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticIndexDoc"
          description: default response
      summary: Update an Elasticsearch index doc
      tags:
      - Elastic Indices
  /entityEvent/v1/{nodeName}:
    put:
      operationId: fireEntityEvent
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityEvent"
        description: entityevent
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Sends an entity event
      tags:
      - Entity Events
  /executionSchedule/v1/createExecutionSchedule:
    post:
      operationId: createExecutionSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionSchedule"
        description: executionSchedule
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionSchedule"
          description: default response
      summary: Create Execution Schedule
      tags:
      - ExecutionSchedule
  /executionSchedule/v1/deleteExecutionSchedule:
    post:
      operationId: deleteExecutionSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionSchedule"
        description: executionSchedule
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete Execution Schedule
      tags:
      - ExecutionSchedule
  /executionSchedule/v1/fetchExecutionHistory:
    post:
      operationId: fetchExecutionHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionHistoryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageExecutionHistory"
          description: default response
      summary: Fetch execution history
      tags:
      - ExecutionSchedule
  /executionSchedule/v1/fetchExecutionSchedule:
    post:
      operationId: fetchExecutionSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionScheduleRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageExecutionSchedule"
          description: default response
      summary: Fetch execution schedule
      tags:
      - ExecutionSchedule
  /executionSchedule/v1/fetchTracker:
    post:
      operationId: fetchTracker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionSchedule"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionTracker"
          description: default response
      summary: Fetch execution tracker
      tags:
      - ExecutionSchedule
  /executionSchedule/v1/updateExecutionSchedule:
    post:
      operationId: updateExecutionSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionSchedule"
        description: executionSchedule
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionSchedule"
          description: default response
      summary: Update Execution Schedule
      tags:
      - ExecutionSchedule
  /explorer/v2/addTags:
    put:
      operationId: addTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRemoveTagsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Add tags to explorer nodes
      tags:
      - Explorer (v2)
  /explorer/v2/advancedFind:
    post:
      operationId: advancedFind
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvancedDocumentFindRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageFindResult"
          description: default response
      summary: Find documents with names and types matching the supplied request
      tags:
      - Explorer (v2)
  /explorer/v2/advancedFindWithPermissions:
    post:
      operationId: advancedFindWithPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvancedDocumentFindWithPermissionsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageFindResultWithPermissions"
          description: default response
      summary: Find documents with names and types matching the supplied request and
        the accociated permissions for a given user
      tags:
      - Explorer (v2)
  /explorer/v2/changeDocumentPermissions:
    post:
      operationId: changeDocumentPermissions_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDocumentPermissionChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Change document permissions
      tags:
      - Explorer (v2)
  /explorer/v2/copy:
    post:
      operationId: copyExplorerItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExplorerServiceCopyRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkActionResult"
          description: default response
      summary: Copy explorer items
      tags:
      - Explorer (v2)
  /explorer/v2/create:
    post:
      operationId: createExplorerItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExplorerServiceCreateRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExplorerNode"
          description: default response
      summary: Create explorer item
      tags:
      - Explorer (v2)
  /explorer/v2/decorate:
    post:
      operationId: decorateDocRef
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecorateRequest"
        description: decorateRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocRef"
          description: default response
      summary: "Decorate the docRef will all values, e.g. add the name"
      tags:
      - Explorer (v2)
  /explorer/v2/delete:
    delete:
      operationId: deleteExplorerItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExplorerServiceDeleteRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkActionResult"
          description: default response
      summary: Delete explorer items
      tags:
      - Explorer (v2)
  /explorer/v2/fetchDocRefs:
    post:
      operationId: fetchExplorerDocRefs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/DocRef"
              uniqueItems: true
        description: docRefs
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocRef"
                uniqueItems: true
          description: default response
      summary: Fetch document references
      tags:
      - Explorer (v2)
  /explorer/v2/fetchDocumentTypes:
    get:
      operationId: fetchExplorerDocumentTypes
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentTypes"
          description: default response
      summary: Fetch document types
      tags:
      - Explorer (v2)
  /explorer/v2/fetchExplorerNodeTags:
    get:
      operationId: fetchExplorerNodeTags
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                uniqueItems: true
          description: default response
      summary: Fetch all known explorer node tags
      tags:
      - Explorer (v2)
  /explorer/v2/fetchExplorerNodeTagsByDocRefs:
    post:
      operationId: fetchExplorerNodeTagsByDocRefs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/DocRef"
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                uniqueItems: true
          description: default response
      summary: Fetch explorer node tags held by at least one of decRefs
      tags:
      - Explorer (v2)
  /explorer/v2/fetchExplorerNodes:
    post:
      operationId: fetchExplorerNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchExplorerNodesRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchExplorerNodeResult"
          description: default response
      summary: Fetch explorer nodes
      tags:
      - Explorer (v2)
  /explorer/v2/fetchExplorerPermissions:
    post:
      operationId: fetchExplorerPermissions
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExplorerNode"
        description: explorerNodes
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExplorerNodePermissions"
                uniqueItems: true
          description: default response
      summary: Fetch permissions for explorer items
      tags:
      - Explorer (v2)
  /explorer/v2/fetchHighlights:
    post:
      operationId: fetchHighlights
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchHighlightsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocContentHighlights"
          description: default response
      summary: Fetch match highlights on found content
      tags:
      - Explorer (v2)
  /explorer/v2/find:
    post:
      operationId: find
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentFindRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageFindResult"
          description: default response
      summary: Find documents with names and types matching the supplied request
      tags:
      - Explorer (v2)
  /explorer/v2/findInContent:
    post:
      operationId: findInContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindInContentRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageFindInContentResult"
          description: default response
      summary: Find documents with content matching the supplied request
      tags:
      - Explorer (v2)
  /explorer/v2/getFromDocRef:
    post:
      operationId: getRootNodeRef
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: docRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExplorerNode"
          description: default response
      summary: "Get a node from a document reference, decorated with its root node\
        \ UUID"
      tags:
      - Explorer (v2)
  /explorer/v2/info:
    post:
      operationId: fetchExplorerItemInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: docRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExplorerNodeInfo"
          description: default response
      summary: Get document info
      tags:
      - Explorer (v2)
  /explorer/v2/move:
    put:
      operationId: moveExplorerItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExplorerServiceMoveRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkActionResult"
          description: default response
      summary: Move explorer items
      tags:
      - Explorer (v2)
  /explorer/v2/removeTags:
    delete:
      operationId: removeTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRemoveTagsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Remove tags from explorer nodes
      tags:
      - Explorer (v2)
  /explorer/v2/rename:
    put:
      operationId: renameExplorerItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExplorerServiceRenameRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExplorerNode"
          description: default response
      summary: Rename explorer items
      tags:
      - Explorer (v2)
  /explorer/v2/tags:
    put:
      operationId: updateExplorerNodeTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExplorerNode"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExplorerNode"
          description: default response
      summary: Update explorer node tags
      tags:
      - Explorer (v2)
  /explorerFavourite/v1/createUserFavourite:
    post:
      operationId: createUserFavourite
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: docRef
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Set a document as a favourite for the current user
      tags:
      - Explorer Favourites
  /explorerFavourite/v1/deleteUserFavourite:
    delete:
      operationId: deleteUserFavourite
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: docRef
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Unset a document as favourite for the current user
      tags:
      - Explorer Favourites
  /explorerFavourite/v1/getUserFavourites:
    get:
      operationId: getUserFavourites
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Retrieve all DocRefs the current user has marked as favourite
      tags:
      - Explorer Favourites
  /export/v1:
    get:
      operationId: exportAllContent
      responses:
        default:
          description: Returns Stroom content data in a zip file
      summary: Exports all configuration to a file.
      tags:
      - Export
  /expression/v1/validate:
    post:
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateExpressionRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateExpressionResult"
          description: default response
      summary: Validate an expression
      tags:
      - Expressions
  /feed/v1/fetchSupportedEncodings:
    get:
      operationId: fetchSupportedEncodings
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Fetch supported encodings
      tags:
      - Feeds
  /feed/v1/{uuid}:
    get:
      operationId: fetchFeed
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedDoc"
          description: default response
      summary: Fetch a feed doc by its UUID
      tags:
      - Feeds
    put:
      operationId: updateFeed
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedDoc"
          description: default response
      summary: Update a feed doc
      tags:
      - Feeds
  /feedStatus/v1/getFeedStatus:
    post:
      deprecated: true
      operationId: getFeedStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetFeedStatusRequest"
        description: GetFeedStatusRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFeedStatusResponse"
          description: default response
      summary: Submit a request to get the status of a feed
      tags:
      - Feed Status
  /feedStatus/v2/getFeedStatus:
    post:
      operationId: getFeedStatus_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetFeedStatusRequestV2"
        description: GetFeedStatusRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFeedStatusResponse"
          description: default response
      summary: Submit a request to get the status of a feed
      tags:
      - Feed Status
  /fileTransfer/v1/fetchSnapshot:
    post:
      operationId: fetchSnapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnapshotRequest"
      responses:
        default:
          description: "Returns: 200 if the request was ok and the snapshot returned,\
            \ 304 if the snapshot has not been modified, 401 if unauthorised, 500\
            \ for any other error"
      summary: Fetch Plan B snapshot
      tags:
      - File Transfer
  /fileTransfer/v1/sendPart:
    post:
      operationId: sendPart
      parameters:
      - in: header
        name: createTime
        schema:
          type: integer
          format: int64
      - in: header
        name: metaId
        schema:
          type: integer
          format: int64
      - in: header
        name: fileHash
        schema:
          type: string
      - in: header
        name: fileName
        schema:
          type: string
      - in: header
        name: synchroniseMerge
        schema:
          type: boolean
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
      responses:
        default:
          description: "Returns: 200 if the part was sent ok, 401 if unauthorised,\
            \ 500 for any other error"
      summary: Send Plan B part
      tags:
      - File Transfer
  /fsVolume/v1:
    post:
      operationId: createFsVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FsVolume"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolume"
          description: default response
      summary: Create a volume
      tags:
      - Filesystem Volumes
  /fsVolume/v1/find:
    post:
      operationId: findFsVolumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindFsVolumeCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageFsVolume"
          description: default response
      summary: Finds volumes
      tags:
      - Filesystem Volumes
  /fsVolume/v1/rescan:
    get:
      operationId: rescanFsVolumes
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Rescans volumes
      tags:
      - Filesystem Volumes
  /fsVolume/v1/validate:
    post:
      operationId: validateFsVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FsVolume"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
          description: default response
      summary: Validates a volume
      tags:
      - Filesystem Volumes
  /fsVolume/v1/{id}:
    delete:
      operationId: deleteFsVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete a volume
      tags:
      - Filesystem Volumes
    get:
      operationId: fetchFsVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolume"
          description: default response
      summary: Get a volume
      tags:
      - Filesystem Volumes
    put:
      operationId: updateFsVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FsVolume"
        description: volume
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolume"
          description: default response
      summary: Update a volume
      tags:
      - Filesystem Volumes
  /fsVolume/volumeGroup/v2:
    post:
      operationId: createFsVolumeGroup
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: name
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolumeGroup"
          description: default response
      summary: Creates a data volume group
      tags:
      - Data Volume Groups
  /fsVolume/volumeGroup/v2/fetchByName/{name}:
    get:
      operationId: fetchFsVolumeGroupByName
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolumeGroup"
          description: default response
      summary: Gets a data volume group by name
      tags:
      - Data Volume Groups
  /fsVolume/volumeGroup/v2/find:
    post:
      operationId: findFsVolumeGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionCriteria"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageFsVolumeGroup"
          description: default response
      summary: Finds data volume groups matching request
      tags:
      - Data Volume Groups
  /fsVolume/volumeGroup/v2/{id}:
    delete:
      operationId: deleteFsVolumeGroup
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Deletes a data volume group
      tags:
      - Data Volume Groups
    get:
      operationId: fetchFsVolumeGroup
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolumeGroup"
          description: default response
      summary: Gets a data volume group
      tags:
      - Data Volume Groups
    put:
      operationId: updateFsVolumeGroup
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FsVolumeGroup"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FsVolumeGroup"
          description: default response
      summary: Updates a data volume group
      tags:
      - Data Volume Groups
  /gitRepo/v1/pullFromGit:
    post:
      operationId: pullFromGit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitRepoDoc"
        description: gitRepoDoc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitRepoResponse"
          description: default response
      summary: Pull items from Git
      tags:
      - GitRepos
  /gitRepo/v1/pushToGit:
    post:
      operationId: pushToGit
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitRepoPushDto"
        description: gitRepoPushDto
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitRepoResponse"
          description: default response
      summary: Push items to Git
      tags:
      - GitRepos
  /gitRepo/v1/{uuid}:
    get:
      operationId: fetchGitRepo
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitRepoDoc"
          description: default response
      summary: Fetch a GIT repo doc by its UUID
      tags:
      - GitRepos
    put:
      operationId: updateGitRepo
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitRepoDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitRepoDoc"
          description: default response
      summary: Update a GIT repo doc
      tags:
      - GitRepos
  /index/v2/addField:
    post:
      operationId: addField
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddField"
        description: change
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Add field
      tags:
      - Indexes (v2)
  /index/v2/deleteField:
    delete:
      operationId: deleteField
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteField"
        description: change
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete field
      tags:
      - Indexes (v2)
  /index/v2/findFields:
    post:
      operationId: findFields
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindFieldCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageIndexFieldImpl"
          description: default response
      summary: Find index fields
      tags:
      - Indexes (v2)
  /index/v2/shard/delete:
    post:
      operationId: deleteIndexShards
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindIndexShardCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
      summary: Delete matching index shards
      tags:
      - Indexes (v2)
  /index/v2/shard/find:
    post:
      operationId: findIndexShards
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindIndexShardCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageIndexShard"
          description: default response
      summary: Find matching index shards
      tags:
      - Indexes (v2)
  /index/v2/shard/flush:
    post:
      operationId: flushIndexShards
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindIndexShardCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
      summary: Flush matching index shards
      tags:
      - Indexes (v2)
  /index/v2/updateField:
    put:
      operationId: updateField
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateField"
        description: change
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Update field
      tags:
      - Indexes (v2)
  /index/v2/{uuid}:
    get:
      operationId: fetchIndex
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LuceneIndexDoc"
          description: default response
      summary: Fetch a index doc by its UUID
      tags:
      - Indexes (v2)
    put:
      operationId: updateIndex
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LuceneIndexDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LuceneIndexDoc"
          description: default response
      summary: Update an index doc
      tags:
      - Indexes (v2)
  /index/volume/v2:
    post:
      operationId: createIndexVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexVolume"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolume"
          description: default response
      summary: Creates an index volume
      tags:
      - Index Volumes
  /index/volume/v2/find:
    post:
      operationId: findIndexVolumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionCriteria"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageIndexVolume"
          description: default response
      summary: Finds index volumes matching request
      tags:
      - Index Volumes
  /index/volume/v2/rescan:
    get:
      operationId: rescanIndexVolumes
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Rescans index volumes
      tags:
      - Index Volumes
  /index/volume/v2/validate:
    post:
      operationId: validateIndexVolume
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexVolume"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
          description: default response
      summary: Validates an index volume
      tags:
      - Index Volumes
  /index/volume/v2/{id}:
    delete:
      operationId: deleteIndexVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Deletes an index volume
      tags:
      - Index Volumes
    get:
      operationId: fetchIndexVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolume"
          description: default response
      summary: Fetch an index volume
      tags:
      - Index Volumes
    put:
      operationId: updateIndexVolume
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexVolume"
        description: indexVolume
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolume"
          description: default response
      summary: Updates an index volume
      tags:
      - Index Volumes
  /index/volumeGroup/v2:
    post:
      operationId: createIndexVolumeGroup
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: name
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolumeGroup"
          description: default response
      summary: Creates an index volume group
      tags:
      - Index Volume Groups
  /index/volumeGroup/v2/fetchByName/{name}:
    get:
      operationId: fetchIndexVolumeGroupByName
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolumeGroup"
          description: default response
      summary: Gets an index volume group by name
      tags:
      - Index Volume Groups
  /index/volumeGroup/v2/find:
    post:
      operationId: findIndexVolumeGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionCriteria"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageIndexVolumeGroup"
          description: default response
      summary: Finds index volume groups matching request
      tags:
      - Index Volume Groups
  /index/volumeGroup/v2/{id}:
    delete:
      operationId: deleteIndexVolumeGroup
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Deletes an index volume group
      tags:
      - Index Volume Groups
    get:
      operationId: fetchIndexVolumeGroup
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolumeGroup"
          description: default response
      summary: Gets an index volume group
      tags:
      - Index Volume Groups
    put:
      operationId: updateIndexVolumeGroup
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexVolumeGroup"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexVolumeGroup"
          description: default response
      summary: Updates an index volume group
      tags:
      - Index Volume Groups
  /job/v1:
    get:
      operationId: listJobs
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageJob"
          description: default response
      summary: Lists jobs
      tags:
      - Jobs
  /job/v1/setJobsEnabled/{nodeName}:
    put:
      operationId: setNodeJobsEnabled
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeSetJobsEnabledRequest"
        description: Request parameters
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeSetJobsEnabledResponse"
          description: default response
      summary: "Sets the enabled state of jobs for the selected node. If both `includeJobs`\
        \ and `excludeJobs` are unspecified or empty, this action will apply to ALL\
        \ jobs."
      tags:
      - Jobs
  /job/v1/{id}/enabled:
    put:
      operationId: setJobEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: enabled
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Sets the enabled status of the job
      tags:
      - Jobs
  /jobNode/v1/find:
    post:
      operationId: findJobNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindJobNodeCriteria"
        description: findJobNodeCriteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobNodeAndInfoListResponse"
          description: default response
      summary: Finds job nodes matching criteria and sort order
      tags:
      - Jobs (Node)
  /jobNode/v1/info:
    get:
      operationId: fetchJobNodeInfo
      parameters:
      - in: query
        name: jobName
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobNodeInfo"
          description: default response
      summary: Gets current info for a job node
      tags:
      - Jobs (Node)
  /jobNode/v1/schedule:
    put:
      operationId: setJobNodeScheduleBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchScheduleRequest"
        description: schedule
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Sets the schedule of multiple job nodes
      tags:
      - Jobs (Node)
  /jobNode/v1/{id}/enabled:
    put:
      operationId: setJobNodeEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: enabled
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Sets the enabled status of the job node
      tags:
      - Jobs (Node)
  /jobNode/v1/{id}/execute:
    post:
      operationId: executeJobNode
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Execute job node now
      tags:
      - Jobs (Node)
  /jobNode/v1/{id}/schedule:
    put:
      operationId: setJobNodeSchedule
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Schedule"
        description: schedule
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Sets the schedule of a job node
      tags:
      - Jobs (Node)
  /jobNode/v1/{id}/taskLimit:
    put:
      operationId: setJobNodeTaskLimit
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        description: taskLimit
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Sets the task limit for the job node
      tags:
      - Jobs (Node)
  /kafkaConfig/v1/download:
    post:
      operationId: downloadKafkaConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: docRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download a kafkaConfig doc
      tags:
      - Kafka Config
  /kafkaConfig/v1/{uuid}:
    get:
      operationId: fetchKafkaConfig
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KafkaConfigDoc"
          description: default response
      summary: Fetch a kafkaConfig doc by its UUID
      tags:
      - Kafka Config
    put:
      operationId: updateKafkaConfig
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KafkaConfigDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KafkaConfigDoc"
          description: default response
      summary: Update a kafkaConfig doc
      tags:
      - Kafka Config
  /meta/v1/find:
    post:
      operationId: findMetaRow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindMetaCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageMetaRow"
          description: default response
      summary: Find matching meta data
      tags:
      - Meta
  /meta/v1/getReprocessSelectionSummary:
    post:
      operationId: getMetaReprocessSelectionSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectionSummaryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelectionSummary"
          description: default response
      summary: Get a summary of the parent items of the selected meta data
      tags:
      - Meta
  /meta/v1/getSelectionSummary:
    post:
      operationId: getMetaSelectionSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectionSummaryRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelectionSummary"
          description: default response
      summary: Get a summary of the selected meta data
      tags:
      - Meta
  /meta/v1/getTypes:
    get:
      operationId: getStreamTypes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Get a list of possible stream types
      tags:
      - Meta
  /meta/v1/update/status:
    put:
      operationId: updateMetaStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStatusRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int32
          description: default response
      summary: Update status on matching meta data
      tags:
      - Meta
  /meta/v1/{id}:
    get:
      operationId: fetch
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meta"
          description: default response
      summary: "Get a meta record for a given id, if permitted."
      tags:
      - Meta
  /node/v1/all:
    get:
      operationId: listAllNodes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Lists all nodes
      tags:
      - Nodes
  /node/v1/enabled:
    get:
      operationId: listEnabledNodes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Lists enabled nodes
      tags:
      - Nodes
  /node/v1/enabled/{nodeName}:
    put:
      operationId: setNodeEnabled
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: enabled
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Sets whether a node is enabled
      tags:
      - Nodes
  /node/v1/find:
    post:
      operationId: findNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindNodeStatusCriteria"
        description: findNodeStatusCriteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchNodeStatusResponse"
          description: default response
      summary: Finds nodes matching criteria and sort order
      tags:
      - Nodes
  /node/v1/info/{nodeName}:
    get:
      operationId: fetchNodeInfo
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNodeInfo"
          description: default response
      summary: Gets detailed information about a node
      tags:
      - Nodes
  /node/v1/ping/{nodeName}:
    get:
      operationId: pingNode
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: integer
                format: int64
          description: default response
      summary: Gets a ping time for a node
      tags:
      - Nodes
  /node/v1/priority/{nodeName}:
    put:
      operationId: setNodePriority
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        description: nodeName
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Sets the priority of a node
      tags:
      - Nodes
  /oauth2/v1/noauth/.well-known/openid-configuration:
    get:
      operationId: openIdConfiguration
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      summary: Provides discovery for openid configuration
      tags:
      - API Keys
      - Authentication
  /oauth2/v1/noauth/auth:
    get:
      operationId: openIdAuth
      parameters:
      - in: query
        name: scope
        required: true
        schema:
          type: string
      - in: query
        name: response_type
        required: true
        schema:
          type: string
      - in: query
        name: client_id
        required: true
        schema:
          type: string
      - in: query
        name: redirect_uri
        required: true
        schema:
          type: string
      - in: query
        name: nonce
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
      - in: query
        name: prompt
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Submit an OpenId AuthenticationRequest.
      tags:
      - Authentication
  /oauth2/v1/noauth/certs:
    get:
      operationId: openIdCerts
      responses:
        default:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: object
          description: default response
      summary: Provides access to this service's current public key. A client may
        use these keys to verify JWTs issued by this service.
      tags:
      - API Keys
      - Authentication
  /oauth2/v1/noauth/token:
    post:
      operationId: openIdToken
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
          description: default response
      summary: Get a token from an access code or refresh token
      tags:
      - Authentication
  /permission/app/v1:
    get:
      operationId: getEffectiveAppPermissions
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUserPermissions"
          description: default response
      summary: User and app permissions for the current session
      tags:
      - Application Permissions
  /permission/app/v1/changeAppPermission:
    post:
      operationId: changeAppPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractAppPermissionChange"
        description: changeUserRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: User and app permissions for the current session
      tags:
      - Application Permissions
  /permission/app/v1/fetchAppUserPermissions:
    post:
      operationId: fetchAppUserPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchAppUserPermissionsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageAppUserPermissions"
          description: default response
      summary: Fetch app user permissions
      tags:
      - Application Permissions
  /permission/app/v1/getAppUserPermissionsReport:
    post:
      operationId: getAppUserPermissionsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRef"
        description: user
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUserPermissionsReport"
          description: default response
      summary: Get a detailed report of app permissions for the specified user
      tags:
      - Application Permissions
  /permission/changeEvent/v1/fireChange/{nodeName}:
    post:
      operationId: firePermissionChangeEvent
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionChangeEvent"
        description: event
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Fires a permission change event
      tags:
      - Application Permissions
  /permission/doc/v1/checkDocumentPermission:
    post:
      operationId: checkDocumentPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckDocumentPermissionRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Check document permission
      tags:
      - Doc Permissions
  /permission/doc/v1/fetchDocumentUserPermissions:
    post:
      operationId: fetchDocumentUserPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchDocumentUserPermissionsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageDocumentUserPermissions"
          description: default response
      summary: Fetch document user permissions
      tags:
      - Doc Permissions
  /permission/doc/v1/getDocUserPermissionsReport:
    post:
      operationId: getDocUserPermissionsReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentUserPermissionsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentUserPermissionsReport"
          description: default response
      summary: Get a detailed report of doc permissions for the specified user
      tags:
      - Doc Permissions
  /pipeline/v1/fetchPipelineJson:
    post:
      operationId: fetchPipelineJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: pipeline
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchPipelineJsonResponse"
          description: default response
      summary: Fetch the JSON for a pipeline
      tags:
      - Pipelines
  /pipeline/v1/fetchPipelineLayers:
    post:
      operationId: fetchPipelineLayers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: pipeline
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PipelineLayer"
          description: default response
      summary: Fetch layers for a pipeline
      tags:
      - Pipelines
  /pipeline/v1/propertyTypes:
    get:
      operationId: getPipelinePropertyTypes
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FetchPropertyTypesResult"
          description: default response
      summary: Get pipeline property types
      tags:
      - Pipelines
  /pipeline/v1/savePipelineJson:
    put:
      operationId: savePipelineJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavePipelineJsonRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Update a pipeline doc with JSON directly
      tags:
      - Pipelines
  /pipeline/v1/{uuid}:
    get:
      operationId: fetchPipeline
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineDoc"
          description: default response
      summary: Fetch a pipeline doc by its UUID
      tags:
      - Pipelines
    put:
      operationId: updatePipeline
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineDoc"
          description: default response
      summary: Update a pipeline doc
      tags:
      - Pipelines
  /planB/v1/{uuid}:
    get:
      operationId: fetchStateStore
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanBDoc"
          description: default response
      summary: Fetch an state store doc by its UUID
      tags:
      - State Stores
    put:
      operationId: updateStateStore
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanBDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanBDoc"
          description: default response
      summary: Update an state store doc
      tags:
      - State Stores
  /planb/v1/getStoreInfo:
    post:
      operationId: getPlanBStoreInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanBShardInfoRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanBShardInfoResponse"
          description: default response
      summary: Gets Plan B store info.
      tags:
      - Plan B Query
  /planb/v1/getValue:
    post:
      operationId: planBQueryGetValue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanBValue"
          description: default response
      summary: Gets a value from a remote Plan B store.
      tags:
      - Plan B Query
  /preferences/v1:
    get:
      operationId: fetchUserPreferences
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
          description: default response
      summary: Fetch user preferences.
      tags:
      - Preferences
    post:
      operationId: updateUserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferences"
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Update user preferences
      tags:
      - Preferences
  /preferences/v1/resetToDefaultUserPreferences:
    post:
      operationId: resetToDefaultUserPreferences
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
          description: default response
      summary: Resets preferences to the defaults
      tags:
      - Preferences
  /preferences/v1/setDefaultUserPreferences:
    post:
      operationId: setDefaultUserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferences"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferences"
          description: default response
      summary: Sets the default preferences for all users
      tags:
      - Preferences
  /processor/v1/{id}:
    delete:
      operationId: deleteProcessor
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Deletes a processor
      tags:
      - Processors
    get:
      operationId: fetchProcessor
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Processor"
          description: default response
      summary: Fetch a processor
      tags:
      - Processors
  /processor/v1/{id}/enabled:
    put:
      operationId: setProcessorEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: enabled
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Sets the enabled/disabled state for a processor
      tags:
      - Processors
  /processorFilter/v1:
    post:
      operationId: createProcessorFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProcessFilterRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorFilter"
          description: default response
      summary: Creates a filter
      tags:
      - Processor Filters
  /processorFilter/v1/bulkChange:
    post:
      operationId: bulkChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkProcessorFilterChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Bulk change processors
      tags:
      - Processor Filters
  /processorFilter/v1/find:
    post:
      operationId: findProcessorFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchProcessorRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorListRowResultPage"
          description: default response
      summary: Finds processors and filters matching request
      tags:
      - Processor Filters
  /processorFilter/v1/reprocess:
    post:
      operationId: reprocessData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProcessFilterRequest"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReprocessDataInfo"
          description: default response
      summary: Create filters to reprocess data
      tags:
      - Processor Filters
  /processorFilter/v1/{id}:
    delete:
      operationId: deleteProcessorFilter
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Deletes a filter
      tags:
      - Processor Filters
    get:
      operationId: fetchProcessorFilter
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorFilter"
          description: default response
      summary: Fetch a filter
      tags:
      - Processor Filters
    put:
      operationId: updateProcessorFilter
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessorFilter"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorFilter"
          description: default response
      summary: Updates a filter
      tags:
      - Processor Filters
  /processorFilter/v1/{id}/enabled:
    put:
      operationId: setProcessorFilterEnabled
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Sets the enabled/disabled state for a filter
      tags:
      - Processor Filters
  /processorFilter/v1/{id}/maxProcessingTasks:
    put:
      operationId: setProcessorFilterMaxProcessingTasks
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: "Sets the optional cluster-wide limit on the number of tasks that may\
        \ be processed for this filter, at any one time"
      tags:
      - Processor Filters
  /processorFilter/v1/{id}/priority:
    put:
      operationId: setProcessorFilterPriority
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Sets the priority for a filter
      tags:
      - Processor Filters
  /processorTask/v1/abandon/{nodeName}:
    post:
      operationId: abandonProcessorTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessorTaskList"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Abandon some tasks
      tags:
      - Processor Tasks
  /processorTask/v1/assign/{nodeName}:
    post:
      operationId: assignProcessorTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignTasksRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessorTaskList"
          description: default response
      summary: Assign some tasks
      tags:
      - Processor Tasks
  /processorTask/v1/find:
    post:
      operationId: findProcessorTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionCriteria"
        description: expressionCriteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageProcessorTask"
          description: default response
      summary: Finds processors tasks
      tags:
      - Processor Tasks
  /processorTask/v1/summary:
    post:
      operationId: findProcessorTaskSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressionCriteria"
        description: expressionCriteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageProcessorTaskSummary"
          description: default response
      summary: Finds processor task summaries
      tags:
      - Processor Tasks
  /query/v1/columnValues:
    post:
      operationId: getColumnValues_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryColumnValuesRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnValues"
          description: default response
      summary: Get unique column values so the user can filter table results more
        easily
      tags:
      - Queries
  /query/v1/columnValues/{nodeName}:
    post:
      operationId: getColumnValues_3
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryColumnValuesRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnValues"
          description: default response
      summary: Get unique column values so the user can filter table results more
        easily
      tags:
      - Queries
  /query/v1/csv/search:
    get:
      operationId: queryCsv
      parameters:
      - in: query
        name: query
        schema:
          type: string
      - in: query
        name: offset
        schema:
          type: integer
          format: int32
      - in: query
        name: length
        schema:
          type: integer
          format: int32
          default: 100
      responses:
        default:
          content:
            text/plain:
              schema:
                type: string
          description: default response
      summary: Perform a csv query
      tags:
      - Queries
  /query/v1/downloadSearchResults:
    post:
      operationId: downloadQuerySearchResultsLocal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadQueryResultsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download search results
      tags:
      - Queries
  /query/v1/downloadSearchResults/{nodeName}:
    post:
      operationId: downloadQuerySearchResultsNode
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadQueryResultsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download search results
      tags:
      - Queries
  /query/v1/fetchCompletions:
    post:
      operationId: fetchCompletions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletionsRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageCompletionItem"
          description: default response
      summary: Fetch completions for the query
      tags:
      - Queries
  /query/v1/fetchDataSourceFromQueryString:
    post:
      operationId: fetchDataSourceFromQueryString
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: query
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Fetch a data source from a query string
      tags:
      - Queries
  /query/v1/fetchDetail:
    post:
      operationId: fetchDetail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryHelpRow"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryHelpDetail"
          description: default response
      summary: Fetch detail for help item
      tags:
      - Queries
  /query/v1/fetchQueryDataSource:
    post:
      operationId: fetchQueryDataSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Fetch the datasource referenced by a query
      tags:
      - Queries
  /query/v1/fetchTimeZones:
    get:
      operationId: fetchTimeZones
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Fetch time zone data from the server
      tags:
      - Queries
  /query/v1/helpItems:
    post:
      operationId: fetchHelpItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryHelpRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageQueryHelpRow"
          description: default response
      summary: Fetch all (optionally filtered) query help items
      tags:
      - Queries
  /query/v1/search:
    post:
      operationId: querySearchLocal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySearchRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSearchResponse"
          description: default response
      summary: Perform a new search or get new results
      tags:
      - Queries
  /query/v1/search/{nodeName}:
    post:
      operationId: querySearchNode
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySearchRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSearchResponse"
          description: default response
      summary: Perform a new search or get new results
      tags:
      - Queries
  /query/v1/validateQuery:
    post:
      operationId: validateQuery
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: query
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateExpressionResult"
          description: default response
      summary: Validate an expression
      tags:
      - Queries
  /query/v1/{uuid}:
    get:
      operationId: fetchQuery
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryDoc"
          description: default response
      summary: Fetch a query doc by its UUID
      tags:
      - Queries
    put:
      operationId: updateQuery
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryDoc"
          description: default response
      summary: Update a query doc
      tags:
      - Queries
  /refData/v1/clearBufferPool:
    delete:
      operationId: clearBufferPool
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Clear all buffers currently available in the buffer pool to reclaim
        memory. Performed on the named node or all nodes if null.
      tags:
      - Reference Data
  /refData/v1/entries:
    get:
      description: This is primarily intended  for small scale debugging in non-production
        environments. If no limit is set a default limit is applied else the results
        will be limited to limit entries.
      operationId: getReferenceStoreEntries
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          format: int32
      - in: query
        name: refStreamId
        schema:
          type: integer
          format: int64
      - in: query
        name: mapName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RefStoreEntry"
          description: default response
      summary: List entries from the reference data store on the node called.
      tags:
      - Reference Data
  /refData/v1/lookup:
    post:
      operationId: lookupReferenceData
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefDataLookupRequest"
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      summary: Perform a reference data lookup using the supplied lookup request.
        Reference data will be loaded if required using the supplied reference pipeline.
        Performed on this node only.
      tags:
      - Reference Data
  /refData/v1/purgeByAge/{purgeAge}:
    delete:
      operationId: purgeReferenceDataByAge
      parameters:
      - in: path
        name: purgeAge
        required: true
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: "Explicitly delete all entries that are older than purgeAge. Performed\
        \ on the named node, or all nodes if null."
      tags:
      - Reference Data
  /refData/v1/purgeByFeedByAge/{feedName}/{purgeAge}:
    delete:
      operationId: purgeReferenceDataByAge_1
      parameters:
      - in: path
        name: feedName
        required: true
        schema:
          type: string
      - in: path
        name: purgeAge
        required: true
        schema:
          type: string
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: "Explicitly delete all entries belonging to a feed that are older than\
        \ purgeAge.Performed on the named node, or all nodes if null."
      tags:
      - Reference Data
  /refData/v1/purgeByStream/{refStreamId}:
    delete:
      operationId: purgeReferenceDataByStream
      parameters:
      - in: path
        name: refStreamId
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete all entries for a reference stream. Performed on the named node
        or all nodes if null.
      tags:
      - Reference Data
  /refData/v1/refStreamInfo:
    get:
      description: This is primarily intended  for small scale debugging in non-production
        environments. If no limit is set a default limit is applied else the results
        will be limited to limit entries. Performed on this node only.
      operationId: getReferenceStreamProcessingInfoEntries
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          format: int32
      - in: query
        name: refStreamId
        schema:
          type: integer
          format: int64
      - in: query
        name: mapName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProcessingInfoResponse"
          description: default response
      summary: List processing info entries for all ref streams
      tags:
      - Reference Data
  /remoteSearch/v1/destroy:
    get:
      operationId: destroyRemoteSearch
      parameters:
      - in: query
        name: queryKey
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy search results
      tags:
      - Remote Search
  /remoteSearch/v1/poll:
    get:
      operationId: pollRemoteSearch
      parameters:
      - in: query
        name: queryKey
        schema:
          type: string
      responses:
        default:
          content:
            application/octet-stream: {}
          description: default response
      summary: Poll the server for search results for the supplied queryKey
      tags:
      - Remote Search
  /remoteSearch/v1/start:
    post:
      operationId: startRemoteSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeSearchTask"
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Start a search
      tags:
      - Remote Search
  /report/v1/sendTestEmail:
    post:
      operationId: testEmailTemplates_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationEmailDestination"
        description: emailDestination
        required: true
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Tests the email subject/body templates using an example detection event.
      tags:
      - Queries
  /report/v1/testTemplate:
    post:
      operationId: testTemplate_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StringWrapper"
        description: template
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringWrapper"
          description: default response
      summary: Tests the email template using an example detection event.
      tags:
      - Queries
  /report/v1/{uuid}:
    get:
      operationId: fetchReport
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDoc"
          description: default response
      summary: Fetch a report doc by its UUID
      tags:
      - Queries
    put:
      operationId: updateReport
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDoc"
          description: default response
      summary: Update a report doc
      tags:
      - Queries
  /result-store/v1/destroy/{nodeName}:
    post:
      operationId: destroyResultStore
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyStoreRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy a search result store for a node
      tags:
      - ResultStore
  /result-store/v1/exists/{nodeName}:
    post:
      operationId: resultStoreExists
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: queryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Determines if the requested result store still exists
      tags:
      - ResultStore
  /result-store/v1/find/{nodeName}:
    post:
      operationId: findResultStores
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindResultStoreCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultStoreResponse"
          description: default response
      summary: Find the result stores matching the supplied criteria for a node
      tags:
      - ResultStore
  /result-store/v1/list/{nodeName}:
    get:
      operationId: listResultStores
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultStoreResponse"
          description: default response
      summary: Lists result stores for a node
      tags:
      - ResultStore
  /result-store/v1/terminate/{nodeName}:
    post:
      operationId: terminateSearchTask
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: queryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Terminates search tasks for a node
      tags:
      - ResultStore
  /result-store/v1/update/{nodeName}:
    post:
      operationId: updateResultStore
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStoreRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Find the result stores matching the supplied criteria for a node
      tags:
      - ResultStore
  /ruleset/v2:
    get:
      operationId: fetchReceiveDataRules
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReceiveDataRules"
          description: default response
      summary: Fetch receipt rules
      tags:
      - Rule Set
    put:
      operationId: updateReceiveDataRules
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReceiveDataRules"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReceiveDataRules"
          description: default response
      summary: Update receipt rules
      tags:
      - Rule Set
  /ruleset/v2/fetchHashedRules:
    get:
      operationId: fetchHashedReceiveDataRules
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HashedReceiveDataRules"
          description: default response
      summary: Fetch hashed receipt rules
      tags:
      - Rule Set
  /s3/v1/download:
    post:
      operationId: downloadS3Config
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocRef"
        description: docRef
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGeneration"
          description: default response
      summary: Download an S3 config doc
      tags:
      - S3
  /s3/v1/{uuid}:
    get:
      operationId: fetchS3Config
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3ConfigDoc"
          description: default response
      summary: Fetch an S3 config doc by its UUID
      tags:
      - S3
    put:
      operationId: updateS3Config
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/S3ConfigDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3ConfigDoc"
          description: default response
      summary: Update an S3 config doc
      tags:
      - S3
  /scheduledTime/v1:
    post:
      operationId: getScheduledTimes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetScheduledTimesRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledTimes"
          description: default response
      summary: Gets scheduled time info
      tags:
      - Scheduled Time
  /script/v1/fetchLinkedScripts:
    post:
      operationId: fetchLinkedScripts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchLinkedScriptRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScriptDoc"
          description: default response
      summary: Fetch related scripts
      tags:
      - Scripts
  /script/v1/{uuid}:
    get:
      operationId: fetchScript
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptDoc"
          description: default response
      summary: Fetch a script doc by its UUID
      tags:
      - Scripts
    put:
      operationId: updateScript
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScriptDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptDoc"
          description: default response
      summary: Update a script doc
      tags:
      - Scripts
  /scyllaDB/v1/testCluster:
    post:
      operationId: testScyllaDB
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScyllaDbDoc"
        description: scyllaDbDoc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScyllaDbTestResponse"
          description: default response
      summary: Test connection to the ScyllaDb instance
      tags:
      - ScyllaDB Instances
  /scyllaDB/v1/{uuid}:
    get:
      operationId: fetchScyllaDB
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScyllaDbDoc"
          description: default response
      summary: Fetch an ScyllaDb config doc by its UUID
      tags:
      - ScyllaDB Instances
    put:
      operationId: updateScyllaDB
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScyllaDbDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScyllaDbDoc"
          description: default response
      summary: Update an ScyllaDb config doc
      tags:
      - ScyllaDB Instances
  /searchable/v2/destroy:
    post:
      operationId: destroySearchableQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: QueryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy a running query
      tags:
      - Searchable
  /searchable/v2/search:
    post:
      operationId: startSearchableQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: SearchRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
          description: default response
      summary: Submit a search request
      tags:
      - Searchable
  /session/v1/list:
    get:
      operationId: listSessions
      parameters:
      - in: query
        name: nodeName
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionListResponse"
          description: default response
      summary: "Lists user sessions for a node, or all nodes in the cluster if nodeName\
        \ is null"
      tags:
      - Sessions
  /session/v1/logout:
    get:
      operationId: stroomLogout
      parameters:
      - in: query
        name: redirect_uri
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlResponse"
          description: default response
      summary: Logout of Stroom session
      tags:
      - Sessions
  /session/v1/noauth/validateSession:
    get:
      operationId: validateStroomSession
      parameters:
      - in: query
        name: redirect_uri
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateSessionResponse"
          description: default response
      summary: "Validate the current session, return a redirect Uri if invalid."
      tags:
      - Sessions
  /sessionInfo/v1:
    get:
      operationId: getSessionInfo
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
          description: default response
      summary: Get information for the current session
      tags:
      - Session Info
  /solrIndex/v1/fetchSolrTypes:
    post:
      operationId: fetchSolrTypes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolrIndexDoc"
        description: solrIndexDoc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Fetch Solr types
      tags:
      - Solr Indices
  /solrIndex/v1/solrConnectionTest:
    post:
      operationId: solrConnectionTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolrIndexDoc"
        description: solrIndexDoc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolrConnectionTestResponse"
          description: default response
      summary: Test connection to Solr
      tags:
      - Solr Indices
  /solrIndex/v1/{uuid}:
    get:
      operationId: fetchSolrIndex
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolrIndexDoc"
          description: default response
      summary: Fetch a solr index doc by its UUID
      tags:
      - Solr Indices
    put:
      operationId: updateSolrIndex
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolrIndexDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolrIndexDoc"
          description: default response
      summary: Update a solr index doc
      tags:
      - Solr Indices
  /sqlstatistics/v2/destroy:
    post:
      operationId: destroySqlStatisticsQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: QueryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy a running query
      tags:
      - Sql Statistics Query
  /sqlstatistics/v2/search:
    post:
      operationId: startSqlStatisticsQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: SearchRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
          description: default response
      summary: Submit a search request
      tags:
      - Sql Statistics Query
  /stateStore/v1/{uuid}:
    get:
      operationId: fetchStateStore_1
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateDoc"
          description: default response
      summary: Fetch an state store doc by its UUID
      tags:
      - State Stores
    put:
      operationId: updateStateStore_1
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateDoc"
          description: default response
      summary: Update an state store doc
      tags:
      - State Stores
  /statistic/rollUp/v1/bitMaskConversion:
    post:
      operationId: statisticBitMaskConversion
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        description: maskValues
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomRollUpMaskFields"
          description: default response
      summary: Get rollup bit mask
      tags:
      - SQL Statistics RollUps
  /statistic/rollUp/v1/bitMaskPermGeneration:
    post:
      operationId: statisticBitMaskPermGeneration
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        description: fieldCount
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomRollUpMask"
          description: default response
      summary: Create rollup bit mask
      tags:
      - SQL Statistics RollUps
  /statistic/rollUp/v1/dataSourceFieldChange:
    post:
      operationId: statisticFieldChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatisticsDataSourceFieldChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsDataSourceData"
          description: default response
      summary: Change fields
      tags:
      - SQL Statistics RollUps
  /statistic/v1/{uuid}:
    get:
      operationId: fetchStatisticStore
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticStoreDoc"
          description: default response
      summary: Fetch a statistic doc by its UUID
      tags:
      - SQL Statistics Stores
    put:
      operationId: updateStatisticStore
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatisticStoreDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticStoreDoc"
          description: default response
      summary: Update a statistic doc
      tags:
      - SQL Statistics Stores
  /statsStore/rollUp/v1/bitMaskConversion:
    post:
      operationId: statsBitMaskConversion
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        description: maskValues
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageCustomRollUpMaskFields"
          description: default response
      summary: Get rollup bit mask
      tags:
      - Stroom Stats RollUps
  /statsStore/rollUp/v1/bitMaskPermGeneration:
    post:
      operationId: statsBitMaskPermGeneration
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        description: fieldCount
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageCustomRollUpMask"
          description: default response
      summary: Create rollup bit mask
      tags:
      - Stroom Stats RollUps
  /statsStore/rollUp/v1/dataSourceFieldChange:
    post:
      operationId: statsFieldChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StroomStatsStoreFieldChangeRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StroomStatsStoreEntityData"
          description: default response
      summary: Change fields
      tags:
      - Stroom Stats RollUps
  /statsStore/v1/{uuid}:
    get:
      operationId: fetchStroomStatsStore
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StroomStatsStoreDoc"
          description: default response
      summary: Fetch a store doc doc by its UUID
      tags:
      - Stroom Stats Stores
    put:
      operationId: updateStroomStatsStore
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StroomStatsStoreDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StroomStatsStoreDoc"
          description: default response
      summary: Update a stats store doc
      tags:
      - Stroom Stats Stores
  /stepping/v1/findElementDoc:
    post:
      operationId: findElementDoc
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindElementDocRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Load the document for an element
      tags:
      - Stepping
  /stepping/v1/getPipelineForStepping:
    post:
      operationId: getPipelineForStepping
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPipelineForMetaRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Get a pipeline for stepping
      tags:
      - Stepping
  /stepping/v1/step:
    post:
      operationId: step
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineStepRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SteppingResult"
          description: default response
      summary: Step a pipeline
      tags:
      - Stepping
  /stepping/v1/terminateStepping:
    post:
      operationId: terminateStepping
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineStepRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Terminate pipeline stepping process
      tags:
      - Stepping
  /storedQuery/v1/create:
    post:
      operationId: createStoredQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoredQuery"
        description: storedQuery
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoredQuery"
          description: default response
      summary: Create a stored query
      tags:
      - Stored Queries
  /storedQuery/v1/delete:
    delete:
      operationId: deleteStoredQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoredQuery"
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete a stored query
      tags:
      - Stored Queries
  /storedQuery/v1/find:
    post:
      operationId: findStoredQueries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindStoredQueryCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageStoredQuery"
          description: default response
      summary: Find stored queries
      tags:
      - Stored Queries
  /storedQuery/v1/read:
    post:
      operationId: fetchStoredQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoredQuery"
        description: storedQuery
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoredQuery"
          description: default response
      summary: Fetch a stored query
      tags:
      - Stored Queries
  /storedQuery/v1/update:
    put:
      operationId: updateStoredQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoredQuery"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoredQuery"
          description: default response
      summary: Update a stored query
      tags:
      - Stored Queries
  /stroom-elastic-index/v2/destroy:
    post:
      operationId: destroyElasticIndexQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: QueryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy a running query
      tags:
      - Elasticsearch Queries
  /stroom-elastic-index/v2/search:
    post:
      operationId: searchElasticIndex
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: SearchRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
          description: default response
      summary: Submit a search request
      tags:
      - Elasticsearch Queries
  /stroom-index/v2/destroy:
    post:
      operationId: destroyStroomIndexQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: QueryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy a running query
      tags:
      - Stroom-Index Queries
  /stroom-index/v2/search:
    post:
      operationId: startStroomIndexQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: SearchRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
          description: default response
      summary: Submit a search request
      tags:
      - Stroom-Index Queries
  /stroom-solr-index/v2/destroy:
    post:
      operationId: destroySolrIndexQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryKey"
        description: QueryKey
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Destroy a running query
      tags:
      - Solr Queries
  /stroom-solr-index/v2/search:
    post:
      operationId: startSolrIndexQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: SearchRequest
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
          description: default response
      summary: Submit a search request
      tags:
      - Solr Queries
  /suggest/v1:
    post:
      operationId: fetchSuggestions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FetchSuggestionsRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestions"
          description: default response
      summary: Fetch some suggestions
      tags:
      - Suggestions
  /systemInfo/v1:
    get:
      operationId: getAllSystemInfo
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfoResultList"
          description: default response
      summary: Get all system info results
      tags:
      - System Info
  /systemInfo/v1/names:
    get:
      operationId: getSystemInfoNames
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: default response
      summary: Get all system info result names
      tags:
      - System Info
  /systemInfo/v1/params/{name}:
    get:
      operationId: getSystemInfoParams
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParamInfo"
          description: default response
      summary: Gets the parameters for this system info provider
      tags:
      - System Info
  /systemInfo/v1/{name}:
    get:
      operationId: getSystemInfoByName
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfoResult"
          description: default response
      summary: Get a system info result by name
      tags:
      - System Info
  /task/v1/find/{nodeName}:
    post:
      operationId: findTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindTaskProgressRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskProgressResponse"
          description: default response
      summary: Finds tasks for a node
      tags:
      - Tasks
  /task/v1/list/{nodeName}:
    get:
      operationId: listTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskProgressResponse"
          description: default response
      summary: Lists tasks for a node
      tags:
      - Tasks
  /task/v1/terminate/{nodeName}:
    post:
      operationId: terminateTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TerminateTaskProgressRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Terminates tasks for a node
      tags:
      - Tasks
  /task/v1/user/{nodeName}:
    get:
      operationId: listUserTasks
      parameters:
      - in: path
        name: nodeName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskProgressResponse"
          description: default response
      summary: Lists tasks for a node
      tags:
      - Tasks
  /textConverter/v1/{uuid}:
    get:
      operationId: fetchTextConverter
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TextConverterDoc"
          description: default response
      summary: Fetch a text converter doc by its UUID
      tags:
      - Text Converters
    put:
      operationId: updateTextConverter
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextConverterDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TextConverterDoc"
          description: default response
      summary: Update a text converter doc
      tags:
      - Text Converters
  /userInfo/v1/{userUuid}:
    get:
      operationId: fetchUser
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
          description: default response
      summary: Fetches the userInfo with the supplied user UUID
      tags:
      - Authorisation
  /userRef/v1/find:
    post:
      operationId: findUserRefs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindUserCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageUserRef"
          description: default response
      summary: Find the users and groups matching the supplied criteria of users who
        belong to at least one of the same groups as the current user. If the current
        user is admin or has Manage Users permission then they can see all users.
      tags:
      - Authorisation
  /userRef/v1/getUserByUuid:
    post:
      operationId: getUserByUuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserRequest"
        description: request
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRef"
          description: default response
      summary: Resolve a user ref by UUID
      tags:
      - Authorisation
  /users/v1/createGroup:
    post:
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: name
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
      summary: Creates a group with the supplied name
      tags:
      - Authorisation
  /users/v1/createUser:
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDesc"
        description: name
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
      summary: Creates a user with the supplied name
      tags:
      - Authorisation
  /users/v1/createUsers:
    post:
      operationId: createUsers
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: users
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
          description: default response
      summary: "Creates a batch of users from a list of CSV entries. Each line is\
        \ of the form 'id,displayName,fullName', where displayName and fullName are\
        \ optional"
      tags:
      - Authorisation
  /users/v1/fetchBySubjectId/{subjectId}:
    get:
      operationId: fetchBySubjectId
      parameters:
      - in: path
        name: subjectId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
      summary: Fetches the user with the supplied subjectId (aka Unique ID)
      tags:
      - Authorisation
  /users/v1/find:
    post:
      operationId: findUsersByCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindUserCriteria"
        description: criteria
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageUser"
          description: default response
      summary: Find the user names matching the supplied criteria of users who belong
        to at least one of the same groups as the current user. If the current user
        is admin or has Manage Users permission then they can see all users.
      tags:
      - Authorisation
  /users/v1/findDependencies:
    post:
      operationId: findUserDependenciesByCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindUserDependenciesCriteria"
        description: criteria
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageUserDependency"
          description: default response
      summary: Find the items that depend on this user
      tags:
      - Authorisation
  /users/v1/updateUser:
    post:
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: user
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
      summary: Updates a user
      tags:
      - Authorisation
  /users/v1/{userUuid}:
    delete:
      operationId: deleteUser
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Delete the user with the supplied user UUID
      tags:
      - Authorisation
    get:
      operationId: fetchUser_1
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
      summary: Fetches the user with the supplied UUID
      tags:
      - Authorisation
  /users/v1/{userUuid}/{groupUuid}:
    delete:
      operationId: removeUserFromGroup
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: groupUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Removes user/group with UUID userUuid from the group with UUID groupUuid
      tags:
      - Authorisation
    put:
      operationId: addUserToGroup
      parameters:
      - in: path
        name: userUuid
        required: true
        schema:
          type: string
      - in: path
        name: groupUuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: default response
      summary: Adds user/group with UUID userUuid to the group with UUID groupUuid
      tags:
      - Authorisation
  /view/v1/list:
    get:
      operationId: listViews
      responses:
        default:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocRef"
          description: default response
      summary: Fetch view names
      tags:
      - Views
  /view/v1/{uuid}:
    get:
      operationId: fetchView
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewDoc"
          description: default response
      summary: Fetch a view doc by its UUID
      tags:
      - Views
    put:
      operationId: updateView
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ViewDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewDoc"
          description: default response
      summary: Update a view doc
      tags:
      - Views
  /visualisation/v1/{uuid}:
    get:
      operationId: fetchVisualisation
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VisualisationDoc"
          description: default response
      summary: Fetch a visualisation doc by its UUID
      tags:
      - Visualisations
    put:
      operationId: updateVisualisation
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VisualisationDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VisualisationDoc"
          description: default response
      summary: Update a visualisation doc
      tags:
      - Visualisations
  /welcome/v1:
    get:
      operationId: fetchWelcome
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Welcome"
          description: default response
      summary: Get the configured HTML welcome message
      tags:
      - Welcome
  /wordList/v1/{uuid}:
    get:
      operationId: getWords
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WordList"
          description: default response
      summary: Fetch a list of words from a dictionary by its UUID
      tags:
      - Word List (v1)
  /xmlSchema/v1/{uuid}:
    get:
      operationId: fetchXmlSchema
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XmlSchemaDoc"
          description: default response
      summary: Fetch a xml schema doc by its UUID
      tags:
      - XML Schemas
    put:
      operationId: updateXmlSchema
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/XmlSchemaDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XmlSchemaDoc"
          description: default response
      summary: Update a xml schema doc
      tags:
      - XML Schemas
  /xslt/v1/{uuid}:
    get:
      operationId: fetchXslt
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XsltDoc"
          description: default response
      summary: Fetch an xslt doc by its UUID
      tags:
      - XSLTs
    put:
      operationId: updateXslt
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/XsltDoc"
        description: doc
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/XsltDoc"
          description: default response
      summary: Update a an xslt doc
      tags:
      - XSLTs
components:
  schemas:
    AbstractAnnotationChange:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    AbstractAppPermissionChange:
      type: object
      discriminator:
        propertyName: type
      properties:
        permission:
          type: string
          enum:
          - ADMINISTRATOR
          - ANNOTATIONS
          - MANAGE_CACHE_PERMISSION
          - VIEW_DATA_PERMISSION
          - VIEW_DATA_WITH_PIPELINE_PERMISSION
          - DELETE_DATA_PERMISSION
          - IMPORT_DATA_PERMISSION
          - EXPORT_DATA_PERMISSION
          - MANAGE_USERS_PERMISSION
          - CHANGE_OWNER_PERMISSION
          - STEPPING_PERMISSION
          - MANAGE_PROCESSORS_PERMISSION
          - MANAGE_TASKS_PERMISSION
          - DOWNLOAD_SEARCH_RESULTS_PERMISSION
          - MANAGE_API_KEYS
          - MANAGE_CONTENT_TEMPLATES_PERMISSION
          - MANAGE_DATA_RECEIPT_RULES_PERMISSION
          - MANAGE_JOBS_PERMISSION
          - MANAGE_PROPERTIES_PERMISSION
          - MANAGE_POLICIES_PERMISSION
          - MANAGE_NODES_PERMISSION
          - MANAGE_INDEX_SHARDS_PERMISSION
          - MANAGE_VOLUMES_PERMISSION
          - MANAGE_DB_PERMISSION
          - IMPORT_CONFIGURATION
          - EXPORT_CONFIGURATION
          - VIEW_SYSTEM_INFO_PERMISSION
          - CHECK_RECEIPT_STATUS
          - FETCH_HASHED_RECEIPT_POLICY_RULES
          - VERIFY_API_KEY
          - STROOM_PROXY
        type:
          type: string
        userRef:
          $ref: "#/components/schemas/UserRef"
      required:
      - type
    AbstractDocumentPermissionsChange:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    AbstractFetchDataResult:
      type: object
      discriminator:
        propertyName: type
      properties:
        availableChildStreamTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        classification:
          type: string
        displayMode:
          type: string
          enum:
          - TEXT
          - HEX
          - MARKER
        errors:
          type: array
          items:
            type: string
        feedName:
          type: string
        itemRange:
          $ref: "#/components/schemas/OffsetRange"
        sourceLocation:
          $ref: "#/components/schemas/SourceLocation"
        streamTypeName:
          type: string
        totalCharacterCount:
          $ref: "#/components/schemas/CountLong"
        totalItemCount:
          $ref: "#/components/schemas/CountLong"
        type:
          type: string
      required:
      - type
    AbstractPlanBSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        maxStoreSize:
          type: integer
          format: int64
        overwrite:
          type: boolean
        retention:
          $ref: "#/components/schemas/RetentionSettings"
        snapshotSettings:
          $ref: "#/components/schemas/SnapshotSettings"
        synchroniseMerge:
          type: boolean
        type:
          type: string
      required:
      - type
    Account:
      type: object
      properties:
        comments:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        email:
          type: string
        enabled:
          type: boolean
        firstName:
          type: string
        forcePasswordChange:
          type: boolean
        id:
          type: integer
          format: int32
        inactive:
          type: boolean
        lastLoginMs:
          type: integer
          format: int64
        lastName:
          type: string
        locked:
          type: boolean
        loginCount:
          type: integer
          format: int32
        loginFailures:
          type: integer
          format: int32
        neverExpires:
          type: boolean
        processingAccount:
          type: boolean
        reactivatedMs:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        userId:
          type: string
        version:
          type: integer
          format: int32
    AcknowledgeSplashRequest:
      type: object
      properties:
        message:
          type: string
        version:
          type: string
    Activity:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        details:
          $ref: "#/components/schemas/ActivityDetails"
        id:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        userRef:
          $ref: "#/components/schemas/UserRef"
        version:
          type: integer
          format: int32
    ActivityConfig:
      type: object
      properties:
        chooseOnStartup:
          type: boolean
        editorBody:
          type: string
        editorTitle:
          type: string
        enabled:
          type: boolean
        managerTitle:
          type: string
    ActivityDetails:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Prop"
    ActivityValidationResult:
      type: object
      properties:
        messages:
          type: string
        valid:
          type: boolean
    AddAllDocumentUserCreatePermissions:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          userRef:
            $ref: "#/components/schemas/UserRef"
    AddAllPermissionsFrom:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          sourceDocRef:
            $ref: "#/components/schemas/DocRef"
    AddAnnotationTable:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          table:
            $ref: "#/components/schemas/AnnotationTable"
    AddAppPermission:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAppPermissionChange"
    AddDocumentUserCreatePermission:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          documentType:
            type: string
          userRef:
            $ref: "#/components/schemas/UserRef"
    AddField:
      type: object
      properties:
        indexDocRef:
          $ref: "#/components/schemas/DocRef"
        indexField:
          $ref: "#/components/schemas/IndexFieldImpl"
    AddRemoveTagsRequest:
      type: object
      properties:
        docRefs:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
    AddTag:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          tag:
            $ref: "#/components/schemas/AnnotationTag"
    AdvancedDocumentFindRequest:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        requiredPermissions:
          type: array
          items:
            type: string
            enum:
            - OWNER
            - DELETE
            - EDIT
            - VIEW
            - USE
          uniqueItems: true
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    AdvancedDocumentFindWithPermissionsRequest:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        requiredPermissions:
          type: array
          items:
            type: string
            enum:
            - OWNER
            - DELETE
            - EDIT
            - VIEW
            - USE
          uniqueItems: true
        showLevel:
          type: string
          enum:
          - SHOW_EXPLICIT
          - SHOW_EFFECTIVE
          - SHOW_ALL
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
        userRef:
          $ref: "#/components/schemas/UserRef"
    AnalyticDataShard:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        node:
          type: string
        path:
          type: string
        size:
          type: integer
          format: int64
    AnalyticProcessConfig:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    AnalyticRuleDoc:
      type: object
      properties:
        analyticNotificationConfig:
          $ref: "#/components/schemas/NotificationConfig"
        analyticProcessConfig:
          $ref: "#/components/schemas/AnalyticProcessConfig"
        analyticProcessType:
          type: string
          enum:
          - STREAMING
          - TABLE_BUILDER
          - SCHEDULED_QUERY
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        duplicateNotificationConfig:
          $ref: "#/components/schemas/DuplicateNotificationConfig"
        errorFeed:
          $ref: "#/components/schemas/DocRef"
        languageVersion:
          type: string
          enum:
          - STROOM_QL_VERSION_0_1
          - SIGMA
        name:
          type: string
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/NotificationConfig"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/Param"
        query:
          type: string
        rememberNotifications:
          type: boolean
        suppressDuplicateNotifications:
          type: boolean
        timeRange:
          $ref: "#/components/schemas/TimeRange"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    AnalyticTracker:
      type: object
      properties:
        analyticTrackerData:
          $ref: "#/components/schemas/AnalyticTrackerData"
        analyticUuid:
          type: string
    AnalyticTrackerData:
      type: object
      discriminator:
        propertyName: type
      properties:
        message:
          type: string
        type:
          type: string
      required:
      - type
    AnalyticUiDefaultConfig:
      type: object
      properties:
        defaultBodyTemplate:
          type: string
        defaultDestinationFeed:
          $ref: "#/components/schemas/DocRef"
        defaultErrorFeed:
          $ref: "#/components/schemas/DocRef"
        defaultNode:
          type: string
        defaultSubjectTemplate:
          type: string
    Annotation:
      type: object
      properties:
        assignedTo:
          $ref: "#/components/schemas/UserRef"
        collections:
          type: array
          items:
            $ref: "#/components/schemas/AnnotationTag"
        comment:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        history:
          type: string
        id:
          type: integer
          format: int64
        labels:
          type: array
          items:
            $ref: "#/components/schemas/AnnotationTag"
        name:
          type: string
        retainUntilTimeMs:
          type: integer
          format: int64
        retentionPeriod:
          $ref: "#/components/schemas/SimpleDuration"
        status:
          $ref: "#/components/schemas/AnnotationTag"
        subject:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    AnnotationEntry:
      type: object
      properties:
        deleted:
          type: boolean
        entryTime:
          type: integer
          format: int64
        entryType:
          type: string
          enum:
          - TITLE
          - SUBJECT
          - STATUS
          - ASSIGNED
          - COMMENT
          - LINK_EVENT
          - UNLINK_EVENT
          - RETENTION_PERIOD
          - DESCRIPTION
          - ADD_TO_COLLECTION
          - REMOVE_FROM_COLLECTION
          - ADD_LABEL
          - REMOVE_LABEL
          - ADD_TABLE_DATA
          - LINK_ANNOTATION
          - UNLINK_ANNOTATION
          - DELETE
        entryUser:
          $ref: "#/components/schemas/UserRef"
        entryValue:
          $ref: "#/components/schemas/EntryValue"
        id:
          type: integer
          format: int64
        previousValue:
          $ref: "#/components/schemas/EntryValue"
        updateTime:
          type: integer
          format: int64
        updateUser:
          $ref: "#/components/schemas/UserRef"
    AnnotationTable:
      type: object
      allOf:
      - $ref: "#/components/schemas/EntryValue"
      - type: object
        properties:
          columns:
            type: array
            items:
              type: string
          values:
            type: array
            items:
              type: array
              items:
                type: string
    AnnotationTag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        style:
          type: string
          enum:
          - NONE
          - RED
          - PINK
          - PURPLE
          - DEEP_PURPLE
          - INDIGO
          - BLUE
          - LIGHT_BLUE
          - CYAN
          - TEAL
          - GREEN
          - LIGHT_GREEN
          - LIME
          - YELLOW
          - AMBER
          - ORANGE
          - DEEP_ORANGE
          - BROWN
          - GREY
          - BLUE_GREY
        type:
          type: string
          enum:
          - STATUS
          - LABEL
          - COLLECTION
        uuid:
          type: string
    ApiKey:
      type: object
      properties:
        comments:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        enabled:
          type: boolean
        expiresOnMs:
          type: integer
          format: int64
        id:
          type: integer
          format: int32
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        userEmail:
          type: string
        userId:
          type: string
        version:
          type: integer
          format: int32
    ApiKeyResultPage:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ApiKey"
    AppPermissionSet:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    AppPermissionSetImpl:
      type: object
      allOf:
      - $ref: "#/components/schemas/AppPermissionSet"
      - type: object
        properties:
          appPermissions:
            type: array
            items:
              type: string
              enum:
              - ADMINISTRATOR
              - ANNOTATIONS
              - MANAGE_CACHE_PERMISSION
              - VIEW_DATA_PERMISSION
              - VIEW_DATA_WITH_PIPELINE_PERMISSION
              - DELETE_DATA_PERMISSION
              - IMPORT_DATA_PERMISSION
              - EXPORT_DATA_PERMISSION
              - MANAGE_USERS_PERMISSION
              - CHANGE_OWNER_PERMISSION
              - STEPPING_PERMISSION
              - MANAGE_PROCESSORS_PERMISSION
              - MANAGE_TASKS_PERMISSION
              - DOWNLOAD_SEARCH_RESULTS_PERMISSION
              - MANAGE_API_KEYS
              - MANAGE_CONTENT_TEMPLATES_PERMISSION
              - MANAGE_DATA_RECEIPT_RULES_PERMISSION
              - MANAGE_JOBS_PERMISSION
              - MANAGE_PROPERTIES_PERMISSION
              - MANAGE_POLICIES_PERMISSION
              - MANAGE_NODES_PERMISSION
              - MANAGE_INDEX_SHARDS_PERMISSION
              - MANAGE_VOLUMES_PERMISSION
              - MANAGE_DB_PERMISSION
              - IMPORT_CONFIGURATION
              - EXPORT_CONFIGURATION
              - VIEW_SYSTEM_INFO_PERMISSION
              - CHECK_RECEIPT_STATUS
              - FETCH_HASHED_RECEIPT_POLICY_RULES
              - VERIFY_API_KEY
              - STROOM_PROXY
            uniqueItems: true
          operator:
            type: string
            enum:
            - ALL_OF
            - ONE_OF
            - SINGLE
            - EMPTY
    AppUserPermissions:
      type: object
      properties:
        inherited:
          type: array
          items:
            type: string
            enum:
            - ADMINISTRATOR
            - ANNOTATIONS
            - MANAGE_CACHE_PERMISSION
            - VIEW_DATA_PERMISSION
            - VIEW_DATA_WITH_PIPELINE_PERMISSION
            - DELETE_DATA_PERMISSION
            - IMPORT_DATA_PERMISSION
            - EXPORT_DATA_PERMISSION
            - MANAGE_USERS_PERMISSION
            - CHANGE_OWNER_PERMISSION
            - STEPPING_PERMISSION
            - MANAGE_PROCESSORS_PERMISSION
            - MANAGE_TASKS_PERMISSION
            - DOWNLOAD_SEARCH_RESULTS_PERMISSION
            - MANAGE_API_KEYS
            - MANAGE_CONTENT_TEMPLATES_PERMISSION
            - MANAGE_DATA_RECEIPT_RULES_PERMISSION
            - MANAGE_JOBS_PERMISSION
            - MANAGE_PROPERTIES_PERMISSION
            - MANAGE_POLICIES_PERMISSION
            - MANAGE_NODES_PERMISSION
            - MANAGE_INDEX_SHARDS_PERMISSION
            - MANAGE_VOLUMES_PERMISSION
            - MANAGE_DB_PERMISSION
            - IMPORT_CONFIGURATION
            - EXPORT_CONFIGURATION
            - VIEW_SYSTEM_INFO_PERMISSION
            - CHECK_RECEIPT_STATUS
            - FETCH_HASHED_RECEIPT_POLICY_RULES
            - VERIFY_API_KEY
            - STROOM_PROXY
          uniqueItems: true
        permissions:
          type: array
          items:
            type: string
            enum:
            - ADMINISTRATOR
            - ANNOTATIONS
            - MANAGE_CACHE_PERMISSION
            - VIEW_DATA_PERMISSION
            - VIEW_DATA_WITH_PIPELINE_PERMISSION
            - DELETE_DATA_PERMISSION
            - IMPORT_DATA_PERMISSION
            - EXPORT_DATA_PERMISSION
            - MANAGE_USERS_PERMISSION
            - CHANGE_OWNER_PERMISSION
            - STEPPING_PERMISSION
            - MANAGE_PROCESSORS_PERMISSION
            - MANAGE_TASKS_PERMISSION
            - DOWNLOAD_SEARCH_RESULTS_PERMISSION
            - MANAGE_API_KEYS
            - MANAGE_CONTENT_TEMPLATES_PERMISSION
            - MANAGE_DATA_RECEIPT_RULES_PERMISSION
            - MANAGE_JOBS_PERMISSION
            - MANAGE_PROPERTIES_PERMISSION
            - MANAGE_POLICIES_PERMISSION
            - MANAGE_NODES_PERMISSION
            - MANAGE_INDEX_SHARDS_PERMISSION
            - MANAGE_VOLUMES_PERMISSION
            - MANAGE_DB_PERMISSION
            - IMPORT_CONFIGURATION
            - EXPORT_CONFIGURATION
            - VIEW_SYSTEM_INFO_PERMISSION
            - CHECK_RECEIPT_STATUS
            - FETCH_HASHED_RECEIPT_POLICY_RULES
            - VERIFY_API_KEY
            - STROOM_PROXY
          uniqueItems: true
        userRef:
          $ref: "#/components/schemas/UserRef"
    AppUserPermissionsReport:
      type: object
      properties:
        explicitPermissions:
          type: array
          items:
            type: string
            enum:
            - ADMINISTRATOR
            - ANNOTATIONS
            - MANAGE_CACHE_PERMISSION
            - VIEW_DATA_PERMISSION
            - VIEW_DATA_WITH_PIPELINE_PERMISSION
            - DELETE_DATA_PERMISSION
            - IMPORT_DATA_PERMISSION
            - EXPORT_DATA_PERMISSION
            - MANAGE_USERS_PERMISSION
            - CHANGE_OWNER_PERMISSION
            - STEPPING_PERMISSION
            - MANAGE_PROCESSORS_PERMISSION
            - MANAGE_TASKS_PERMISSION
            - DOWNLOAD_SEARCH_RESULTS_PERMISSION
            - MANAGE_API_KEYS
            - MANAGE_CONTENT_TEMPLATES_PERMISSION
            - MANAGE_DATA_RECEIPT_RULES_PERMISSION
            - MANAGE_JOBS_PERMISSION
            - MANAGE_PROPERTIES_PERMISSION
            - MANAGE_POLICIES_PERMISSION
            - MANAGE_NODES_PERMISSION
            - MANAGE_INDEX_SHARDS_PERMISSION
            - MANAGE_VOLUMES_PERMISSION
            - MANAGE_DB_PERMISSION
            - IMPORT_CONFIGURATION
            - EXPORT_CONFIGURATION
            - VIEW_SYSTEM_INFO_PERMISSION
            - CHECK_RECEIPT_STATUS
            - FETCH_HASHED_RECEIPT_POLICY_RULES
            - VERIFY_API_KEY
            - STROOM_PROXY
          uniqueItems: true
        inheritedPermissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    Arg:
      type: object
      properties:
        allowedValues:
          type: array
          items:
            type: string
        argType:
          type: string
          enum:
          - UNKNOWN
          - BOOLEAN
          - DOUBLE
          - ERROR
          - INTEGER
          - LONG
          - "NULL"
          - NUMBER
          - STRING
        defaultValue:
          type: string
        description:
          type: string
        minVarargsCount:
          type: integer
          format: int32
        name:
          type: string
        optional:
          type: boolean
        varargs:
          type: boolean
    AssignTasksRequest:
      type: object
      properties:
        count:
          type: integer
          format: int32
        nodeName:
          type: string
        sourceTaskId:
          $ref: "#/components/schemas/TaskId"
    Automate:
      type: object
      properties:
        open:
          type: boolean
        refresh:
          type: boolean
        refreshInterval:
          type: string
    AwsAnonymousCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
    AwsAssumeRole:
      type: object
      properties:
        clientConfig:
          $ref: "#/components/schemas/AwsAssumeRoleClientConfig"
        request:
          $ref: "#/components/schemas/AwsAssumeRoleRequest"
    AwsAssumeRoleClientConfig:
      type: object
      properties:
        credentials:
          $ref: "#/components/schemas/AwsCredentials"
        endpointOverride:
          type: string
        region:
          type: string
    AwsAssumeRoleRequest:
      type: object
      properties:
        durationSeconds:
          type: integer
          format: int32
        externalId:
          type: string
        policy:
          type: string
        policyArns:
          type: array
          items:
            $ref: "#/components/schemas/AwsPolicyDescriptorType"
        providedContexts:
          type: array
          items:
            $ref: "#/components/schemas/AwsProvidedContext"
        roleArn:
          type: string
        roleSessionName:
          type: string
        serialNumber:
          type: string
        sourceIdentity:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/AwsTag"
        tokenCode:
          type: string
        transitiveTagKeys:
          type: array
          items:
            type: string
    AwsBasicCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
      - type: object
        properties:
          accessKeyId:
            type: string
          secretAccessKey:
            type: string
    AwsCredentials:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    AwsDefaultCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
    AwsEnvironmentVariableCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
    AwsHttpConfig:
      type: object
      properties:
        connectionTimeout:
          type: string
        proxyConfiguration:
          $ref: "#/components/schemas/AwsProxyConfig"
        trustAllCertificatesEnabled:
          type: boolean
    AwsPolicyDescriptorType:
      type: object
      properties:
        arn:
          type: string
    AwsProfileCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
      - type: object
        properties:
          profileFilePath:
            type: string
          profileName:
            type: string
    AwsProvidedContext:
      type: object
      properties:
        contextAssertion:
          type: string
        providerArn:
          type: string
    AwsProxyConfig:
      type: object
      properties:
        host:
          type: string
        password:
          type: string
        port:
          type: integer
          format: int32
        scheme:
          type: string
        useSystemPropertyValues:
          type: boolean
        username:
          type: string
    AwsSessionCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
      - type: object
        properties:
          accessKeyId:
            type: string
          secretAccessKey:
            type: string
          sessionToken:
            type: string
    AwsSystemPropertyCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
    AwsTag:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    AwsWebCredentials:
      type: object
      allOf:
      - $ref: "#/components/schemas/AwsCredentials"
      - type: object
        properties:
          asyncCredentialUpdateEnabled:
            type: boolean
          prefetchTime:
            type: string
          roleArn:
            type: string
          roleSessionName:
            type: string
          sessionDuration:
            type: string
          staleTime:
            type: string
          webIdentityTokenFile:
            type: string
    BatchScheduleRequest:
      type: object
      properties:
        jobNodeIds:
          type: array
          items:
            type: integer
            format: int32
          uniqueItems: true
        jobType:
          type: string
          enum:
          - UNKNOWN
          - CRON
          - FREQUENCY
          - DISTRIBUTED
        schedule:
          $ref: "#/components/schemas/Schedule"
    BuildInfo:
      type: object
      properties:
        buildTime:
          type: integer
          format: int64
        buildVersion:
          type: string
        upTime:
          type: integer
          format: int64
    BulkActionResult:
      type: object
      properties:
        explorerNodes:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNode"
        message:
          type: string
    BulkDocumentPermissionChangeRequest:
      type: object
      properties:
        change:
          $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
    BulkProcessorFilterChangeRequest:
      type: object
      properties:
        change:
          type: string
          enum:
          - ENABLE
          - DISABLE
          - DELETE
          - SET_RUN_AS_USER
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        userRef:
          $ref: "#/components/schemas/UserRef"
    CacheIdentity:
      type: object
      properties:
        basePropertyPath:
          $ref: "#/components/schemas/PropertyPath"
        cacheName:
          type: string
    CacheInfo:
      type: object
      properties:
        basePropertyPath:
          $ref: "#/components/schemas/PropertyPath"
        map:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        nodeName:
          type: string
    CacheInfoResponse:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/CacheInfo"
    CacheNamesResponse:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/CacheIdentity"
    ChangeAnnotationEntryRequest:
      type: object
      properties:
        annotationEntryId:
          type: integer
          format: int64
        annotationRef:
          $ref: "#/components/schemas/DocRef"
        data:
          type: string
    ChangeAssignedTo:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          userRef:
            $ref: "#/components/schemas/UserRef"
    ChangeComment:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          comment:
            type: string
    ChangeDescription:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          description:
            type: string
    ChangePasswordRequest:
      type: object
      properties:
        confirmNewPassword:
          type: string
        currentPassword:
          type: string
        newPassword:
          type: string
        userId:
          type: string
    ChangePasswordResponse:
      type: object
      properties:
        changeSucceeded:
          type: boolean
        forceSignIn:
          type: boolean
        message:
          type: string
    ChangeRetentionPeriod:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          retentionPeriod:
            $ref: "#/components/schemas/SimpleDuration"
    ChangeSubject:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          subject:
            type: string
    ChangeTitle:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          title:
            type: string
    CheckDocumentPermissionRequest:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        permission:
          type: string
          enum:
          - OWNER
          - DELETE
          - EDIT
          - VIEW
          - USE
    ClientCredentials:
      type: object
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
    ClusterLockKey:
      type: object
      properties:
        creationTime:
          type: integer
          format: int64
        name:
          type: string
        nodeName:
          type: string
    ClusterNodeInfo:
      type: object
      properties:
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        discoverTime:
          type: integer
          format: int64
        endpointUrl:
          type: string
        error:
          type: string
        itemList:
          type: array
          items:
            $ref: "#/components/schemas/ClusterNodeInfoItem"
        nodeName:
          type: string
        ping:
          type: integer
          format: int64
    ClusterNodeInfoItem:
      type: object
      properties:
        active:
          type: boolean
        master:
          type: boolean
        nodeName:
          type: string
    Column:
      type: object
      description: "Describes a field in a result set. The field can have various\
        \ expressions applied to it, e.g. SUM(), along with sorting, filtering, formatting\
        \ and grouping"
      properties:
        columnFilter:
          $ref: "#/components/schemas/ColumnFilter"
        columnValueSelection:
          $ref: "#/components/schemas/ColumnValueSelection"
        expression:
          type: string
          description: The expression to use to generate the value for this field
          example: "SUM(${count})"
        filter:
          $ref: "#/components/schemas/IncludeExcludeFilter"
        format:
          $ref: "#/components/schemas/Format"
        group:
          type: integer
          format: int32
        id:
          type: string
        name:
          type: string
        sort:
          $ref: "#/components/schemas/Sort"
    ColumnFilter:
      type: object
      properties:
        filter:
          type: string
    ColumnRef:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ColumnValueSelection:
      type: object
      properties:
        invert:
          type: boolean
        values:
          type: array
          items:
            type: string
          uniqueItems: true
    ColumnValues:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            type: string
    ColumnValuesRequest:
      type: object
      properties:
        column:
          $ref: "#/components/schemas/Column"
        filter:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        searchRequest:
          $ref: "#/components/schemas/DashboardSearchRequest"
    CompletionItem:
      type: object
      discriminator:
        propertyName: type
      properties:
        caption:
          type: string
        meta:
          type: string
        score:
          type: integer
          format: int32
        tooltip:
          type: string
        type:
          type: string
      required:
      - type
    CompletionSnippet:
      type: object
      allOf:
      - $ref: "#/components/schemas/CompletionItem"
      - type: object
        properties:
          snippet:
            type: string
    CompletionValue:
      type: object
      allOf:
      - $ref: "#/components/schemas/CompletionItem"
      - type: object
        properties:
          value:
            type: string
    CompletionsRequest:
      type: object
      properties:
        column:
          type: integer
          format: int32
        dataSourceRef:
          $ref: "#/components/schemas/DocRef"
        includedTypes:
          type: array
          items:
            type: string
            enum:
            - DATA_SOURCE
            - QUERYABLE_FIELD
            - FIELD
            - FUNCTION
            - TITLE
            - STRUCTURE
            - VISUALISATION
            - DICTIONARY
          uniqueItems: true
        maxCompletions:
          type: integer
          format: int32
        pattern:
          type: string
        row:
          type: integer
          format: int32
        text:
          type: string
        textType:
          type: string
          enum:
          - STROOM_QUERY_LANGUAGE
          - EXPRESSION
    ComponentConfig:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        settings:
          $ref: "#/components/schemas/ComponentSettings"
        type:
          type: string
    ComponentResultRequest:
      type: object
      discriminator:
        propertyName: type
      properties:
        componentId:
          type: string
          description: The ID of the component that will receive the results corresponding
            to this ResultRequest
        fetch:
          type: string
          enum:
          - NONE
          - CHANGES
          - ALL
        type:
          type: string
      required:
      - componentId
      - type
    ComponentSelectionHandler:
      type: object
      properties:
        componentId:
          type: string
        enabled:
          type: boolean
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        id:
          type: string
    ComponentSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    ConditionalFormattingRule:
      type: object
      properties:
        backgroundColor:
          type: string
        customStyle:
          $ref: "#/components/schemas/CustomConditionalFormattingStyle"
        enabled:
          type: boolean
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        formattingStyle:
          type: string
          enum:
          - NONE
          - RED
          - PINK
          - PURPLE
          - DEEP_PURPLE
          - INDIGO
          - BLUE
          - LIGHT_BLUE
          - CYAN
          - TEAL
          - GREEN
          - LIGHT_GREEN
          - LIME
          - YELLOW
          - AMBER
          - ORANGE
          - DEEP_ORANGE
          - BROWN
          - GREY
          - BLUE_GREY
        formattingType:
          type: string
          enum:
          - BACKGROUND
          - TEXT
          - CUSTOM
        hide:
          type: boolean
        id:
          type: string
        textAttributes:
          $ref: "#/components/schemas/TextAttributes"
        textColor:
          type: string
    ConfigProperty:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dataTypeName:
          type: string
        databaseOverrideValue:
          $ref: "#/components/schemas/OverrideValueString"
        defaultValue:
          type: string
        description:
          type: string
        editable:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          $ref: "#/components/schemas/PropertyPath"
        password:
          type: boolean
        requireRestart:
          type: boolean
        requireUiRestart:
          type: boolean
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
        yamlOverrideValue:
          $ref: "#/components/schemas/OverrideValueString"
    ConfirmPasswordRequest:
      type: object
      properties:
        password:
          type: string
    ConfirmPasswordResponse:
      type: object
      properties:
        message:
          type: string
        valid:
          type: boolean
    ContentTemplate:
      type: object
      properties:
        copyElementDependencies:
          type: boolean
        description:
          type: string
        enabled:
          type: boolean
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        name:
          type: string
        pipeline:
          $ref: "#/components/schemas/DocRef"
        processorMaxConcurrent:
          type: integer
          format: int32
        processorPriority:
          type: integer
          format: int32
        templateNumber:
          type: integer
          format: int32
        templateType:
          type: string
          enum:
          - PROCESSOR_FILTER
          - INHERIT_PIPELINE
    ContentTemplates:
      type: object
      properties:
        contentTemplates:
          type: array
          items:
            $ref: "#/components/schemas/ContentTemplate"
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    CoprocessorSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        coprocessorId:
          type: integer
          format: int32
        type:
          type: string
      required:
      - type
    CountLong:
      type: object
      properties:
        count:
          type: integer
          format: int64
        exact:
          type: boolean
    CreateAccountRequest:
      type: object
      properties:
        comments:
          type: string
        confirmPassword:
          type: string
        email:
          type: string
        firstName:
          type: string
        forcePasswordChange:
          type: boolean
        lastName:
          type: string
        neverExpires:
          type: boolean
        password:
          type: string
        userId:
          type: string
    CreateAnnotationRequest:
      type: object
      properties:
        assignTo:
          $ref: "#/components/schemas/UserRef"
        comment:
          type: string
        linkedAnnotations:
          type: array
          items:
            type: integer
            format: int64
        linkedEvents:
          type: array
          items:
            $ref: "#/components/schemas/EventId"
        status:
          type: string
        subject:
          type: string
        table:
          $ref: "#/components/schemas/AnnotationTable"
        title:
          type: string
    CreateAnnotationTagRequest:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
          - STATUS
          - LABEL
          - COLLECTION
    CreateApiKeyRequest:
      type: object
      properties:
        comments:
          type: string
        enabled:
          type: boolean
        expiresOnMs:
          type: integer
          format: int64
        tokenType:
          type: string
          pattern: ^user$|^api$|^email_reset$
        userId:
          type: string
      required:
      - tokenType
      - userId
    CreateHashedApiKeyRequest:
      type: object
      properties:
        comments:
          type: string
        enabled:
          type: boolean
        expireTimeMs:
          type: integer
          format: int64
        hashAlgorithm:
          type: string
          enum:
          - SHA3_256
          - SHA2_256
          - BCRYPT
          - ARGON_2
          - SHA2_512
        name:
          type: string
        owner:
          $ref: "#/components/schemas/UserRef"
    CreateHashedApiKeyResponse:
      type: object
      properties:
        apiKey:
          type: string
        hashedApiKey:
          $ref: "#/components/schemas/HashedApiKey"
    CreateProcessFilterRequest:
      type: object
      properties:
        autoPriority:
          type: boolean
        enabled:
          type: boolean
        maxMetaCreateTimeMs:
          type: integer
          format: int64
        maxProcessingTasks:
          type: integer
          format: int32
        minMetaCreateTimeMs:
          type: integer
          format: int64
        pipeline:
          $ref: "#/components/schemas/DocRef"
        priority:
          type: integer
          format: int32
        processorType:
          type: string
          enum:
          - PIPELINE
          - STREAMING_ANALYTIC
        queryData:
          $ref: "#/components/schemas/QueryData"
        reprocess:
          type: boolean
        runAsUser:
          $ref: "#/components/schemas/UserRef"
    CriteriaFieldSort:
      type: object
      properties:
        desc:
          type: boolean
        id:
          type: string
        ignoreCase:
          type: boolean
    CustomConditionalFormattingStyle:
      type: object
      properties:
        dark:
          $ref: "#/components/schemas/CustomRowStyle"
        light:
          $ref: "#/components/schemas/CustomRowStyle"
    CustomRollUpMask:
      type: object
      properties:
        rolledUpTagPosition:
          type: array
          items:
            type: integer
            format: int32
    CustomRollUpMaskFields:
      type: object
      properties:
        id:
          type: integer
          format: int32
        maskValue:
          type: integer
          format: int32
        rolledUpFieldPositions:
          type: array
          items:
            type: integer
            format: int32
          uniqueItems: true
    CustomRowStyle:
      type: object
      properties:
        backgroundColour:
          type: string
        textColour:
          type: string
    DBTableStatus:
      type: object
      properties:
        count:
          type: integer
          format: int64
        dataSize:
          type: integer
          format: int64
        db:
          type: string
        indexSize:
          type: integer
          format: int64
        table:
          type: string
    DashboardConfig:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: "#/components/schemas/ComponentConfig"
        designMode:
          type: boolean
        layout:
          $ref: "#/components/schemas/LayoutConfig"
        layoutConstraints:
          $ref: "#/components/schemas/LayoutConstraints"
        modelVersion:
          type: string
        parameters:
          type: string
        preferredSize:
          $ref: "#/components/schemas/Size"
        timeRange:
          $ref: "#/components/schemas/TimeRange"
    DashboardDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dashboardConfig:
          $ref: "#/components/schemas/DashboardConfig"
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    DashboardSearchRequest:
      type: object
      properties:
        componentResultRequests:
          type: array
          items:
            $ref: "#/components/schemas/ComponentResultRequest"
        dateTimeSettings:
          $ref: "#/components/schemas/DateTimeSettings"
        queryKey:
          $ref: "#/components/schemas/QueryKey"
        search:
          $ref: "#/components/schemas/Search"
        searchRequestSource:
          $ref: "#/components/schemas/SearchRequestSource"
        storeHistory:
          type: boolean
        timeout:
          type: integer
          format: int64
          description: "Set the maximum time (in ms) for the server to wait for a\
            \ complete result set. The timeout applies to both incremental and non\
            \ incremental queries, though the behaviour is slightly different. The\
            \ timeout will make the server wait for which ever comes first out of\
            \ the query completing or the timeout period being reached. If no value\
            \ is supplied then for an incremental query a default value of 0 will\
            \ be used (i.e. returning immediately) and for a non-incremental query\
            \ the server's default timeout period will be used. For an incremental\
            \ query, if the query has not completed by the end of the timeout period,\
            \ it will return the currently know results with complete=false, however\
            \ for a non-incremental query it will return no results, complete=false\
            \ and details of the timeout in the error field"
    DashboardSearchResponse:
      type: object
      properties:
        complete:
          type: boolean
        errors:
          type: array
          items:
            type: string
        highlights:
          type: array
          items:
            type: string
          uniqueItems: true
        node:
          type: string
        queryKey:
          $ref: "#/components/schemas/QueryKey"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Result"
        tokenError:
          $ref: "#/components/schemas/TokenError"
    DataInfoSection:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: "#/components/schemas/Entry"
        title:
          type: string
    DataRange:
      type: object
      properties:
        byteOffsetFrom:
          type: integer
          format: int64
        byteOffsetTo:
          type: integer
          format: int64
        charOffsetFrom:
          type: integer
          format: int64
        charOffsetTo:
          type: integer
          format: int64
        length:
          type: integer
          format: int64
        locationFrom:
          $ref: "#/components/schemas/Location"
        locationTo:
          $ref: "#/components/schemas/Location"
    DataRetentionDeleteSummary:
      type: object
      properties:
        count:
          type: integer
          format: int32
        feed:
          type: string
        ruleName:
          type: string
        ruleNumber:
          type: integer
          format: int32
        type:
          type: string
    DataRetentionDeleteSummaryRequest:
      type: object
      properties:
        criteria:
          $ref: "#/components/schemas/FindDataRetentionImpactCriteria"
        dataRetentionRules:
          $ref: "#/components/schemas/DataRetentionRules"
        queryId:
          type: string
    DataRetentionDeleteSummaryResponse:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        queryId:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/DataRetentionDeleteSummary"
    DataRetentionRule:
      type: object
      properties:
        age:
          type: integer
          format: int32
        creationTime:
          type: integer
          format: int64
        enabled:
          type: boolean
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        forever:
          type: boolean
        name:
          type: string
        ruleNumber:
          type: integer
          format: int32
        timeUnit:
          type: string
          enum:
          - NANOSECONDS
          - MILLISECONDS
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
    DataRetentionRules:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        name:
          type: string
        rules:
          type: array
          items:
            $ref: "#/components/schemas/DataRetentionRule"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    DateTimeFormatSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/FormatSettings"
      - type: object
        properties:
          pattern:
            type: string
            description: A date time formatting pattern string conforming to the specification
              of java.time.format.DateTimeFormatter
          timeZone:
            $ref: "#/components/schemas/UserTimeZone"
          usePreferences:
            type: boolean
            description: Choose if you want to use the user preference to determine
              the date/time format
      description: The string formatting to apply to a date value
      required:
      - pattern
      - timeZone
      - usePreferences
    DateTimeSettings:
      type: object
      description: The client date/time settings
      properties:
        dateTimePattern:
          type: string
          description: A date time formatting pattern string conforming to the specification
            of java.time.format.DateTimeFormatter
        localZoneId:
          type: string
          description: The local zone id to use when formatting date values in the
            search results. The value is the string form of a java.time.ZoneId
        referenceTime:
          type: integer
          format: int64
          description: The time in milliseconds since epoch to use as the reference
            time for relative date functions like `day()`. Typically this is the current
            time when the query is executed. If null the current time will be assumed.
        timeZone:
          $ref: "#/components/schemas/UserTimeZone"
      required:
      - localZoneId
      - referenceTime
    DecorateRequest:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        requiredPermissions:
          type: array
          items:
            type: string
            enum:
            - OWNER
            - DELETE
            - EDIT
            - VIEW
            - USE
          uniqueItems: true
    DefaultLocation:
      type: object
      properties:
        colNo:
          type: integer
          format: int32
        lineNo:
          type: integer
          format: int32
    DeleteAnnotationEntryRequest:
      type: object
      properties:
        annotationEntryId:
          type: integer
          format: int64
        annotationRef:
          $ref: "#/components/schemas/DocRef"
    DeleteDuplicateCheckRequest:
      type: object
      properties:
        analyticDocUuid:
          type: string
        rows:
          type: array
          items:
            $ref: "#/components/schemas/DuplicateCheckRow"
    DeleteField:
      type: object
      properties:
        fieldName:
          type: string
        indexDocRef:
          $ref: "#/components/schemas/DocRef"
    Dependency:
      type: object
      properties:
        from:
          $ref: "#/components/schemas/DocRef"
        ok:
          type: boolean
        to:
          $ref: "#/components/schemas/DocRef"
    DependencyCriteria:
      type: object
      properties:
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        partialName:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    DestroyStoreRequest:
      type: object
      properties:
        destroyReason:
          type: string
          enum:
          - MANUAL
          - NO_LONGER_NEEDED
          - TAB_CLOSE
          - WINDOW_CLOSE
        queryKey:
          $ref: "#/components/schemas/QueryKey"
    DictionaryDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        imports:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    DocContentHighlights:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        highlights:
          type: array
          items:
            $ref: "#/components/schemas/StringMatchLocation"
        text:
          type: string
    DocContentMatch:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        extension:
          type: string
        location:
          $ref: "#/components/schemas/StringMatchLocation"
        sample:
          type: string
        sampleAtStartOfLine:
          type: boolean
    DocRef:
      type: object
      description: A class for describing a unique reference to a 'document' in stroom.  A
        'document' is an entity in stroom such as a data source dictionary or pipeline.
      properties:
        name:
          type: string
          description: The name for the data source
          example: MyStatistic
        type:
          type: string
          description: The type of the 'document' that this DocRef refers to
          example: StroomStatsStore
        uuid:
          type: string
          description: The unique identifier for this 'document'
          example: 9f6184b4-bd78-48bc-b0cd-6e51a357f6a6
      required:
      - uuid
    DocRefInfo:
      type: object
      properties:
        createTime:
          type: integer
          format: int64
        createUser:
          type: string
        docRef:
          $ref: "#/components/schemas/DocRef"
        otherInfo:
          type: string
        updateTime:
          type: integer
          format: int64
        updateUser:
          type: string
    DocRefs:
      type: object
      properties:
        docRefs:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
          uniqueItems: true
    DocumentFindRequest:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/ExplorerTreeFilter"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    DocumentType:
      type: object
      properties:
        displayType:
          type: string
        group:
          type: string
          enum:
          - STRUCTURE
          - DATA_PROCESSING
          - TRANSFORMATION
          - SEARCH
          - INDEXING
          - CONFIGURATION
          - SYSTEM
          - INTERNAL
        icon:
          type: string
          enum:
          - ADD
          - ADD_ABOVE
          - ADD_BELOW
          - ADD_MULTIPLE
          - ALERT
          - ALERT_SIMPLE
          - ARROW_DOWN
          - ARROW_LEFT
          - ARROW_RIGHT
          - ARROW_UP
          - AUTO_REFRESH
          - BACKWARD
          - BORDERED_CIRCLE
          - CALENDAR
          - CANCEL
          - CASE_SENSITIVE
          - CLEAR
          - CLIPBOARD
          - CLOSE
          - CODE
          - COLLAPSE_ALL
          - COLLAPSE_UP
          - COPY
          - DATABASE
          - DELETE
          - DEPENDENCIES
          - DISABLE
          - DOCUMENT_ANALYTIC_OUTPUT_STORE
          - DOCUMENT_ANALYTIC_RULE
          - DOCUMENT_ANNOTATIONS_INDEX
          - DOCUMENT_DASHBOARD
          - DOCUMENT_DICTIONARY
          - DOCUMENT_DOCUMENTATION
          - DOCUMENT_ELASTIC_CLUSTER
          - DOCUMENT_ELASTIC_INDEX
          - DOCUMENT_FAVOURITES
          - DOCUMENT_FEED
          - DOCUMENT_FOLDER
          - DOCUMENT_GIT_REPO
          - DOCUMENT_INDEX
          - DOCUMENT_KAFKA_CONFIG
          - DOCUMENT_PIPELINE
          - DOCUMENT_PLAN_B
          - DOCUMENT_QUERY
          - DOCUMENT_RECEIVE_DATA_RULE_SET
          - DOCUMENT_REPORT
          - DOCUMENT_S3
          - DOCUMENT_SCRIPT
          - DOCUMENT_SCYLLA_DB
          - DOCUMENT_SEARCHABLE
          - DOCUMENT_SELECT_ALL_OR_NONE
          - DOCUMENT_SIGMA_RULE
          - DOCUMENT_SOLR_INDEX
          - DOCUMENT_STATE_STORE
          - DOCUMENT_STATISTIC_STORE
          - DOCUMENT_STROOM_STATS_STORE
          - DOCUMENT_SYSTEM
          - DOCUMENT_TEXT_CONVERTER
          - DOCUMENT_VIEW
          - DOCUMENT_VISUALISATION
          - DOCUMENT_XMLSCHEMA
          - DOCUMENT_XSLT
          - DOT
          - DOUBLE_ARROW
          - DOWN
          - DOWNLOAD
          - DROP_DOWN
          - EDIT
          - ELLIPSES_HORIZONTAL
          - ELLIPSES_VERTICAL
          - ERROR
          - EXCLAMATION
          - EXPAND_ALL
          - EXPAND_DOWN
          - EXPLORER
          - EYE
          - EYE_OFF
          - FAST_BACKWARD
          - FAST_FORWARD
          - FATAL
          - FATAL_DARK
          - FAVOURITES
          - FAVOURITES_OUTLINE
          - FEED
          - FIELD
          - FIELDS_EXPRESSION
          - FIELDS_FILTER
          - FIELDS_FORMAT
          - FIELDS_GROUP
          - FIELDS_SORT_ASCENDING
          - FIELDS_SORT_DESCENDING
          - FIELDS_SORT_NONE
          - FILE
          - FILE_FORMATTED
          - FILE_RAW
          - FILTER
          - FIND
          - FOLDER
          - FOLDER_TREE
          - FORMAT
          - FORWARD
          - FUNCTION
          - GENERATE
          - HELP
          - HELP_OUTLINE
          - HIDE
          - HIDE_MENU
          - HISTORY
          - INFINITY_LOGO
          - INFO
          - INSERT
          - JOBS
          - KEY
          - LINK
          - LOCATE
          - LOCKED
          - LOGO
          - LOGOUT
          - MAXIMISE
          - MENU
          - MINIMISE
          - MONITORING
          - MOVE
          - NODES
          - OK
          - OO
          - OPEN
          - OPERATOR
          - PASSWORD
          - PAUSE
          - PEN
          - PIPELINE_ELASTIC_INDEX
          - PIPELINE_FILE
          - PIPELINE_FILES
          - PIPELINE_HADOOP
          - PIPELINE_ID
          - PIPELINE_INDEX
          - PIPELINE_JSON
          - PIPELINE_KAFKA
          - PIPELINE_MERGE
          - PIPELINE_RECORD_COUNT
          - PIPELINE_RECORD_OUTPUT
          - PIPELINE_REFERENCE_DATA
          - PIPELINE_SEARCH_OUTPUT
          - PIPELINE_SOLR
          - PIPELINE_SPLIT
          - PIPELINE_STATISTICS
          - PIPELINE_STREAM
          - PIPELINE_STROOM_STATS
          - PIPELINE_STROOM_STATS_STORE
          - PIPELINE_TEXT
          - PIPELINE_XML
          - PIPELINE_XML_SEARCH
          - PIPELINE_XSD
          - PIPELINE_XSLT
          - PLAY
          - PROCESS
          - PROPERTIES
          - QUESTION
          - RAW
          - REFRESH
          - REGEX
          - REMOVE
          - RESIZE
          - RESIZE_HANDLE
          - SAVE
          - SAVEAS
          - SEARCH
          - SELECTION
          - SETTINGS
          - SHARD_CLOSE
          - SHARD_FLUSH
          - SHARE
          - SHIELD
          - SHOW
          - SHOW_MENU
          - SPINNER_CIRCLE
          - SPINNER_PAUSE
          - SPINNER_SPINNING
          - STAMP
          - STEP
          - STEPPING
          - STEPPING_CIRCLE
          - STEP_BACKWARD
          - STEP_FORWARD
          - STOP
          - TABLE
          - TABLE_NESTED
          - TAB_CLOSE
          - TAGS
          - TEXT_WRAP
          - TICK
          - UNDO
          - UNLINK
          - UNLOCK
          - UP
          - UPLOAD
          - USER
          - USERS
          - VALUE_FILTER
          - VOLUMES
          - WARNING
        type:
          type: string
    DocumentTypes:
      type: object
      properties:
        types:
          type: array
          items:
            $ref: "#/components/schemas/DocumentType"
        visibleTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentType"
    DocumentUserPermissions:
      type: object
      properties:
        documentCreatePermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        inheritedDocumentCreatePermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        inheritedPermission:
          type: string
          enum:
          - OWNER
          - DELETE
          - EDIT
          - VIEW
          - USE
        permission:
          type: string
          enum:
          - OWNER
          - DELETE
          - EDIT
          - VIEW
          - USE
        userRef:
          $ref: "#/components/schemas/UserRef"
    DocumentUserPermissionsReport:
      type: object
      properties:
        explicitCreatePermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        explicitPermission:
          type: string
          enum:
          - OWNER
          - DELETE
          - EDIT
          - VIEW
          - USE
        inheritedCreatePermissionPaths:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        inheritedPermissionPaths:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    DocumentUserPermissionsRequest:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        userRef:
          $ref: "#/components/schemas/UserRef"
    Documentation:
      type: object
      properties:
        markdown:
          type: string
    DocumentationDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        documentation:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    DownloadQueryResultsRequest:
      type: object
      properties:
        fileType:
          type: string
          enum:
          - EXCEL
          - CSV
          - TSV
        percent:
          type: integer
          format: int32
        sample:
          type: boolean
        searchRequest:
          $ref: "#/components/schemas/QuerySearchRequest"
    DownloadSearchResultsRequest:
      type: object
      properties:
        componentId:
          type: string
        downloadAllTables:
          type: boolean
        fileType:
          type: string
          enum:
          - EXCEL
          - CSV
          - TSV
        percent:
          type: integer
          format: int32
        sample:
          type: boolean
        searchRequest:
          $ref: "#/components/schemas/DashboardSearchRequest"
    DuplicateCheckRow:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
    DuplicateCheckRows:
      type: object
      properties:
        columnNames:
          type: array
          items:
            type: string
        resultPage:
          $ref: "#/components/schemas/ResultPageDuplicateCheckRow"
    DuplicateNotificationConfig:
      type: object
      properties:
        chooseColumns:
          type: boolean
        columnNames:
          type: array
          items:
            type: string
        rememberNotifications:
          type: boolean
        suppressDuplicateNotifications:
          type: boolean
    DurationSetting:
      type: object
      properties:
        duration:
          $ref: "#/components/schemas/SimpleDuration"
        enabled:
          type: boolean
    ElasticClusterDoc:
      type: object
      properties:
        connection:
          $ref: "#/components/schemas/ElasticConnectionConfig"
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    ElasticClusterTestResponse:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
    ElasticConnectionConfig:
      type: object
      properties:
        apiKeyId:
          type: string
        apiKeySecret:
          type: string
        caCertificate:
          type: string
        connectionUrls:
          type: array
          items:
            type: string
        socketTimeoutMillis:
          type: integer
          format: int32
        useAuthentication:
          type: boolean
    ElasticIndexDoc:
      type: object
      properties:
        clusterRef:
          $ref: "#/components/schemas/DocRef"
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        defaultExtractionPipeline:
          $ref: "#/components/schemas/DocRef"
        description:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ElasticIndexField"
        indexName:
          type: string
        name:
          type: string
        retentionExpression:
          $ref: "#/components/schemas/ExpressionOperator"
        searchScrollSize:
          type: integer
          format: int32
        searchSlices:
          type: integer
          format: int32
        timeField:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    ElasticIndexField:
      type: object
      properties:
        fieldName:
          type: string
        fieldType:
          type: string
        fieldUse:
          type: string
          enum:
          - ID
          - BOOLEAN
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - DATE
          - TEXT
          - KEYWORD
          - IPV4_ADDRESS
          - DOC_REF
          - USER_REF
        fldName:
          type: string
        fldType:
          type: string
          enum:
          - ID
          - BOOLEAN
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - DATE
          - TEXT
          - KEYWORD
          - IPV4_ADDRESS
          - DOC_REF
          - USER_REF
        indexed:
          type: boolean
        nativeType:
          type: string
    ElasticIndexTestResponse:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
    ElementId:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    EmbeddedQueryComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          automate:
            $ref: "#/components/schemas/Automate"
          embeddedQueryDoc:
            $ref: "#/components/schemas/QueryDoc"
          lastQueryKey:
            $ref: "#/components/schemas/QueryKey"
          lastQueryNode:
            type: string
          queryRef:
            $ref: "#/components/schemas/DocRef"
          queryTablePreferences:
            $ref: "#/components/schemas/QueryTablePreferences"
          reference:
            type: boolean
          selectionFilter:
            type: array
            items:
              $ref: "#/components/schemas/ComponentSelectionHandler"
          selectionHandlers:
            type: array
            items:
              $ref: "#/components/schemas/ComponentSelectionHandler"
          showTable:
            type: boolean
    EmptyAppPermissionSet:
      type: object
      allOf:
      - $ref: "#/components/schemas/AppPermissionSet"
      - type: object
        properties:
          operator:
            type: string
            enum:
            - ALL_OF
            - ONE_OF
            - SINGLE
            - EMPTY
    EntityEvent:
      type: object
      properties:
        action:
          type: string
          enum:
          - CREATE
          - POST_CREATE
          - UPDATE
          - PRE_DELETE
          - DELETE
          - CLEAR_CACHE
          - CREATE_EXPLORER_NODE
          - UPDATE_EXPLORER_NODE
          - DELETE_EXPLORER_NODE
        docRef:
          $ref: "#/components/schemas/DocRef"
        oldDocRef:
          $ref: "#/components/schemas/DocRef"
    Entry:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    EntryCounts:
      type: object
      properties:
        keyValueCount:
          type: integer
          format: int64
        rangeValueCount:
          type: integer
          format: int64
    EntryValue:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    EventCoprocessorSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/CoprocessorSettings"
      - type: object
        properties:
          maxEvent:
            $ref: "#/components/schemas/EventRef"
          maxEvents:
            type: integer
            format: int64
          maxEventsPerStream:
            type: integer
            format: int64
          maxStreams:
            type: integer
            format: int64
          minEvent:
            $ref: "#/components/schemas/EventRef"
    EventId:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        streamId:
          type: integer
          format: int64
    EventRef:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        streamId:
          type: integer
          format: int64
    ExecutionHistory:
      type: object
      properties:
        effectiveExecutionTimeMs:
          type: integer
          format: int64
        executionSchedule:
          $ref: "#/components/schemas/ExecutionSchedule"
        executionTimeMs:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        message:
          type: string
        status:
          type: string
    ExecutionHistoryRequest:
      type: object
      properties:
        executionSchedule:
          $ref: "#/components/schemas/ExecutionSchedule"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    ExecutionSchedule:
      type: object
      properties:
        contiguous:
          type: boolean
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        nodeName:
          type: string
        owningDoc:
          $ref: "#/components/schemas/DocRef"
        runAsUser:
          $ref: "#/components/schemas/UserRef"
        schedule:
          $ref: "#/components/schemas/Schedule"
        scheduleBounds:
          $ref: "#/components/schemas/ScheduleBounds"
    ExecutionScheduleRequest:
      type: object
      properties:
        enabled:
          type: boolean
        nodeName:
          type: string
        ownerDocRef:
          $ref: "#/components/schemas/DocRef"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    ExecutionTracker:
      type: object
      properties:
        actualExecutionTimeMs:
          type: integer
          format: int64
        lastEffectiveExecutionTimeMs:
          type: integer
          format: int64
        nextEffectiveExecutionTimeMs:
          type: integer
          format: int64
    Expander:
      type: object
      properties:
        depth:
          type: integer
          format: int32
        expanded:
          type: boolean
        leaf:
          type: boolean
    ExplorerNode:
      type: object
      properties:
        children:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNode"
        depth:
          type: integer
          format: int32
        name:
          type: string
        nodeFlags:
          type: array
          items:
            type: string
            enum:
            - C
            - D
            - I
            - V
            - FM
            - FN
            - F
            - L
            - O
          uniqueItems: true
        nodeInfoList:
          type: array
          items:
            $ref: "#/components/schemas/NodeInfo"
        rootNodeUuid:
          type: string
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
        type:
          type: string
        uniqueKey:
          $ref: "#/components/schemas/ExplorerNodeKey"
        uuid:
          type: string
    ExplorerNodeInfo:
      type: object
      properties:
        docRefInfo:
          $ref: "#/components/schemas/DocRefInfo"
        explorerNode:
          $ref: "#/components/schemas/ExplorerNode"
    ExplorerNodeKey:
      type: object
      properties:
        rootNodeUuid:
          type: string
        type:
          type: string
        uuid:
          type: string
    ExplorerNodePermissions:
      type: object
      properties:
        admin:
          type: boolean
        createPermissions:
          type: array
          items:
            type: string
          uniqueItems: true
        documentPermissions:
          type: array
          items:
            type: string
            enum:
            - OWNER
            - DELETE
            - EDIT
            - VIEW
            - USE
          uniqueItems: true
        explorerNode:
          $ref: "#/components/schemas/ExplorerNode"
    ExplorerServiceCopyRequest:
      type: object
      properties:
        allowRename:
          type: boolean
        destinationFolder:
          $ref: "#/components/schemas/ExplorerNode"
        docName:
          type: string
        explorerNodes:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNode"
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    ExplorerServiceCreateRequest:
      type: object
      properties:
        destinationFolder:
          $ref: "#/components/schemas/ExplorerNode"
        docName:
          type: string
        docType:
          type: string
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    ExplorerServiceDeleteRequest:
      type: object
      properties:
        docRefs:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
    ExplorerServiceMoveRequest:
      type: object
      properties:
        destinationFolder:
          $ref: "#/components/schemas/ExplorerNode"
        explorerNodes:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNode"
        permissionInheritance:
          type: string
          enum:
          - NONE
          - SOURCE
          - DESTINATION
          - COMBINED
    ExplorerServiceRenameRequest:
      type: object
      properties:
        docName:
          type: string
        explorerNode:
          $ref: "#/components/schemas/ExplorerNode"
    ExplorerTreeFilter:
      type: object
      properties:
        includedRootTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        includedTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        nameFilter:
          type: string
        nameFilterChange:
          type: boolean
        nodeFlags:
          type: array
          items:
            type: string
            enum:
            - C
            - D
            - I
            - V
            - FM
            - FN
            - F
            - L
            - O
          uniqueItems: true
        recentItems:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
        requiredPermissions:
          type: array
          items:
            type: string
            enum:
            - OWNER
            - DELETE
            - EDIT
            - VIEW
            - USE
          uniqueItems: true
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
    ExpressionCriteria:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    ExpressionItem:
      type: object
      description: Base type for an item in an expression tree
      discriminator:
        propertyName: type
      properties:
        enabled:
          type: boolean
          description: Whether this item in the expression tree is enabled or not
          example: true
        type:
          type: string
      required:
      - type
    ExpressionOperator:
      type: object
      description: A logical addOperator term in a query expression tree
      properties:
        children:
          type: array
          items:
            $ref: "#/components/schemas/ExpressionItem"
        enabled:
          type: boolean
          description: Whether this item in the expression tree is enabled or not
          example: true
        op:
          type: string
          description: The logical addOperator type
          enum:
          - AND
          - OR
          - NOT
    ExpressionTerm:
      type: object
      allOf:
      - $ref: "#/components/schemas/ExpressionItem"
      - type: object
        properties:
          condition:
            type: string
            description: The condition of the predicate term
            enum:
            - CONTAINS
            - EQUALS
            - STARTS_WITH
            - ENDS_WITH
            - NOT_EQUALS
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL_TO
            - LESS_THAN
            - LESS_THAN_OR_EQUAL_TO
            - BETWEEN
            - IN
            - IN_DICTIONARY
            - IN_FOLDER
            - IS_DOC_REF
            - IS_USER_REF
            - IS_NULL
            - IS_NOT_NULL
            - MATCHES_REGEX
            - WORD_BOUNDARY
            - CONTAINS_CASE_SENSITIVE
            - EQUALS_CASE_SENSITIVE
            - NOT_EQUALS_CASE_SENSITIVE
            - STARTS_WITH_CASE_SENSITIVE
            - ENDS_WITH_CASE_SENSITIVE
            - MATCHES_REGEX_CASE_SENSITIVE
            - OF_DOC_REF
            - USER_HAS_PERM
            - USER_HAS_OWNER
            - USER_HAS_DELETE
            - USER_HAS_EDIT
            - USER_HAS_VIEW
            - USER_HAS_USE
          docRef:
            $ref: "#/components/schemas/DocRef"
          field:
            type: string
            description: The name of the field that is being evaluated in this predicate
              term
          value:
            type: string
            description: The value that the field value is being evaluated against.
              Not required if a dictionary is supplied
      description: A predicate term in a query expression tree
    ExtendedUiConfig:
      type: object
      properties:
        dependencyWarningsEnabled:
          type: boolean
        externalIdentityProvider:
          type: boolean
        lastAnnotationChangeTime:
          type: integer
          format: int64
        maxApiKeyExpiryAgeMs:
          type: integer
          format: int64
        obfuscatedFields:
          type: array
          items:
            type: string
          uniqueItems: true
        receiptCheckMode:
          type: string
          enum:
          - FEED_STATUS
          - RECEIPT_POLICY
          - RECEIVE_ALL
          - DROP_ALL
          - REJECT_ALL
        uiConfig:
          $ref: "#/components/schemas/UiConfig"
    FeedDoc:
      type: object
      properties:
        classification:
          type: string
        contextEncoding:
          type: string
        contextFormat:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dataFormat:
          type: string
        description:
          type: string
        encoding:
          type: string
        name:
          type: string
        reference:
          type: boolean
        retentionDayAge:
          type: integer
          format: int32
        schema:
          type: string
        schemaVersion:
          type: string
        status:
          type: string
          enum:
          - RECEIVE
          - REJECT
          - DROP
        streamType:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
        volumeGroup:
          type: string
    FetchAnnotationEntryRequest:
      type: object
      properties:
        annotationEntryId:
          type: integer
          format: int64
        annotationRef:
          $ref: "#/components/schemas/DocRef"
    FetchAppUserPermissionsRequest:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        showLevel:
          type: string
          enum:
          - SHOW_EXPLICIT
          - SHOW_EFFECTIVE
          - SHOW_ALL
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
        userRef:
          $ref: "#/components/schemas/UserRef"
    FetchDataRequest:
      type: object
      properties:
        displayMode:
          type: string
          enum:
          - TEXT
          - HEX
          - MARKER
        expandedSeverities:
          type: array
          items:
            type: string
            enum:
            - INFO
            - WARN
            - ERROR
            - FATAL
        pipeline:
          $ref: "#/components/schemas/DocRef"
        recordCount:
          type: integer
          format: int64
        showAsHtml:
          type: boolean
        sourceLocation:
          $ref: "#/components/schemas/SourceLocation"
    FetchDataResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFetchDataResult"
      - type: object
        properties:
          data:
            type: string
          dataType:
            type: string
            enum:
            - SEGMENTED
            - NON_SEGMENTED
            - MARKER
          html:
            type: boolean
          totalBytes:
            type: integer
            format: int64
    FetchDocumentUserPermissionsRequest:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        showLevel:
          type: string
          enum:
          - SHOW_EXPLICIT
          - SHOW_EFFECTIVE
          - SHOW_ALL
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
        userRef:
          $ref: "#/components/schemas/UserRef"
    FetchExplorerNodeResult:
      type: object
      properties:
        openedItems:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNodeKey"
        qualifiedFilterInput:
          type: string
        rootNodes:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNode"
        temporaryOpenedItems:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNodeKey"
          uniqueItems: true
    FetchExplorerNodesRequest:
      type: object
      properties:
        ensureVisible:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNodeKey"
          uniqueItems: true
        filter:
          $ref: "#/components/schemas/ExplorerTreeFilter"
        minDepth:
          type: integer
          format: int32
        openItems:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNodeKey"
          uniqueItems: true
        showAlerts:
          type: boolean
        temporaryOpenedItems:
          type: array
          items:
            $ref: "#/components/schemas/ExplorerNodeKey"
          uniqueItems: true
    FetchHighlightsRequest:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        extension:
          type: string
        filter:
          $ref: "#/components/schemas/StringMatch"
    FetchLinkedScriptRequest:
      type: object
      properties:
        loadedScripts:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
          uniqueItems: true
        script:
          $ref: "#/components/schemas/DocRef"
    FetchMarkerResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFetchDataResult"
      - type: object
        properties:
          markers:
            type: array
            items:
              $ref: "#/components/schemas/Marker"
    FetchNodeStatusResponse:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/NodeStatusResult"
    FetchPipelineJsonResponse:
      type: object
      properties:
        json:
          type: string
        pipeline:
          $ref: "#/components/schemas/DocRef"
    FetchProcessorRequest:
      type: object
      properties:
        expandedRows:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorListRow"
          uniqueItems: true
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
    FetchPropertyTypesResult:
      type: object
      properties:
        pipelineElementType:
          $ref: "#/components/schemas/PipelineElementType"
        propertyTypes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PipelinePropertyType"
    FetchSuggestionsRequest:
      type: object
      properties:
        dataSource:
          $ref: "#/components/schemas/DocRef"
        field:
          $ref: "#/components/schemas/QueryField"
        text:
          type: string
      required:
      - dataSource
      - field
    FilterFieldDefinition:
      type: object
      properties:
        defaultField:
          type: boolean
        displayName:
          type: string
        filterQualifier:
          type: string
    FindAccountRequest:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindAnalyticDataShardCriteria:
      type: object
      properties:
        analyticDocUuid:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        quickFilterInput:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindAnnotationRequest:
      type: object
      properties:
        destinationId:
          type: integer
          format: int64
        filter:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        requiredPermission:
          type: string
          enum:
          - OWNER
          - DELETE
          - EDIT
          - VIEW
          - USE
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
        sourceId:
          type: integer
          format: int64
    FindApiKeyCriteria:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        owner:
          $ref: "#/components/schemas/UserRef"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindDBTableCriteria:
      type: object
      properties:
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindDataRetentionImpactCriteria:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindDuplicateCheckCriteria:
      type: object
      properties:
        analyticDocUuid:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        quickFilterInput:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindElementDocRequest:
      type: object
      properties:
        feedName:
          type: string
        pipelineElement:
          $ref: "#/components/schemas/PipelineElement"
        pipelineName:
          type: string
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PipelineProperty"
    FindFieldCriteria:
      type: object
      properties:
        dataSourceRef:
          $ref: "#/components/schemas/DocRef"
        filter:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        queryable:
          type: boolean
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindFsVolumeCriteria:
      type: object
      properties:
        group:
          $ref: "#/components/schemas/FsVolumeGroup"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        selection:
          $ref: "#/components/schemas/SelectionVolumeUseStatus"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindInContentRequest:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/StringMatch"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindInContentResult:
      type: object
      properties:
        docContentMatch:
          $ref: "#/components/schemas/DocContentMatch"
        isFavourite:
          type: boolean
        path:
          type: string
    FindIndexShardCriteria:
      type: object
      properties:
        documentCountRange:
          $ref: "#/components/schemas/RangeInteger"
        indexShardIdSet:
          $ref: "#/components/schemas/SelectionLong"
        indexShardStatusSet:
          $ref: "#/components/schemas/SelectionIndexShardStatus"
        indexUuidSet:
          $ref: "#/components/schemas/SelectionString"
        nodeNameSet:
          $ref: "#/components/schemas/SelectionString"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        partition:
          $ref: "#/components/schemas/StringCriteria"
        partitionTimeRange:
          $ref: "#/components/schemas/RangeLong"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
        volumeIdSet:
          $ref: "#/components/schemas/SelectionInteger"
    FindJobNodeCriteria:
      type: object
      properties:
        jobName:
          $ref: "#/components/schemas/StringCriteria"
        jobNodeEnabled:
          type: boolean
        nodeName:
          $ref: "#/components/schemas/StringCriteria"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindMetaCriteria:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        fetchRelationships:
          type: boolean
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindNodeStatusCriteria:
      type: object
      properties:
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindResult:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        path:
          type: string
    FindResultStoreCriteria:
      type: object
      properties:
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        quickFilterInput:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindResultWithPermissions:
      type: object
      properties:
        findResult:
          $ref: "#/components/schemas/FindResult"
        permissions:
          $ref: "#/components/schemas/DocumentUserPermissions"
    FindStoredQueryCriteria:
      type: object
      properties:
        componentId:
          type: string
        dashboardUuid:
          type: string
        favourite:
          type: boolean
        name:
          $ref: "#/components/schemas/StringCriteria"
        owner:
          $ref: "#/components/schemas/UserRef"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        requiredPermission:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindTaskCriteria:
      type: object
      properties:
        ancestorIdSet:
          type: array
          items:
            $ref: "#/components/schemas/TaskId"
          uniqueItems: true
        idSet:
          type: array
          items:
            $ref: "#/components/schemas/TaskId"
          uniqueItems: true
        sessionId:
          type: string
    FindTaskProgressCriteria:
      type: object
      properties:
        expandedTasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskProgress"
          uniqueItems: true
        nameFilter:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sessionId:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindTaskProgressRequest:
      type: object
      properties:
        criteria:
          $ref: "#/components/schemas/FindTaskProgressCriteria"
    FindUserCriteria:
      type: object
      properties:
        context:
          type: string
          enum:
          - RUN_AS
          - ANNOTATION_ASSIGNMENT
          - PERMISSIONS
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    FindUserDependenciesCriteria:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
        userRef:
          $ref: "#/components/schemas/UserRef"
    FlatResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/Result"
      - type: object
        properties:
          size:
            type: integer
            format: int64
          structure:
            type: array
            items:
              $ref: "#/components/schemas/Column"
          values:
            type: array
            items:
              type: array
              items:
                type: object
      description: A result structure used primarily for visualisation data
      required:
      - componentId
    Format:
      type: object
      description: Describes the formatting that will be applied to values in a field
      properties:
        settings:
          $ref: "#/components/schemas/FormatSettings"
        type:
          type: string
          description: The formatting type to apply
          enum:
          - GENERAL
          - NUMBER
          - DATE_TIME
          - TEXT
          example: NUMBER
        wrap:
          type: boolean
      required:
      - type
    FormatSettings:
      type: object
      discriminator:
        propertyName: type
      properties:
        default:
          type: boolean
        type:
          type: string
      required:
      - type
    FsVolume:
      type: object
      properties:
        byteLimit:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        path:
          type: string
        s3ClientConfig:
          $ref: "#/components/schemas/S3ClientConfig"
        s3ClientConfigData:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - CLOSED
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
        volumeGroupId:
          type: integer
          format: int32
        volumeState:
          $ref: "#/components/schemas/FsVolumeState"
        volumeType:
          type: string
          enum:
          - STANDARD
          - S3
    FsVolumeGroup:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    FsVolumeState:
      type: object
      properties:
        bytesFree:
          type: integer
          format: int64
        bytesTotal:
          type: integer
          format: int64
        bytesUsed:
          type: integer
          format: int64
        id:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
    GetAnalyticShardDataRequest:
      type: object
      properties:
        analyticDocUuid:
          type: string
        dateTimeSettings:
          $ref: "#/components/schemas/DateTimeSettings"
        path:
          type: string
        requestedRange:
          $ref: "#/components/schemas/OffsetRange"
        timeRange:
          $ref: "#/components/schemas/TimeRange"
    GetFeedStatusRequest:
      type: object
      properties:
        feedName:
          type: string
        senderDn:
          type: string
    GetFeedStatusRequestV2:
      type: object
      properties:
        attributeMap:
          type: object
          additionalProperties:
            type: string
        feedName:
          type: string
        userDesc:
          $ref: "#/components/schemas/UserDesc"
    GetFeedStatusResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum:
          - Receive
          - Reject
          - Drop
        stroomStatusCode:
          type: string
          enum:
          - 200 - 0 - OK
          - 406 - 100 - Feed must be specified
          - 406 - 101 - Feed is not defined
          - 406 - 102 - Data type is invalid
          - 406 - 103 - A mandatory header is missing
          - 406 - 104 - Data format is invalid
          - 406 - 110 - Feed is not set to receive data
          - 406 - 111 - Feed is not valid
          - 406 - 112 - Data Feed key and/or accountId is not valid
          - 406 - 113 - Data has been rejected by the receipt policy rules
          - 406 - 120 - Unexpected data type
          - 406 - 200 - Unknown compression
          - 401 - 300 - Client Certificate Required
          - 401 - 301 - Client Token Required
          - 401 - 302 - Client token or certificate required
          - 401 - 303 - Client data feed key required
          - 401 - 304 - Authentication of the client is required
          - 401 - 310 - Client Certificate failed authentication
          - 401 - 311 - Client Token failed authentication
          - 401 - 312 - Client Token or Certificate failed authentication
          - 401 - 313 - Data feed key failed authentication
          - 401 - 314 - Data feed key has expired
          - 500 - 400 - Compressed stream invalid
          - 500 - 999 - Unknown error
    GetPipelineForMetaRequest:
      type: object
      properties:
        childMetaId:
          type: integer
          format: int64
        metaId:
          type: integer
          format: int64
    GetRequest:
      type: object
      properties:
        eventTime:
          type: integer
          format: int64
        keyName:
          type: string
        mapName:
          type: string
    GetScheduledTimesRequest:
      type: object
      properties:
        schedule:
          $ref: "#/components/schemas/Schedule"
        scheduleReferenceTime:
          type: integer
          format: int64
        scheduleRestriction:
          $ref: "#/components/schemas/ScheduleRestriction"
    GetUserRequest:
      type: object
      properties:
        context:
          type: string
          enum:
          - RUN_AS
          - ANNOTATION_ASSIGNMENT
          - PERMISSIONS
        uuid:
          type: string
    GitRepoDoc:
      type: object
      properties:
        autoPush:
          type: boolean
        branch:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        password:
          type: string
        path:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        url:
          type: string
        username:
          type: string
        uuid:
          type: string
        version:
          type: string
    GitRepoPushDto:
      type: object
      properties:
        commitMessage:
          type: string
        gitRepoDoc:
          $ref: "#/components/schemas/GitRepoDoc"
    GitRepoResponse:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
    GlobalConfigCriteria:
      type: object
      properties:
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        quickFilterInput:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    GroupSelection:
      type: object
      description: Contains a set of group keys of parent rows we want to show (or
        not show) children for
      properties:
        closedGroups:
          type: array
          items:
            type: string
          uniqueItems: true
        expandedDepth:
          type: integer
          format: int32
        openGroups:
          type: array
          items:
            type: string
          uniqueItems: true
    HashedApiKey:
      type: object
      properties:
        apiKeyHash:
          type: string
        apiKeyPrefix:
          type: string
        comments:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        enabled:
          type: boolean
        expireTimeMs:
          type: integer
          format: int64
        hashAlgorithm:
          type: string
          enum:
          - SHA3_256
          - SHA2_256
          - BCRYPT
          - ARGON_2
          - SHA2_512
        id:
          type: integer
          format: int32
        name:
          type: string
        owner:
          $ref: "#/components/schemas/UserRef"
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    HashedReceiveDataRules:
      type: object
      properties:
        fieldNameToSaltMap:
          type: object
          additionalProperties:
            type: string
        hashAlgorithm:
          type: string
          enum:
          - SHA3_256
          - SHA2_256
          - BCRYPT
          - ARGON_2
          - SHA2_512
        receiveDataRules:
          $ref: "#/components/schemas/ReceiveDataRules"
        snapshotTimeEpochMs:
          type: integer
          format: int64
        uuidToFlattenedDictMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DictionaryDoc"
    HistogramKeySchema:
      type: object
      properties:
        hashLength:
          type: string
          enum:
          - INTEGER
          - LONG
        keyType:
          type: string
          enum:
          - BOOLEAN
          - BYTE
          - SHORT
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - STRING
          - UID_LOOKUP
          - HASH_LOOKUP
          - VARIABLE
          - TAGS
        temporalResolution:
          type: string
          enum:
          - YEAR
          - MONTH
          - DAY
          - HOUR
          - MINUTE
          - SECOND
        timeZone:
          $ref: "#/components/schemas/UserTimeZone"
    HistogramSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          keySchema:
            $ref: "#/components/schemas/HistogramKeySchema"
          valueSchema:
            $ref: "#/components/schemas/HistogramValueSchema"
    HistogramValueSchema:
      type: object
      properties:
        valueType:
          type: string
          enum:
          - ONE
          - TWO
          - THREE
          - FOUR
          - FIVE
          - SIX
          - SEVEN
          - EIGHT
    HoppingWindow:
      type: object
      allOf:
      - $ref: "#/components/schemas/Window"
      - type: object
        properties:
          advanceSize:
            type: string
          function:
            type: string
          timeField:
            type: string
          windowSize:
            type: string
    ImportConfigRequest:
      type: object
      properties:
        confirmList:
          type: array
          items:
            $ref: "#/components/schemas/ImportState"
        importSettings:
          $ref: "#/components/schemas/ImportSettings"
        resourceKey:
          $ref: "#/components/schemas/ResourceKey"
    ImportConfigResponse:
      type: object
      properties:
        confirmList:
          type: array
          items:
            $ref: "#/components/schemas/ImportState"
        resourceKey:
          $ref: "#/components/schemas/ResourceKey"
    ImportSettings:
      type: object
      properties:
        enableFilters:
          type: boolean
        enableFiltersFromTime:
          type: integer
          format: int64
        importMode:
          type: string
          enum:
          - CREATE_CONFIRMATION
          - ACTION_CONFIRMATION
          - IGNORE_CONFIRMATION
        rootDocRef:
          $ref: "#/components/schemas/DocRef"
        useImportFolders:
          type: boolean
        useImportNames:
          type: boolean
    ImportState:
      type: object
      properties:
        action:
          type: boolean
        destPath:
          type: string
        docRef:
          $ref: "#/components/schemas/DocRef"
        messageList:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        sourcePath:
          type: string
        state:
          type: string
          enum:
          - NEW
          - UPDATE
          - EQUAL
          - IGNORE
        updatedFieldList:
          type: array
          items:
            type: string
    IncludeExcludeFilter:
      type: object
      description: A pair of regular expression filters (inclusion and exclusion)
        to apply to the field.  Either or both can be supplied
      properties:
        excludes:
          type: string
          description: Only results NOT matching this filter will be included
          example: "^[0-9]{3}$"
        includes:
          type: string
          description: Only results matching this filter will be included
          example: "^[0-9]{3}$"
    IndexFieldImpl:
      type: object
      properties:
        analyzerType:
          type: string
          enum:
          - KEYWORD
          - ALPHA
          - NUMERIC
          - ALPHA_NUMERIC
          - WHITESPACE
          - STOP
          - STANDARD
        caseSensitive:
          type: boolean
        fldName:
          type: string
        fldType:
          type: string
          enum:
          - ID
          - BOOLEAN
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - DATE
          - TEXT
          - KEYWORD
          - IPV4_ADDRESS
          - DOC_REF
          - USER_REF
        indexed:
          type: boolean
        stored:
          type: boolean
        termPositions:
          type: boolean
    IndexShard:
      type: object
      properties:
        commitDocumentCount:
          type: integer
          format: int32
        commitDurationMs:
          type: integer
          format: int64
        commitMs:
          type: integer
          format: int64
        documentCount:
          type: integer
          format: int32
        fileSize:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        indexUuid:
          type: string
        indexVersion:
          type: string
        nodeName:
          type: string
        partition:
          type: string
        partitionFromTime:
          type: integer
          format: int64
        partitionToTime:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - CLOSED
          - OPEN
          - CLOSING
          - OPENING
          - NEW
          - DELETED
          - CORRUPT
        volume:
          $ref: "#/components/schemas/IndexVolume"
    IndexVolume:
      type: object
      properties:
        bytesFree:
          type: integer
          format: int64
        bytesLimit:
          type: integer
          format: int64
        bytesTotal:
          type: integer
          format: int64
        bytesUsed:
          type: integer
          format: int64
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        indexVolumeGroupId:
          type: integer
          format: int32
        nodeName:
          type: string
        path:
          type: string
        state:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - CLOSED
        statusMs:
          type: integer
          format: int64
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    IndexVolumeGroup:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    Indicators:
      type: object
      properties:
        errorCount:
          type: object
          additionalProperties:
            type: integer
            format: int32
        errorList:
          type: array
          items:
            $ref: "#/components/schemas/StoredError"
        uniqueErrorSet:
          type: array
          items:
            $ref: "#/components/schemas/StoredError"
          uniqueItems: true
    InfoPopupConfig:
      type: object
      properties:
        enabled:
          type: boolean
        title:
          type: string
        validationRegex:
          type: string
    InternalIdpPasswordPolicyConfig:
      type: object
      properties:
        allowPasswordResets:
          type: boolean
        minimumPasswordLength:
          type: integer
          format: int32
          minimum: 0
        minimumPasswordStrength:
          type: integer
          format: int32
          maximum: 5
          minimum: 0
        passwordComplexityRegex:
          type: string
        passwordPolicyMessage:
          type: string
      required:
      - minimumPasswordLength
      - minimumPasswordStrength
    Job:
      type: object
      properties:
        advanced:
          type: boolean
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    JobNode:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        job:
          $ref: "#/components/schemas/Job"
        jobType:
          type: string
          enum:
          - UNKNOWN
          - CRON
          - FREQUENCY
          - DISTRIBUTED
        nodeName:
          type: string
        schedule:
          type: string
        taskLimit:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        version:
          type: integer
          format: int32
    JobNodeAndInfo:
      type: object
      properties:
        jobNode:
          $ref: "#/components/schemas/JobNode"
        jobNodeInfo:
          $ref: "#/components/schemas/JobNodeInfo"
    JobNodeAndInfoListResponse:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/JobNodeAndInfo"
    JobNodeInfo:
      type: object
      properties:
        currentTaskCount:
          type: integer
          format: int32
        lastExecutedTime:
          type: integer
          format: int64
        nextScheduledTime:
          type: integer
          format: int64
        scheduleReferenceTime:
          type: integer
          format: int64
    KafkaConfigDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    Key:
      type: object
      properties:
        keyEnd:
          type: integer
          format: int64
        keyStart:
          type: integer
          format: int64
        time:
          type: string
          format: date-time
    KeyPrefix:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        val:
          $ref: "#/components/schemas/Val"
    KeyValueInputComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          text:
            type: string
    LayoutConfig:
      type: object
      discriminator:
        propertyName: type
      properties:
        preferredSize:
          $ref: "#/components/schemas/Size"
        type:
          type: string
      required:
      - type
    LayoutConstraints:
      type: object
      properties:
        fitHeight:
          type: boolean
        fitWidth:
          type: boolean
    LifespanInfo:
      type: object
      properties:
        destroyOnTabClose:
          type: boolean
        destroyOnWindowClose:
          type: boolean
        timeToIdle:
          type: string
        timeToLive:
          type: string
    Limits:
      type: object
      properties:
        durationMs:
          type: integer
          format: int64
        eventCount:
          type: integer
          format: int64
        streamCount:
          type: integer
          format: int64
    LinkAnnotations:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          annotations:
            type: array
            items:
              type: integer
              format: int64
    LinkEvents:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          events:
            type: array
            items:
              $ref: "#/components/schemas/EventId"
    ListConfigResponse:
      type: object
      description: List of config properties
      properties:
        nodeName:
          type: string
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ConfigProperty"
    ListInputComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          allowTextEntry:
            type: boolean
          dictionary:
            $ref: "#/components/schemas/DocRef"
          key:
            type: string
          useDictionary:
            type: boolean
          value:
            type: string
          values:
            type: array
            items:
              type: string
    Location:
      type: object
      discriminator:
        propertyName: type
      properties:
        colNo:
          type: integer
          format: int32
        lineNo:
          type: integer
          format: int32
        type:
          type: string
        unknown:
          type: boolean
      required:
      - type
    LoginRequest:
      type: object
      properties:
        password:
          type: string
        userId:
          type: string
    LoginResponse:
      type: object
      properties:
        loginSuccessful:
          type: boolean
        message:
          type: string
        requirePasswordChange:
          type: boolean
    LuceneIndexDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        defaultExtractionPipeline:
          $ref: "#/components/schemas/DocRef"
        description:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/LuceneIndexField"
        maxDocsPerShard:
          type: integer
          format: int32
        name:
          type: string
        partitionBy:
          type: string
          enum:
          - DAY
          - WEEK
          - MONTH
          - YEAR
        partitionSize:
          type: integer
          format: int32
        retentionDayAge:
          type: integer
          format: int32
        shardsPerPartition:
          type: integer
          format: int32
        timeField:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
        volumeGroupName:
          type: string
    LuceneIndexField:
      type: object
      properties:
        analyzerType:
          type: string
          enum:
          - KEYWORD
          - ALPHA
          - NUMERIC
          - ALPHA_NUMERIC
          - WHITESPACE
          - STOP
          - STANDARD
        caseSensitive:
          type: boolean
        fieldName:
          type: string
        fieldType:
          type: string
          enum:
          - ID
          - BOOLEAN_FIELD
          - INTEGER_FIELD
          - LONG_FIELD
          - FLOAT_FIELD
          - DOUBLE_FIELD
          - DATE_FIELD
          - FIELD
          - NUMERIC_FIELD
        fldName:
          type: string
        fldType:
          type: string
          enum:
          - ID
          - BOOLEAN
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - DATE
          - TEXT
          - KEYWORD
          - IPV4_ADDRESS
          - DOC_REF
          - USER_REF
        indexed:
          type: boolean
        stored:
          type: boolean
        termPositions:
          type: boolean
    MapDefinition:
      type: object
      properties:
        mapName:
          type: string
        refStreamDefinition:
          $ref: "#/components/schemas/RefStreamDefinition"
    Marker:
      type: object
      discriminator:
        propertyName: type
      properties:
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
        type:
          type: string
      required:
      - type
    Message:
      type: object
      properties:
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    Meta:
      type: object
      properties:
        createMs:
          type: integer
          format: int64
        effectiveMs:
          type: integer
          format: int64
        feedName:
          type: string
        id:
          type: integer
          format: int64
        parentMetaId:
          type: integer
          format: int64
        pipelineUuid:
          type: string
        processorFilterId:
          type: integer
          format: int32
        processorTaskId:
          type: integer
          format: int64
        processorUuid:
          type: string
        status:
          type: string
          enum:
          - UNLOCKED
          - LOCKED
          - DELETED
        statusMs:
          type: integer
          format: int64
        typeName:
          type: string
    MetaRow:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: string
        meta:
          $ref: "#/components/schemas/Meta"
        pipeline:
          $ref: "#/components/schemas/DocRef"
    MetricKeySchema:
      type: object
      properties:
        hashLength:
          type: string
          enum:
          - INTEGER
          - LONG
        keyType:
          type: string
          enum:
          - BOOLEAN
          - BYTE
          - SHORT
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - STRING
          - UID_LOOKUP
          - HASH_LOOKUP
          - VARIABLE
          - TAGS
        temporalResolution:
          type: string
          enum:
          - YEAR
          - MONTH
          - DAY
          - HOUR
          - MINUTE
          - SECOND
        timeZone:
          $ref: "#/components/schemas/UserTimeZone"
    MetricSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          keySchema:
            $ref: "#/components/schemas/MetricKeySchema"
          valueSchema:
            $ref: "#/components/schemas/MetricValueSchema"
    MetricValueSchema:
      type: object
      properties:
        storeCount:
          type: boolean
        storeLatestValue:
          type: boolean
        storeMax:
          type: boolean
        storeMin:
          type: boolean
        storeSum:
          type: boolean
        valueType:
          type: string
          enum:
          - ONE
          - TWO
          - THREE
          - FOUR
          - FIVE
          - SIX
          - SEVEN
          - EIGHT
    MultiAnnotationChangeRequest:
      type: object
      properties:
        annotationIdList:
          type: array
          items:
            type: integer
            format: int64
        change:
          $ref: "#/components/schemas/AbstractAnnotationChange"
    Node:
      type: object
      properties:
        buildVersion:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        lastBootMs:
          type: integer
          format: int64
        name:
          type: string
        priority:
          type: integer
          format: int32
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        url:
          type: string
        version:
          type: integer
          format: int32
    NodeInfo:
      type: object
      properties:
        description:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    NodeMonitoringConfig:
      type: object
      properties:
        pingMaxThreshold:
          type: integer
          format: int32
          minimum: 1
        pingWarnThreshold:
          type: integer
          format: int32
          minimum: 1
    NodeSearchTask:
      type: object
      properties:
        dateTimeSettings:
          $ref: "#/components/schemas/DateTimeSettings"
        key:
          $ref: "#/components/schemas/QueryKey"
        query:
          $ref: "#/components/schemas/Query"
        searchRequestSource:
          $ref: "#/components/schemas/SearchRequestSource"
        settings:
          type: array
          items:
            $ref: "#/components/schemas/CoprocessorSettings"
        shards:
          type: array
          items:
            type: integer
            format: int64
        sourceTaskId:
          $ref: "#/components/schemas/TaskId"
        taskName:
          type: string
        type:
          type: string
          enum:
          - LUCENE
          - ANALYTICS
    NodeSetJobsEnabledRequest:
      type: object
      properties:
        enabled:
          type: boolean
        excludeJobs:
          type: array
          items:
            type: string
          uniqueItems: true
        includeJobs:
          type: array
          items:
            type: string
          uniqueItems: true
    NodeSetJobsEnabledResponse:
      type: object
      properties:
        modifiedCount:
          type: integer
          format: int32
    NodeStatusResult:
      type: object
      properties:
        master:
          type: boolean
        node:
          $ref: "#/components/schemas/Node"
    NotificationConfig:
      type: object
      properties:
        destination:
          $ref: "#/components/schemas/NotificationDestination"
        destinationType:
          type: string
          enum:
          - STREAM
          - EMAIL
        enabled:
          type: boolean
        limitNotifications:
          type: boolean
        maxNotifications:
          type: integer
          format: int32
        resumeAfter:
          $ref: "#/components/schemas/SimpleDuration"
        uuid:
          type: string
    NotificationDestination:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    NotificationEmailDestination:
      type: object
      allOf:
      - $ref: "#/components/schemas/NotificationDestination"
      - type: object
        properties:
          bcc:
            type: string
          bodyTemplate:
            type: string
          cc:
            type: string
          subjectTemplate:
            type: string
          to:
            type: string
    NotificationStreamDestination:
      type: object
      allOf:
      - $ref: "#/components/schemas/NotificationDestination"
      - type: object
        properties:
          destinationFeed:
            $ref: "#/components/schemas/DocRef"
          useSourceFeedIfPossible:
            type: boolean
    NumberFormatSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/FormatSettings"
      - type: object
        properties:
          decimalPlaces:
            type: integer
            format: int32
            description: The number of decimal places
            example: 2
          useSeparator:
            type: boolean
            description: Whether to use a thousands separator or not. Defaults to
              false
            example: true
      description: The definition of a format to apply to numeric data
      required:
      - decimalPlaces
    OffsetRange:
      type: object
      description: The offset and length of a range of data in a sub-set of a query
        result set
      properties:
        length:
          type: integer
          format: int64
          description: The length in records of the sub-set of results
          example: 100
        offset:
          type: integer
          format: int64
          description: "The start offset for this sub-set of data, where zero is the\
            \ offset of the first record in the full result set"
          example: 0
      required:
      - length
      - offset
    OverrideValueString:
      type: object
      properties:
        hasOverride:
          type: boolean
        value:
          type: string
    PageRequest:
      type: object
      properties:
        length:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
    PageResponse:
      type: object
      description: Details of the page of results being returned.
      properties:
        exact:
          type: boolean
        length:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
    Param:
      type: object
      description: A key value pair that describes a property of a query
      properties:
        key:
          type: string
          description: The property key
        value:
          type: string
          description: The property value
    ParamInfo:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        paramType:
          type: string
          enum:
          - OPTIONAL
          - MANDATORY
    PermissionChangeEvent:
      type: object
      properties:
        docRef:
          $ref: "#/components/schemas/DocRef"
        userRef:
          $ref: "#/components/schemas/UserRef"
    PipelineData:
      type: object
      properties:
        elements:
          $ref: "#/components/schemas/PipelineElements"
        links:
          $ref: "#/components/schemas/PipelineLinks"
        pipelineReferences:
          $ref: "#/components/schemas/PipelineReferences"
        properties:
          $ref: "#/components/schemas/PipelineProperties"
    PipelineDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        parentPipeline:
          $ref: "#/components/schemas/DocRef"
        pipelineData:
          $ref: "#/components/schemas/PipelineData"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    PipelineElement:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        type:
          type: string
    PipelineElementType:
      type: object
      properties:
        category:
          type: string
          enum:
          - INTERNAL
          - READER
          - PARSER
          - FILTER
          - WRITER
          - DESTINATION
        icon:
          type: string
          enum:
          - ADD
          - ADD_ABOVE
          - ADD_BELOW
          - ADD_MULTIPLE
          - ALERT
          - ALERT_SIMPLE
          - ARROW_DOWN
          - ARROW_LEFT
          - ARROW_RIGHT
          - ARROW_UP
          - AUTO_REFRESH
          - BACKWARD
          - BORDERED_CIRCLE
          - CALENDAR
          - CANCEL
          - CASE_SENSITIVE
          - CLEAR
          - CLIPBOARD
          - CLOSE
          - CODE
          - COLLAPSE_ALL
          - COLLAPSE_UP
          - COPY
          - DATABASE
          - DELETE
          - DEPENDENCIES
          - DISABLE
          - DOCUMENT_ANALYTIC_OUTPUT_STORE
          - DOCUMENT_ANALYTIC_RULE
          - DOCUMENT_ANNOTATIONS_INDEX
          - DOCUMENT_DASHBOARD
          - DOCUMENT_DICTIONARY
          - DOCUMENT_DOCUMENTATION
          - DOCUMENT_ELASTIC_CLUSTER
          - DOCUMENT_ELASTIC_INDEX
          - DOCUMENT_FAVOURITES
          - DOCUMENT_FEED
          - DOCUMENT_FOLDER
          - DOCUMENT_GIT_REPO
          - DOCUMENT_INDEX
          - DOCUMENT_KAFKA_CONFIG
          - DOCUMENT_PIPELINE
          - DOCUMENT_PLAN_B
          - DOCUMENT_QUERY
          - DOCUMENT_RECEIVE_DATA_RULE_SET
          - DOCUMENT_REPORT
          - DOCUMENT_S3
          - DOCUMENT_SCRIPT
          - DOCUMENT_SCYLLA_DB
          - DOCUMENT_SEARCHABLE
          - DOCUMENT_SELECT_ALL_OR_NONE
          - DOCUMENT_SIGMA_RULE
          - DOCUMENT_SOLR_INDEX
          - DOCUMENT_STATE_STORE
          - DOCUMENT_STATISTIC_STORE
          - DOCUMENT_STROOM_STATS_STORE
          - DOCUMENT_SYSTEM
          - DOCUMENT_TEXT_CONVERTER
          - DOCUMENT_VIEW
          - DOCUMENT_VISUALISATION
          - DOCUMENT_XMLSCHEMA
          - DOCUMENT_XSLT
          - DOT
          - DOUBLE_ARROW
          - DOWN
          - DOWNLOAD
          - DROP_DOWN
          - EDIT
          - ELLIPSES_HORIZONTAL
          - ELLIPSES_VERTICAL
          - ERROR
          - EXCLAMATION
          - EXPAND_ALL
          - EXPAND_DOWN
          - EXPLORER
          - EYE
          - EYE_OFF
          - FAST_BACKWARD
          - FAST_FORWARD
          - FATAL
          - FATAL_DARK
          - FAVOURITES
          - FAVOURITES_OUTLINE
          - FEED
          - FIELD
          - FIELDS_EXPRESSION
          - FIELDS_FILTER
          - FIELDS_FORMAT
          - FIELDS_GROUP
          - FIELDS_SORT_ASCENDING
          - FIELDS_SORT_DESCENDING
          - FIELDS_SORT_NONE
          - FILE
          - FILE_FORMATTED
          - FILE_RAW
          - FILTER
          - FIND
          - FOLDER
          - FOLDER_TREE
          - FORMAT
          - FORWARD
          - FUNCTION
          - GENERATE
          - HELP
          - HELP_OUTLINE
          - HIDE
          - HIDE_MENU
          - HISTORY
          - INFINITY_LOGO
          - INFO
          - INSERT
          - JOBS
          - KEY
          - LINK
          - LOCATE
          - LOCKED
          - LOGO
          - LOGOUT
          - MAXIMISE
          - MENU
          - MINIMISE
          - MONITORING
          - MOVE
          - NODES
          - OK
          - OO
          - OPEN
          - OPERATOR
          - PASSWORD
          - PAUSE
          - PEN
          - PIPELINE_ELASTIC_INDEX
          - PIPELINE_FILE
          - PIPELINE_FILES
          - PIPELINE_HADOOP
          - PIPELINE_ID
          - PIPELINE_INDEX
          - PIPELINE_JSON
          - PIPELINE_KAFKA
          - PIPELINE_MERGE
          - PIPELINE_RECORD_COUNT
          - PIPELINE_RECORD_OUTPUT
          - PIPELINE_REFERENCE_DATA
          - PIPELINE_SEARCH_OUTPUT
          - PIPELINE_SOLR
          - PIPELINE_SPLIT
          - PIPELINE_STATISTICS
          - PIPELINE_STREAM
          - PIPELINE_STROOM_STATS
          - PIPELINE_STROOM_STATS_STORE
          - PIPELINE_TEXT
          - PIPELINE_XML
          - PIPELINE_XML_SEARCH
          - PIPELINE_XSD
          - PIPELINE_XSLT
          - PLAY
          - PROCESS
          - PROPERTIES
          - QUESTION
          - RAW
          - REFRESH
          - REGEX
          - REMOVE
          - RESIZE
          - RESIZE_HANDLE
          - SAVE
          - SAVEAS
          - SEARCH
          - SELECTION
          - SETTINGS
          - SHARD_CLOSE
          - SHARD_FLUSH
          - SHARE
          - SHIELD
          - SHOW
          - SHOW_MENU
          - SPINNER_CIRCLE
          - SPINNER_PAUSE
          - SPINNER_SPINNING
          - STAMP
          - STEP
          - STEPPING
          - STEPPING_CIRCLE
          - STEP_BACKWARD
          - STEP_FORWARD
          - STOP
          - TABLE
          - TABLE_NESTED
          - TAB_CLOSE
          - TAGS
          - TEXT_WRAP
          - TICK
          - UNDO
          - UNLINK
          - UNLOCK
          - UP
          - UPLOAD
          - USER
          - USERS
          - VALUE_FILTER
          - VOLUMES
          - WARNING
        roles:
          type: array
          items:
            type: string
        type:
          type: string
    PipelineElements:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: "#/components/schemas/PipelineElement"
        remove:
          type: array
          items:
            $ref: "#/components/schemas/PipelineElement"
    PipelineLayer:
      type: object
      properties:
        pipelineData:
          $ref: "#/components/schemas/PipelineData"
        sourcePipeline:
          $ref: "#/components/schemas/DocRef"
    PipelineLink:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
    PipelineLinks:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: "#/components/schemas/PipelineLink"
        remove:
          type: array
          items:
            $ref: "#/components/schemas/PipelineLink"
    PipelineProperties:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: "#/components/schemas/PipelineProperty"
        remove:
          type: array
          items:
            $ref: "#/components/schemas/PipelineProperty"
    PipelineProperty:
      type: object
      properties:
        element:
          type: string
        name:
          type: string
        value:
          $ref: "#/components/schemas/PipelinePropertyValue"
    PipelinePropertyType:
      type: object
      properties:
        defaultValue:
          type: string
        description:
          type: string
        displayPriority:
          type: integer
          format: int32
        docRefTypes:
          type: array
          items:
            type: string
        elementType:
          $ref: "#/components/schemas/PipelineElementType"
        name:
          type: string
        pipelineReference:
          type: boolean
        type:
          type: string
    PipelinePropertyValue:
      type: object
      properties:
        boolean:
          type: boolean
        entity:
          $ref: "#/components/schemas/DocRef"
        integer:
          type: integer
          format: int32
        long:
          type: integer
          format: int64
        string:
          type: string
    PipelineReference:
      type: object
      properties:
        element:
          type: string
        feed:
          $ref: "#/components/schemas/DocRef"
        name:
          type: string
        pipeline:
          $ref: "#/components/schemas/DocRef"
        streamType:
          type: string
    PipelineReferences:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: "#/components/schemas/PipelineReference"
        remove:
          type: array
          items:
            $ref: "#/components/schemas/PipelineReference"
    PipelineStepRequest:
      type: object
      properties:
        childStreamType:
          type: string
        code:
          type: object
          additionalProperties:
            type: string
        criteria:
          $ref: "#/components/schemas/FindMetaCriteria"
        pipeline:
          $ref: "#/components/schemas/DocRef"
        sessionUuid:
          type: string
        stepFilterMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SteppingFilterSettings"
        stepLocation:
          $ref: "#/components/schemas/StepLocation"
        stepSize:
          type: integer
          format: int32
        stepType:
          type: string
          enum:
          - FIRST
          - FORWARD
          - BACKWARD
          - LAST
          - REFRESH
        timeout:
          type: integer
          format: int64
    PlanBDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        settings:
          $ref: "#/components/schemas/AbstractPlanBSettings"
        stateType:
          type: string
          enum:
          - STATE
          - TEMPORAL_STATE
          - RANGED_STATE
          - TEMPORAL_RANGED_STATE
          - SESSION
          - HISTOGRAM
          - METRIC
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    PlanBShardInfoRequest:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
    PlanBShardInfoResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: string
    PlanBValue:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    ProcessConfig:
      type: object
      properties:
        defaultRecordLimit:
          type: integer
          format: int64
        defaultTimeLimit:
          type: integer
          format: int64
    ProcessingInfoResponse:
      type: object
      properties:
        createTime:
          type: string
        effectiveTime:
          type: string
        lastAccessedTime:
          type: string
        maps:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/EntryCounts"
        processingState:
          type: string
          enum:
          - LOAD_IN_PROGRESS
          - PURGE_IN_PROGRESS
          - COMPLETE
          - FAILED
          - TERMINATED
          - PURGE_FAILED
          - STAGED
          - READY_FOR_PURGE
        refStreamDefinition:
          $ref: "#/components/schemas/RefStreamDefinition"
    Processor:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        deleted:
          type: boolean
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        pipelineName:
          type: string
        pipelineUuid:
          type: string
        processorType:
          type: string
          enum:
          - PIPELINE
          - STREAMING_ANALYTIC
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
    ProcessorFilter:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        deleted:
          type: boolean
        enabled:
          type: boolean
        id:
          type: integer
          format: int32
        maxMetaCreateTimeMs:
          type: integer
          format: int64
        maxProcessingTasks:
          type: integer
          format: int32
        minMetaCreateTimeMs:
          type: integer
          format: int64
        pipelineName:
          type: string
        pipelineUuid:
          type: string
        priority:
          type: integer
          format: int32
        processor:
          $ref: "#/components/schemas/Processor"
        processorFilterTracker:
          $ref: "#/components/schemas/ProcessorFilterTracker"
        processorType:
          type: string
          enum:
          - PIPELINE
          - STREAMING_ANALYTIC
        processorUuid:
          type: string
        queryData:
          $ref: "#/components/schemas/QueryData"
        reprocess:
          type: boolean
        runAsUser:
          $ref: "#/components/schemas/UserRef"
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
    ProcessorFilterRow:
      type: object
      allOf:
      - $ref: "#/components/schemas/ProcessorListRow"
      - type: object
        properties:
          processorFilter:
            $ref: "#/components/schemas/ProcessorFilter"
    ProcessorFilterTracker:
      type: object
      properties:
        eventCount:
          type: integer
          format: int64
        id:
          type: integer
          format: int32
        lastPollMs:
          type: integer
          format: int64
        lastPollTaskCount:
          type: integer
          format: int32
        maxMetaCreateMs:
          type: integer
          format: int64
        message:
          type: string
        metaCount:
          type: integer
          format: int64
        metaCreateMs:
          type: integer
          format: int64
        minEventId:
          type: integer
          format: int64
        minMetaCreateMs:
          type: integer
          format: int64
        minMetaId:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - CREATED
          - COMPLETE
          - ERROR
        version:
          type: integer
          format: int32
    ProcessorListRow:
      type: object
      discriminator:
        propertyName: type
      properties:
        expander:
          $ref: "#/components/schemas/Expander"
        type:
          type: string
      required:
      - type
    ProcessorListRowResultPage:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorListRow"
    ProcessorRow:
      type: object
      allOf:
      - $ref: "#/components/schemas/ProcessorListRow"
      - type: object
        properties:
          processor:
            $ref: "#/components/schemas/Processor"
    ProcessorTask:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        data:
          type: string
        endTimeMs:
          type: integer
          format: int64
        feedName:
          type: string
        id:
          type: integer
          format: int64
        metaId:
          type: integer
          format: int64
        nodeName:
          type: string
        processorFilter:
          $ref: "#/components/schemas/ProcessorFilter"
        startTimeMs:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - CREATED
          - QUEUED
          - ASSIGNED
          - PROCESSING
          - COMPLETE
          - FAILED
          - DELETED
        statusTimeMs:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
    ProcessorTaskList:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorTask"
        nodeName:
          type: string
    ProcessorTaskSummary:
      type: object
      properties:
        count:
          type: integer
          format: int64
        feed:
          type: string
        pipeline:
          $ref: "#/components/schemas/DocRef"
        priority:
          type: integer
          format: int32
        status:
          type: string
          enum:
          - CREATED
          - QUEUED
          - ASSIGNED
          - PROCESSING
          - COMPLETE
          - FAILED
          - DELETED
    Prop:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        showInList:
          type: boolean
        showInSelection:
          type: boolean
        validation:
          type: string
        validationMessage:
          type: string
        value:
          type: string
    PropertyPath:
      type: object
      properties:
        leafPart:
          type: string
        parentParts:
          type: array
          items:
            type: string
    QLVisResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/Result"
      - type: object
        properties:
          dataPoints:
            type: integer
            format: int64
          jsonData:
            type: string
          visSettings:
            $ref: "#/components/schemas/QLVisSettings"
      required:
      - componentId
    QLVisSettings:
      type: object
      properties:
        json:
          type: string
        visualisation:
          $ref: "#/components/schemas/DocRef"
    Query:
      type: object
      description: The query terms for the search
      properties:
        dataSource:
          $ref: "#/components/schemas/DocRef"
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        params:
          type: array
          items:
            $ref: "#/components/schemas/Param"
        timeRange:
          $ref: "#/components/schemas/TimeRange"
      required:
      - dataSource
      - expression
    QueryColumnValuesRequest:
      type: object
      properties:
        column:
          $ref: "#/components/schemas/Column"
        filter:
          type: string
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        searchRequest:
          $ref: "#/components/schemas/QuerySearchRequest"
    QueryComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          automate:
            $ref: "#/components/schemas/Automate"
          dataSource:
            $ref: "#/components/schemas/DocRef"
          expression:
            $ref: "#/components/schemas/ExpressionOperator"
          lastQueryKey:
            $ref: "#/components/schemas/QueryKey"
          lastQueryNode:
            type: string
          selectionHandlers:
            type: array
            items:
              $ref: "#/components/schemas/ComponentSelectionHandler"
    QueryConfig:
      type: object
      properties:
        dashboardPipelineSelectorIncludedTags:
          type: array
          items:
            type: string
          uniqueItems: true
        indexPipelineSelectorIncludedTags:
          type: array
          items:
            type: string
          uniqueItems: true
        infoPopup:
          $ref: "#/components/schemas/InfoPopupConfig"
        viewPipelineSelectorIncludedTags:
          type: array
          items:
            type: string
          uniqueItems: true
    QueryContext:
      type: object
      properties:
        additionalQueryExpression:
          $ref: "#/components/schemas/ExpressionOperator"
        dateTimeSettings:
          $ref: "#/components/schemas/DateTimeSettings"
        params:
          type: array
          items:
            $ref: "#/components/schemas/Param"
        queryInfo:
          type: string
        timeRange:
          $ref: "#/components/schemas/TimeRange"
    QueryData:
      type: object
      properties:
        dataSource:
          $ref: "#/components/schemas/DocRef"
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        limits:
          $ref: "#/components/schemas/Limits"
        params:
          type: array
          items:
            $ref: "#/components/schemas/Param"
        timeRange:
          $ref: "#/components/schemas/TimeRange"
    QueryDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        query:
          type: string
        queryTablePreferences:
          $ref: "#/components/schemas/QueryTablePreferences"
        timeRange:
          $ref: "#/components/schemas/TimeRange"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    QueryField:
      type: object
      properties:
        conditionSet:
          type: string
          enum:
          - "'=', '!=', 'between', '>', '>=', '<', '<='"
          - "'=', '!=', 'in', 'in dictionary', 'between', '>', '>=', '<', '<='"
          - "'=', '!='"
          - "'=', '!=', 'between', '>', '>=', '<', '<='"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'is', 'in folder'"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'is', 'in folder', '=', '!=', 'in', 'in dictionary'"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'=', '!=', '==', '!==', 'in', 'in dictionary'"
          - "'==', '!==', 'between', 'in', 'in dictionary'"
          - "'==', '!==', 'in', 'in dictionary', '=', '!=', 'between', 'contains',\
            \ 'contains (CS)', '>', '>=', '<', '<=', 'is null', 'is not null', 'matches\
            \ regex', 'matches regex (CS)', 'starts with', 'starts with (CS)', 'ends\
            \ with', 'ends with (CS)'"
          - "'=', '!=', '>', '>=', '<', '<=', 'between', 'in', 'in dictionary'"
          - "'=', '!=', 'in', 'in dictionary', 'matches regex'"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'=', '!=', '>', '>=', '<', '<=', 'between', 'in', 'in dictionary'"
          - "'=', '!='"
          - "'=', '!=', '>', '>=', '<', '<=', 'between', 'in', 'in dictionary'"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'is', '=', '!='"
          - '''between'''
          - "'=', '!=', 'in'"
          - "'contains', '=', '!=', 'matches regex', 'in'"
          - "'=', '!=', 'in', 'in dictionary'"
          - "'=', '!=', 'in', 'in dictionary', 'is'"
          - "'=', '!=', '>', '>=', '<', '<=', 'between', 'in', 'in dictionary'"
          - "'=', '!=', '>', '>=', '<', '<=', 'between', 'in', 'in dictionary'"
          - '''is'''
          - '''of'''
          - "'has permissions', 'has owner permission', 'has delete permission', 'has\
            \ edit permission', 'has view permission', 'has use permission'"
          - '''is'''
        docRefType:
          type: string
        fldName:
          type: string
        fldType:
          type: string
          enum:
          - ID
          - BOOLEAN
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - DATE
          - TEXT
          - KEYWORD
          - IPV4_ADDRESS
          - DOC_REF
          - USER_REF
        name:
          type: string
        queryable:
          type: boolean
        type:
          type: string
    QueryHelpData:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    QueryHelpDetail:
      type: object
      properties:
        documentation:
          type: string
        insertText:
          type: string
        insertType:
          type: string
          enum:
          - PLAIN_TEXT
          - SNIPPET
          - BLANK
          - NOT_INSERTABLE
    QueryHelpDocument:
      type: object
      allOf:
      - $ref: "#/components/schemas/QueryHelpData"
      - type: object
        properties:
          docRef:
            $ref: "#/components/schemas/DocRef"
    QueryHelpField:
      type: object
      allOf:
      - $ref: "#/components/schemas/QueryHelpData"
      - type: object
        properties:
          field:
            $ref: "#/components/schemas/QueryField"
    QueryHelpFunctionSignature:
      type: object
      allOf:
      - $ref: "#/components/schemas/QueryHelpData"
      - type: object
        properties:
          aliases:
            type: array
            items:
              type: string
          args:
            type: array
            items:
              $ref: "#/components/schemas/Arg"
          categoryPath:
            type: array
            items:
              type: string
          description:
            type: string
          helpAnchor:
            type: string
          name:
            type: string
          overloadType:
            type: string
            enum:
            - NOT_OVERLOADED
            - OVERLOADED_IN_CATEGORY
            - OVERLOADED_GLOBALLY
          returnDescription:
            type: string
          returnType:
            type: string
            enum:
            - UNKNOWN
            - BOOLEAN
            - DOUBLE
            - ERROR
            - INTEGER
            - LONG
            - "NULL"
            - NUMBER
            - STRING
    QueryHelpRequest:
      type: object
      properties:
        dataSourceRef:
          $ref: "#/components/schemas/DocRef"
        filter:
          type: string
        includedTypes:
          type: array
          items:
            type: string
            enum:
            - DATA_SOURCE
            - QUERYABLE_FIELD
            - FIELD
            - FUNCTION
            - TITLE
            - STRUCTURE
            - VISUALISATION
            - DICTIONARY
          uniqueItems: true
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        parentPath:
          type: string
        query:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    QueryHelpRow:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/QueryHelpData"
        documentType:
          type: string
        hasChildren:
          type: boolean
        iconTooltip:
          type: string
        id:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
          - DATA_SOURCE
          - QUERYABLE_FIELD
          - FIELD
          - FUNCTION
          - TITLE
          - STRUCTURE
          - VISUALISATION
          - DICTIONARY
    QueryKey:
      type: object
      description: A unique key to identify the instance of the search by. This key
        is used to identify multiple requests for the same search when running in
        incremental mode.
      properties:
        uuid:
          type: string
          description: The UUID that makes up the query key
          example: 7740bcd0-a49e-4c22-8540-044f85770716
    QuerySearchRequest:
      type: object
      properties:
        groupSelection:
          $ref: "#/components/schemas/GroupSelection"
        incremental:
          type: boolean
        openGroups:
          type: array
          items:
            type: string
          uniqueItems: true
        query:
          type: string
        queryContext:
          $ref: "#/components/schemas/QueryContext"
        queryKey:
          $ref: "#/components/schemas/QueryKey"
        queryTablePreferences:
          $ref: "#/components/schemas/QueryTablePreferences"
        requestedRange:
          $ref: "#/components/schemas/OffsetRange"
        searchRequestSource:
          $ref: "#/components/schemas/SearchRequestSource"
        storeHistory:
          type: boolean
        timeout:
          type: integer
          format: int64
    QueryTablePreferences:
      type: object
      properties:
        applyValueFilters:
          type: boolean
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
        conditionalFormattingRules:
          type: array
          items:
            $ref: "#/components/schemas/ConditionalFormattingRule"
        pageSize:
          type: integer
          format: int32
        selectionFilter:
          $ref: "#/components/schemas/ExpressionOperator"
    RangeInteger:
      type: object
      properties:
        from:
          type: integer
          format: int32
        matchNull:
          type: boolean
        to:
          type: integer
          format: int32
    RangeKeySchema:
      type: object
      properties:
        rangeType:
          type: string
          enum:
          - BYTE
          - SHORT
          - INT
          - LONG
    RangeLong:
      type: object
      properties:
        from:
          type: integer
          format: int64
        matchNull:
          type: boolean
        to:
          type: integer
          format: int64
    RangeState:
      type: object
      allOf:
      - $ref: "#/components/schemas/PlanBValue"
      - type: object
        properties:
          key:
            $ref: "#/components/schemas/Key"
          value:
            $ref: "#/components/schemas/Val"
    RangeStateSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          keySchema:
            $ref: "#/components/schemas/RangeKeySchema"
          valueSchema:
            $ref: "#/components/schemas/StateValueSchema"
    Rec:
      type: object
      properties:
        metaId:
          type: integer
          format: int64
        recordIndex:
          type: integer
          format: int64
    ReceiveDataRule:
      type: object
      properties:
        action:
          type: string
          enum:
          - RECEIVE
          - REJECT
          - DROP
        creationTime:
          type: integer
          format: int64
        enabled:
          type: boolean
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        name:
          type: string
        ruleNumber:
          type: integer
          format: int32
    ReceiveDataRules:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/QueryField"
        name:
          type: string
        rules:
          type: array
          items:
            $ref: "#/components/schemas/ReceiveDataRule"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    RefDataLookupRequest:
      type: object
      properties:
        effectiveTime:
          type: string
        key:
          type: string
        mapName:
          type: string
        referenceLoaders:
          type: array
          items:
            $ref: "#/components/schemas/ReferenceLoader"
      required:
      - key
      - mapName
      - referenceLoaders
    RefDataProcessingInfo:
      type: object
      properties:
        createTimeEpochMs:
          type: integer
          format: int64
        effectiveTimeEpochMs:
          type: integer
          format: int64
        lastAccessedTimeEpochMs:
          type: integer
          format: int64
        processingState:
          type: string
          enum:
          - LOAD_IN_PROGRESS
          - PURGE_IN_PROGRESS
          - COMPLETE
          - FAILED
          - TERMINATED
          - PURGE_FAILED
          - STAGED
          - READY_FOR_PURGE
    RefStoreEntry:
      type: object
      properties:
        feedName:
          type: string
        key:
          type: string
        mapDefinition:
          $ref: "#/components/schemas/MapDefinition"
        refDataProcessingInfo:
          $ref: "#/components/schemas/RefDataProcessingInfo"
        value:
          type: string
        valueReferenceCount:
          type: integer
          format: int32
    RefStreamDefinition:
      type: object
      properties:
        partIndex:
          type: integer
          format: int64
        pipelineDocRef:
          $ref: "#/components/schemas/DocRef"
        pipelineVersion:
          type: string
        streamId:
          type: integer
          format: int64
    ReferenceLoader:
      type: object
      properties:
        loaderPipeline:
          $ref: "#/components/schemas/DocRef"
        referenceFeed:
          $ref: "#/components/schemas/DocRef"
        streamType:
          type: string
      required:
      - loaderPipeline
      - referenceFeed
    RemoveAllDocumentUserCreatePermissions:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          userRef:
            $ref: "#/components/schemas/UserRef"
    RemoveAllPermissions:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
    RemoveAppPermission:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAppPermissionChange"
    RemoveDocumentUserCreatePermission:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          documentType:
            type: string
          userRef:
            $ref: "#/components/schemas/UserRef"
    RemovePermission:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          userRef:
            $ref: "#/components/schemas/UserRef"
    RemoveTag:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          tag:
            $ref: "#/components/schemas/AnnotationTag"
    ReportDoc:
      type: object
      properties:
        analyticNotificationConfig:
          $ref: "#/components/schemas/NotificationConfig"
        analyticProcessConfig:
          $ref: "#/components/schemas/AnalyticProcessConfig"
        analyticProcessType:
          type: string
          enum:
          - STREAMING
          - TABLE_BUILDER
          - SCHEDULED_QUERY
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        duplicateNotificationConfig:
          $ref: "#/components/schemas/DuplicateNotificationConfig"
        errorFeed:
          $ref: "#/components/schemas/DocRef"
        languageVersion:
          type: string
          enum:
          - STROOM_QL_VERSION_0_1
          - SIGMA
        name:
          type: string
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/NotificationConfig"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/Param"
        query:
          type: string
        rememberNotifications:
          type: boolean
        reportSettings:
          $ref: "#/components/schemas/ReportSettings"
        suppressDuplicateNotifications:
          type: boolean
        timeRange:
          $ref: "#/components/schemas/TimeRange"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    ReportSettings:
      type: object
      properties:
        fileType:
          type: string
          enum:
          - EXCEL
          - CSV
          - TSV
    ReportUiDefaultConfig:
      type: object
      properties:
        defaultBodyTemplate:
          type: string
        defaultDestinationFeed:
          $ref: "#/components/schemas/DocRef"
        defaultErrorFeed:
          $ref: "#/components/schemas/DocRef"
        defaultNode:
          type: string
        defaultSubjectTemplate:
          type: string
    ReprocessDataInfo:
      type: object
      properties:
        details:
          type: string
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    ResourceGeneration:
      type: object
      properties:
        messageList:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        resourceKey:
          $ref: "#/components/schemas/ResourceKey"
    ResourceKey:
      type: object
      properties:
        key:
          type: string
        name:
          type: string
    Result:
      type: object
      description: Base object for describing a set of result data
      discriminator:
        propertyName: type
      properties:
        componentId:
          type: string
          description: The ID of the component that this result set was requested
            for. See ResultRequest in SearchRequest
        errors:
          type: array
          description: If an error has occurred producing this result set then this
            will have details of the error
          items:
            type: string
            description: If an error has occurred producing this result set then this
              will have details of the error
        type:
          type: string
      required:
      - componentId
      - type
    ResultPageAccount:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Account"
    ResultPageActivity:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
    ResultPageAnalyticDataShard:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/AnalyticDataShard"
    ResultPageAnnotation:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Annotation"
    ResultPageAnnotationTag:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/AnnotationTag"
    ResultPageAppUserPermissions:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/AppUserPermissions"
    ResultPageCompletionItem:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/CompletionItem"
    ResultPageCustomRollUpMask:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/CustomRollUpMask"
    ResultPageCustomRollUpMaskFields:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/CustomRollUpMaskFields"
    ResultPageDBTableStatus:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/DBTableStatus"
    ResultPageDependency:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Dependency"
    ResultPageDocumentUserPermissions:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/DocumentUserPermissions"
    ResultPageDuplicateCheckRow:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/DuplicateCheckRow"
    ResultPageExecutionHistory:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionHistory"
    ResultPageExecutionSchedule:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionSchedule"
    ResultPageFindInContentResult:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/FindInContentResult"
    ResultPageFindResult:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/FindResult"
    ResultPageFindResultWithPermissions:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/FindResultWithPermissions"
    ResultPageFsVolume:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/FsVolume"
    ResultPageFsVolumeGroup:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/FsVolumeGroup"
    ResultPageHashedApiKey:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/HashedApiKey"
    ResultPageIndexFieldImpl:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/IndexFieldImpl"
    ResultPageIndexShard:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/IndexShard"
    ResultPageIndexVolume:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/IndexVolume"
    ResultPageIndexVolumeGroup:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/IndexVolumeGroup"
    ResultPageJob:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Job"
    ResultPageMetaRow:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/MetaRow"
    ResultPageProcessorTask:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorTask"
    ResultPageProcessorTaskSummary:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ProcessorTaskSummary"
    ResultPageQueryField:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/QueryField"
    ResultPageQueryHelpRow:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/QueryHelpRow"
    ResultPageStoredQuery:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/StoredQuery"
    ResultPageUser:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/User"
    ResultPageUserDependency:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/UserDependency"
    ResultPageUserRef:
      type: object
      description: A page of results.
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/UserRef"
    ResultRequest:
      type: object
      description: "A definition for how to return the raw results of the query in\
        \ the SearchResponse, e.g. sorted, grouped, limited, etc."
      properties:
        componentId:
          type: string
          description: The ID of the component that will receive the results corresponding
            to this ResultRequest
        fetch:
          type: string
          enum:
          - NONE
          - CHANGES
          - ALL
        groupSelection:
          $ref: "#/components/schemas/GroupSelection"
        mappings:
          type: array
          items:
            $ref: "#/components/schemas/TableSettings"
        openGroups:
          type: array
          description: A set of group keys of parent rows we want to display children
            for
          items:
            type: string
            description: A set of group keys of parent rows we want to display children
              for
          uniqueItems: true
        requestedRange:
          $ref: "#/components/schemas/OffsetRange"
        resultStyle:
          type: string
          description: "The style of results required. FLAT will provide a FlatResult\
            \ object, while TABLE will provide a TableResult object"
          enum:
          - FLAT
          - TABLE
          - VIS
          - QL_VIS
        timeFilter:
          $ref: "#/components/schemas/TimeFilter"
    ResultStoreInfo:
      type: object
      properties:
        complete:
          type: boolean
        creationTime:
          type: integer
          format: int64
        nodeName:
          type: string
        owner:
          $ref: "#/components/schemas/UserRef"
        queryKey:
          $ref: "#/components/schemas/QueryKey"
        searchProcessLifespan:
          $ref: "#/components/schemas/LifespanInfo"
        searchRequestSource:
          $ref: "#/components/schemas/SearchRequestSource"
        storeLifespan:
          $ref: "#/components/schemas/LifespanInfo"
        storeSize:
          type: integer
          format: int64
        taskProgress:
          $ref: "#/components/schemas/SearchTaskProgress"
    ResultStoreResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ResultStoreInfo"
    RetentionSettings:
      type: object
      properties:
        duration:
          $ref: "#/components/schemas/SimpleDuration"
        enabled:
          type: boolean
        useStateTime:
          type: boolean
    Row:
      type: object
      description: A row of data in a result set
      properties:
        annotationId:
          type: integer
          format: int64
        depth:
          type: integer
          format: int32
          description: "The grouping depth, where 0 is the top level of grouping,\
            \ or where there is no grouping"
          example: 0
        groupKey:
          type: string
        matchingRule:
          type: string
        values:
          type: array
          description: The value for this row of data. The values in the list are
            in the same order as the fields in the ResultRequest
          items:
            type: string
            description: The value for this row of data. The values in the list are
              in the same order as the fields in the ResultRequest
    S3ClientConfig:
      type: object
      properties:
        accelerate:
          type: boolean
        assumeRole:
          $ref: "#/components/schemas/AwsAssumeRole"
        async:
          type: boolean
        bucketName:
          type: string
        checksumValidationEnabled:
          type: boolean
        createBuckets:
          type: boolean
        credentials:
          $ref: "#/components/schemas/AwsCredentials"
        crossRegionAccessEnabled:
          type: boolean
        endpointOverride:
          type: string
        forcePathStyle:
          type: boolean
        httpConfiguration:
          $ref: "#/components/schemas/AwsHttpConfig"
        keyPattern:
          type: string
        maxConcurrency:
          type: integer
          format: int32
        minimalPartSizeInBytes:
          type: integer
          format: int64
        multipart:
          type: boolean
        numRetries:
          type: integer
          format: int32
        readBufferSizeInBytes:
          type: integer
          format: int64
        region:
          type: string
        targetThroughputInGbps:
          type: number
          format: double
        thresholdInBytes:
          type: integer
          format: int64
    S3ConfigDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    SavePipelineJsonRequest:
      type: object
      properties:
        json:
          type: string
        pipeline:
          $ref: "#/components/schemas/DocRef"
    Schedule:
      type: object
      properties:
        expression:
          type: string
        type:
          type: string
          enum:
          - INSTANT
          - CRON
          - FREQUENCY
    ScheduleBounds:
      type: object
      properties:
        endTimeMs:
          type: integer
          format: int64
        startTimeMs:
          type: integer
          format: int64
    ScheduleRestriction:
      type: object
      properties:
        allowHour:
          type: boolean
        allowMinute:
          type: boolean
        allowSecond:
          type: boolean
    ScheduledQueryAnalyticProcessConfig:
      type: object
      allOf:
      - $ref: "#/components/schemas/AnalyticProcessConfig"
      - type: object
        properties:
          enabled:
            type: boolean
          errorFeed:
            $ref: "#/components/schemas/DocRef"
          maxEventTimeMs:
            type: integer
            format: int64
          minEventTimeMs:
            type: integer
            format: int64
          node:
            type: string
          queryFrequency:
            $ref: "#/components/schemas/SimpleDuration"
          timeToWaitForData:
            $ref: "#/components/schemas/SimpleDuration"
    ScheduledQueryAnalyticTrackerData:
      type: object
      allOf:
      - $ref: "#/components/schemas/AnalyticTrackerData"
      - type: object
        properties:
          actualExecutionTimeMs:
            type: integer
            format: int64
          lastEffectiveExecutionTimeMs:
            type: integer
            format: int64
          nextEffectiveExecutionTimeMs:
            type: integer
            format: int64
    ScheduledTimes:
      type: object
      properties:
        error:
          type: string
        nextScheduledTimeMs:
          type: integer
          format: int64
        schedule:
          $ref: "#/components/schemas/Schedule"
    ScriptDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/DocRef"
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    ScyllaDbDoc:
      type: object
      properties:
        connection:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        keyspace:
          type: string
        keyspaceCql:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    ScyllaDbTestResponse:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
    Search:
      type: object
      properties:
        componentSettingsMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ComponentSettings"
        dataSourceRef:
          $ref: "#/components/schemas/DocRef"
        expression:
          $ref: "#/components/schemas/ExpressionOperator"
        incremental:
          type: boolean
        params:
          type: array
          items:
            $ref: "#/components/schemas/Param"
        queryInfo:
          type: string
        timeRange:
          $ref: "#/components/schemas/TimeRange"
    SearchApiKeyRequest:
      type: object
      properties:
        pageRequest:
          $ref: "#/components/schemas/PageRequest"
        quickFilter:
          type: string
        sort:
          type: string
          writeOnly: true
        sortList:
          type: array
          items:
            $ref: "#/components/schemas/CriteriaFieldSort"
    SearchRequest:
      type: object
      description: A request for new search or a follow up request for more data for
        an existing iterative search
      properties:
        dateTimeSettings:
          $ref: "#/components/schemas/DateTimeSettings"
        incremental:
          type: boolean
          description: "If true the response will contain all results found so far,\
            \ typically no results on the first request. Future requests for the same\
            \ query key may return more results. Intended for use on longer running\
            \ searches to allow partial result sets to be returned as soon as they\
            \ are available rather than waiting for the full result set."
        key:
          $ref: "#/components/schemas/QueryKey"
        query:
          $ref: "#/components/schemas/Query"
        resultRequests:
          type: array
          items:
            $ref: "#/components/schemas/ResultRequest"
        searchRequestSource:
          $ref: "#/components/schemas/SearchRequestSource"
        timeout:
          type: integer
          format: int64
          description: "Set the maximum time (in ms) for the server to wait for a\
            \ complete result set. The timeout applies to both incremental and non\
            \ incremental queries, though the behaviour is slightly different. The\
            \ timeout will make the server wait for which ever comes first out of\
            \ the query completing or the timeout period being reached. If no value\
            \ is supplied then for an incremental query a default value of 0 will\
            \ be used (i.e. returning immediately) and for a non-incremental query\
            \ the server's default timeout period will be used. For an incremental\
            \ query, if the query has not completed by the end of the timeout period,\
            \ it will return the currently know results with complete=false, however\
            \ for a non-incremental query it will return no results, complete=false\
            \ and details of the timeout in the error field"
    SearchRequestSource:
      type: object
      properties:
        componentId:
          type: string
        ownerDocRef:
          $ref: "#/components/schemas/DocRef"
        sourceType:
          type: string
          enum:
          - TABLE_BUILDER_ANALYTIC
          - SCHEDULED_QUERY_ANALYTIC
          - DASHBOARD_UI
          - QUERY_UI
          - API
          - BATCH_SEARCH
    SearchResponse:
      type: object
      description: "The response to a search request, that may or may not contain\
        \ results. The results may only be a partial set if an iterative screech was\
        \ requested"
      properties:
        complete:
          type: boolean
        errors:
          type: array
          items:
            type: string
        highlights:
          type: array
          description: A list of strings to highlight in the UI that should correlate
            with the search query.
          items:
            type: string
            description: A list of strings to highlight in the UI that should correlate
              with the search query.
        key:
          $ref: "#/components/schemas/QueryKey"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Result"
      required:
      - highlights
      - key
    SearchTaskProgress:
      type: object
      properties:
        nodeName:
          type: string
        submitTimeMs:
          type: integer
          format: int64
        taskInfo:
          type: string
        taskName:
          type: string
        threadName:
          type: string
        timeNowMs:
          type: integer
          format: int64
        userRef:
          $ref: "#/components/schemas/UserRef"
    SelectionIndexShardStatus:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: string
            enum:
            - CLOSED
            - OPEN
            - CLOSING
            - OPENING
            - NEW
            - DELETED
            - CORRUPT
          uniqueItems: true
    SelectionInteger:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: integer
            format: int32
          uniqueItems: true
    SelectionLong:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
    SelectionString:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: string
          uniqueItems: true
    SelectionSummary:
      type: object
      properties:
        ageRange:
          $ref: "#/components/schemas/RangeLong"
        distinctFeeds:
          type: array
          items:
            type: string
          uniqueItems: true
        distinctStatuses:
          type: array
          items:
            type: string
          uniqueItems: true
        distinctTypes:
          type: array
          items:
            type: string
          uniqueItems: true
        feedCount:
          type: integer
          format: int64
        itemCount:
          type: integer
          format: int64
        pipelineCount:
          type: integer
          format: int64
        processorCount:
          type: integer
          format: int64
        statusCount:
          type: integer
          format: int64
        typeCount:
          type: integer
          format: int64
    SelectionSummaryRequest:
      type: object
      properties:
        findMetaCriteria:
          $ref: "#/components/schemas/FindMetaCriteria"
        requiredPermission:
          type: string
          enum:
          - OWNER
          - DELETE
          - EDIT
          - VIEW
          - USE
    SelectionVolumeUseStatus:
      type: object
      properties:
        matchAll:
          type: boolean
        set:
          type: array
          items:
            type: string
            enum:
            - ACTIVE
            - INACTIVE
            - CLOSED
          uniqueItems: true
    Session:
      type: object
      allOf:
      - $ref: "#/components/schemas/PlanBValue"
      - type: object
        properties:
          end:
            type: string
            format: date-time
          prefix:
            $ref: "#/components/schemas/KeyPrefix"
          start:
            type: string
            format: date-time
    SessionDetails:
      type: object
      properties:
        createMs:
          type: integer
          format: int64
        lastAccessedAgent:
          type: string
        lastAccessedMs:
          type: integer
          format: int64
        nodeName:
          type: string
        userRef:
          $ref: "#/components/schemas/UserRef"
    SessionInfo:
      type: object
      properties:
        buildInfo:
          $ref: "#/components/schemas/BuildInfo"
        nodeName:
          type: string
        userRef:
          $ref: "#/components/schemas/UserRef"
    SessionKeySchema:
      type: object
      properties:
        hashLength:
          type: string
          enum:
          - INTEGER
          - LONG
        keyType:
          type: string
          enum:
          - BOOLEAN
          - BYTE
          - SHORT
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - STRING
          - UID_LOOKUP
          - HASH_LOOKUP
          - VARIABLE
          - TAGS
        temporalPrecision:
          type: string
          enum:
          - DAY
          - HOUR
          - MINUTE
          - SECOND
          - MILLISECOND
          - NANOSECOND
    SessionListResponse:
      type: object
      properties:
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/SessionDetails"
    SessionSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          condense:
            $ref: "#/components/schemas/DurationSetting"
          keySchema:
            $ref: "#/components/schemas/SessionKeySchema"
    SetAllPermissionsFrom:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          sourceDocRef:
            $ref: "#/components/schemas/DocRef"
    SetDocumentUserCreatePermissions:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          documentTypes:
            type: array
            items:
              type: string
            uniqueItems: true
          userRef:
            $ref: "#/components/schemas/UserRef"
    SetPermission:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
      - type: object
        properties:
          permission:
            type: string
            enum:
            - OWNER
            - DELETE
            - EDIT
            - VIEW
            - USE
          userRef:
            $ref: "#/components/schemas/UserRef"
    SetTag:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          tag:
            $ref: "#/components/schemas/AnnotationTag"
    SharedElementData:
      type: object
      properties:
        formatInput:
          type: boolean
        formatOutput:
          type: boolean
        indicators:
          $ref: "#/components/schemas/Indicators"
        input:
          type: string
        output:
          type: string
    SharedStepData:
      type: object
      properties:
        elementMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SharedElementData"
        sourceLocation:
          $ref: "#/components/schemas/SourceLocation"
    SimpleDuration:
      type: object
      properties:
        time:
          type: integer
          format: int64
        timeUnit:
          type: string
          enum:
          - NANOSECONDS
          - MILLISECONDS
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
    SingleAnnotationChangeRequest:
      type: object
      properties:
        annotationRef:
          $ref: "#/components/schemas/DocRef"
        change:
          $ref: "#/components/schemas/AbstractAnnotationChange"
    SingleDocumentPermissionChangeRequest:
      type: object
      properties:
        change:
          $ref: "#/components/schemas/AbstractDocumentPermissionsChange"
        docRef:
          $ref: "#/components/schemas/DocRef"
    SingletonAppPermissionSet:
      type: object
      allOf:
      - $ref: "#/components/schemas/AppPermissionSet"
      - type: object
        properties:
          appPermission:
            type: string
            enum:
            - ADMINISTRATOR
            - ANNOTATIONS
            - MANAGE_CACHE_PERMISSION
            - VIEW_DATA_PERMISSION
            - VIEW_DATA_WITH_PIPELINE_PERMISSION
            - DELETE_DATA_PERMISSION
            - IMPORT_DATA_PERMISSION
            - EXPORT_DATA_PERMISSION
            - MANAGE_USERS_PERMISSION
            - CHANGE_OWNER_PERMISSION
            - STEPPING_PERMISSION
            - MANAGE_PROCESSORS_PERMISSION
            - MANAGE_TASKS_PERMISSION
            - DOWNLOAD_SEARCH_RESULTS_PERMISSION
            - MANAGE_API_KEYS
            - MANAGE_CONTENT_TEMPLATES_PERMISSION
            - MANAGE_DATA_RECEIPT_RULES_PERMISSION
            - MANAGE_JOBS_PERMISSION
            - MANAGE_PROPERTIES_PERMISSION
            - MANAGE_POLICIES_PERMISSION
            - MANAGE_NODES_PERMISSION
            - MANAGE_INDEX_SHARDS_PERMISSION
            - MANAGE_VOLUMES_PERMISSION
            - MANAGE_DB_PERMISSION
            - IMPORT_CONFIGURATION
            - EXPORT_CONFIGURATION
            - VIEW_SYSTEM_INFO_PERMISSION
            - CHECK_RECEIPT_STATUS
            - FETCH_HASHED_RECEIPT_POLICY_RULES
            - VERIFY_API_KEY
            - STROOM_PROXY
    Size:
      type: object
      properties:
        height:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
    SnapshotRequest:
      type: object
      properties:
        currentSnapshotTime:
          type: integer
          format: int64
        effectiveTime:
          type: integer
          format: int64
        planBDocRef:
          $ref: "#/components/schemas/DocRef"
    SnapshotSettings:
      type: object
      properties:
        useSnapshotsForGet:
          type: boolean
        useSnapshotsForLookup:
          type: boolean
        useSnapshotsForQuery:
          type: boolean
    SolrConnectionConfig:
      type: object
      properties:
        instanceType:
          type: string
          enum:
          - SINGLE_NOOE
          - SOLR_CLOUD
        solrUrls:
          type: array
          items:
            type: string
        useZk:
          type: boolean
        zkHosts:
          type: array
          items:
            type: string
        zkPath:
          type: string
    SolrConnectionTestResponse:
      type: object
      properties:
        message:
          type: string
        ok:
          type: boolean
    SolrIndexDoc:
      type: object
      properties:
        collection:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        defaultExtractionPipeline:
          $ref: "#/components/schemas/DocRef"
        deletedFields:
          type: array
          items:
            $ref: "#/components/schemas/SolrIndexField"
        description:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/SolrIndexField"
        name:
          type: string
        retentionExpression:
          $ref: "#/components/schemas/ExpressionOperator"
        solrConnectionConfig:
          $ref: "#/components/schemas/SolrConnectionConfig"
        solrSynchState:
          $ref: "#/components/schemas/SolrSynchState"
        timeField:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    SolrIndexField:
      type: object
      properties:
        defaultValue:
          type: string
        docValues:
          type: boolean
        fieldName:
          type: string
        fieldType:
          type: string
        fieldUse:
          type: string
          enum:
          - ID
          - BOOLEAN_FIELD
          - INTEGER_FIELD
          - LONG_FIELD
          - FLOAT_FIELD
          - DOUBLE_FIELD
          - DATE_FIELD
          - FIELD
          - NUMERIC_FIELD
        fldName:
          type: string
        fldType:
          type: string
          enum:
          - ID
          - BOOLEAN
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - DATE
          - TEXT
          - KEYWORD
          - IPV4_ADDRESS
          - DOC_REF
          - USER_REF
        indexed:
          type: boolean
        multiValued:
          type: boolean
        nativeType:
          type: string
        omitNorms:
          type: boolean
        omitPositions:
          type: boolean
        omitTermFreqAndPositions:
          type: boolean
        required:
          type: boolean
        sortMissingFirst:
          type: boolean
        sortMissingLast:
          type: boolean
        stored:
          type: boolean
        termOffsets:
          type: boolean
        termPayloads:
          type: boolean
        termPositions:
          type: boolean
        termVectors:
          type: boolean
        uninvertible:
          type: boolean
    SolrSynchState:
      type: object
      properties:
        lastSynchronized:
          type: integer
          format: int64
        messages:
          type: array
          items:
            type: string
    Sort:
      type: object
      description: Describes the sorting applied to a field
      properties:
        direction:
          type: string
          description: "The direction to sort in, ASCENDING or DESCENDING"
          enum:
          - ASCENDING
          - DESCENDING
          example: ASCENDING
        order:
          type: integer
          format: int32
          description: "Where multiple fields are sorted this value describes the\
            \ sort order, with 0 being the first field to sort on"
          example: 0
      required:
      - direction
      - order
    SourceConfig:
      type: object
      properties:
        maxCharactersInPreviewFetch:
          type: integer
          format: int64
          minimum: 1
        maxCharactersPerFetch:
          type: integer
          format: int64
          minimum: 1
        maxCharactersToCompleteLine:
          type: integer
          format: int64
          minimum: 0
        maxHexDumpLines:
          type: integer
          format: int32
          minimum: 1
    SourceLocation:
      type: object
      properties:
        childType:
          type: string
        dataRange:
          $ref: "#/components/schemas/DataRange"
        highlights:
          type: array
          items:
            $ref: "#/components/schemas/DataRange"
        metaId:
          type: integer
          format: int64
        partIndex:
          type: integer
          format: int64
        recordIndex:
          type: integer
          format: int64
    SplashConfig:
      type: object
      properties:
        body:
          type: string
        enabled:
          type: boolean
        title:
          type: string
        version:
          type: string
    SplitLayoutConfig:
      type: object
      allOf:
      - $ref: "#/components/schemas/LayoutConfig"
      - type: object
        properties:
          children:
            type: array
            items:
              $ref: "#/components/schemas/LayoutConfig"
          dimension:
            type: integer
            format: int32
    State:
      type: object
      allOf:
      - $ref: "#/components/schemas/PlanBValue"
      - type: object
        properties:
          key:
            $ref: "#/components/schemas/KeyPrefix"
          value:
            $ref: "#/components/schemas/Val"
    StateDoc:
      type: object
      properties:
        condense:
          type: boolean
        condenseAge:
          type: integer
          format: int32
        condenseTimeUnit:
          type: string
          enum:
          - NANOSECONDS
          - MILLISECONDS
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        name:
          type: string
        retainAge:
          type: integer
          format: int32
        retainForever:
          type: boolean
        retainTimeUnit:
          type: string
          enum:
          - NANOSECONDS
          - MILLISECONDS
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
        scyllaDbRef:
          $ref: "#/components/schemas/DocRef"
        stateType:
          type: string
          enum:
          - STATE
          - TEMPORAL_STATE
          - RANGED_STATE
          - TEMPORAL_RANGED_STATE
          - SESSION
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    StateKeySchema:
      type: object
      properties:
        hashLength:
          type: string
          enum:
          - INTEGER
          - LONG
        keyType:
          type: string
          enum:
          - BOOLEAN
          - BYTE
          - SHORT
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - STRING
          - UID_LOOKUP
          - HASH_LOOKUP
          - VARIABLE
          - TAGS
    StateSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          keySchema:
            $ref: "#/components/schemas/StateKeySchema"
          valueSchema:
            $ref: "#/components/schemas/StateValueSchema"
    StateValueSchema:
      type: object
      properties:
        hashLength:
          type: string
          enum:
          - INTEGER
          - LONG
        stateValueType:
          type: string
          enum:
          - BOOLEAN
          - BYTE
          - SHORT
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - STRING
          - UID_LOOKUP
          - HASH_LOOKUP
          - VARIABLE
    StatisticField:
      type: object
      properties:
        fieldName:
          type: string
    StatisticStoreDoc:
      type: object
      properties:
        config:
          $ref: "#/components/schemas/StatisticsDataSourceData"
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        precision:
          type: integer
          format: int64
        rollUpType:
          type: string
          enum:
          - NONE
          - ALL
          - CUSTOM
        statisticType:
          type: string
          enum:
          - COUNT
          - VALUE
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    StatisticsDataSourceData:
      type: object
      properties:
        customRollUpMasks:
          type: array
          items:
            $ref: "#/components/schemas/CustomRollUpMask"
          uniqueItems: true
        fields:
          type: array
          items:
            $ref: "#/components/schemas/StatisticField"
    StatisticsDataSourceFieldChangeRequest:
      type: object
      properties:
        newStatisticsDataSourceData:
          $ref: "#/components/schemas/StatisticsDataSourceData"
        oldStatisticsDataSourceData:
          $ref: "#/components/schemas/StatisticsDataSourceData"
    StepLocation:
      type: object
      properties:
        metaId:
          type: integer
          format: int64
        partIndex:
          type: integer
          format: int64
        recordIndex:
          type: integer
          format: int64
    SteppingFilterSettings:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/XPathFilter"
        skipToOutput:
          type: string
          enum:
          - NOT_EMPTY
          - EMPTY
        skipToSeverity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    SteppingResult:
      type: object
      properties:
        complete:
          type: boolean
        currentStreamOffset:
          type: integer
          format: int32
        foundLocation:
          $ref: "#/components/schemas/StepLocation"
        foundRecord:
          type: boolean
        generalErrors:
          type: array
          items:
            type: string
          uniqueItems: true
        progressLocation:
          $ref: "#/components/schemas/StepLocation"
        segmentedData:
          type: boolean
        sessionUuid:
          type: string
        stepData:
          $ref: "#/components/schemas/SharedStepData"
        stepFilterMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SteppingFilterSettings"
    StoredError:
      type: object
      properties:
        elementId:
          $ref: "#/components/schemas/ElementId"
        errorType:
          type: string
          enum:
          - CODE
          - GENERIC
          - INPUT
          - OUTPUT
          - UNKNOWN
        location:
          $ref: "#/components/schemas/Location"
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    StoredQuery:
      type: object
      properties:
        componentId:
          type: string
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dashboardUuid:
          type: string
        favourite:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        owner:
          $ref: "#/components/schemas/UserRef"
        query:
          $ref: "#/components/schemas/Query"
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
    StreamLocation:
      type: object
      allOf:
      - $ref: "#/components/schemas/Location"
      - type: object
        properties:
          partIndex:
            type: integer
            format: int64
    StreamingAnalyticProcessConfig:
      type: object
      allOf:
      - $ref: "#/components/schemas/AnalyticProcessConfig"
      - type: object
        properties:
          errorFeed:
            $ref: "#/components/schemas/DocRef"
    StreamingAnalyticTrackerData:
      type: object
      allOf:
      - $ref: "#/components/schemas/AnalyticTrackerData"
      - type: object
        properties:
          lastExecutionTimeMs:
            type: integer
            format: int64
          lastStreamCount:
            type: integer
            format: int32
          lastStreamId:
            type: integer
            format: int64
          totalEventCount:
            type: integer
            format: int64
          totalStreamCount:
            type: integer
            format: int64
    StringCriteria:
      type: object
      properties:
        caseInsensitive:
          type: boolean
        matchNull:
          type: boolean
        matchStyle:
          type: string
          enum:
          - Wild
          - WildStart
          - WildEnd
          - WildStartAndEnd
        string:
          type: string
        stringUpper:
          type: string
    StringEntryValue:
      type: object
      allOf:
      - $ref: "#/components/schemas/EntryValue"
      - type: object
        properties:
          value:
            type: string
    StringMatch:
      type: object
      properties:
        caseSensitive:
          type: boolean
        matchType:
          type: string
          enum:
          - ANY
          - "NULL"
          - NON_NULL
          - BLANK
          - NON_BLANK
          - EMPTY
          - NON_EMPTY
          - NULL_OR_BLANK
          - NULL_OR_EMPTY
          - CONTAINS
          - EQUALS
          - NOT_EQUALS
          - STARTS_WITH
          - ENDS_WITH
          - REGEX
          - CHARS_ANYWHERE
        pattern:
          type: string
    StringMatchLocation:
      type: object
      properties:
        length:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
    StringWrapper:
      type: object
      properties:
        string:
          type: string
    StroomStatsStoreDoc:
      type: object
      properties:
        config:
          $ref: "#/components/schemas/StroomStatsStoreEntityData"
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        precision:
          type: string
          enum:
          - SECOND
          - MINUTE
          - HOUR
          - DAY
          - FOREVER
        rollUpType:
          type: string
          enum:
          - NONE
          - ALL
          - CUSTOM
        statisticType:
          type: string
          enum:
          - COUNT
          - VALUE
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    StroomStatsStoreEntityData:
      type: object
      properties:
        customRollUpMasks:
          type: array
          items:
            $ref: "#/components/schemas/CustomRollUpMask"
          uniqueItems: true
        fields:
          type: array
          items:
            $ref: "#/components/schemas/StatisticField"
    StroomStatsStoreFieldChangeRequest:
      type: object
      properties:
        newEntityData:
          $ref: "#/components/schemas/StroomStatsStoreEntityData"
        oldEntityData:
          $ref: "#/components/schemas/StroomStatsStoreEntityData"
    Suggestions:
      type: object
      properties:
        cacheable:
          type: boolean
        list:
          type: array
          items:
            type: string
    Summary:
      type: object
      allOf:
      - $ref: "#/components/schemas/Marker"
      - type: object
        properties:
          count:
            type: integer
            format: int32
          expander:
            $ref: "#/components/schemas/Expander"
          total:
            type: integer
            format: int32
    SystemInfoResult:
      type: object
      properties:
        description:
          type: string
        details:
          type: object
          additionalProperties:
            type: object
        name:
          type: string
      required:
      - name
    SystemInfoResultList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SystemInfoResult"
    TabConfig:
      type: object
      properties:
        id:
          type: string
        visible:
          type: boolean
    TabLayoutConfig:
      type: object
      allOf:
      - $ref: "#/components/schemas/LayoutConfig"
      - type: object
        properties:
          selected:
            type: integer
            format: int32
          tabs:
            type: array
            items:
              $ref: "#/components/schemas/TabConfig"
    TableBuilderAnalyticProcessConfig:
      type: object
      allOf:
      - $ref: "#/components/schemas/AnalyticProcessConfig"
      - type: object
        properties:
          dataRetention:
            $ref: "#/components/schemas/SimpleDuration"
          enabled:
            type: boolean
          errorFeed:
            $ref: "#/components/schemas/DocRef"
          maxMetaCreateTimeMs:
            type: integer
            format: int64
          minMetaCreateTimeMs:
            type: integer
            format: int64
          node:
            type: string
          runAsUser:
            $ref: "#/components/schemas/UserRef"
          timeToWaitForData:
            $ref: "#/components/schemas/SimpleDuration"
    TableBuilderAnalyticTrackerData:
      type: object
      allOf:
      - $ref: "#/components/schemas/AnalyticTrackerData"
      - type: object
        properties:
          lastEventId:
            type: integer
            format: int64
          lastEventTime:
            type: integer
            format: int64
          lastExecutionTimeMs:
            type: integer
            format: int64
          lastStreamCount:
            type: integer
            format: int32
          lastStreamId:
            type: integer
            format: int64
          lastWindowEndTimeMs:
            type: integer
            format: int64
          lastWindowStartTimeMs:
            type: integer
            format: int64
          totalEventCount:
            type: integer
            format: int64
          totalStreamCount:
            type: integer
            format: int64
    TableComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          applyValueFilters:
            type: boolean
          dataSourceRef:
            $ref: "#/components/schemas/DocRef"
          extractValues:
            type: boolean
            description: TODO
          extractionPipeline:
            $ref: "#/components/schemas/DocRef"
          fields:
            type: array
            items:
              $ref: "#/components/schemas/Column"
          maxResults:
            type: array
            description: "Defines the maximum number of results to return at each\
              \ grouping level, e.g. '1000,10,1' means 1000 results at group level\
              \ 0, 10 at level 1 and 1 at level 2. In the absence of this field system\
              \ defaults will apply"
            example: "1000,10,1"
            items:
              type: integer
              format: int64
              description: "Defines the maximum number of results to return at each\
                \ grouping level, e.g. '1000,10,1' means 1000 results at group level\
                \ 0, 10 at level 1 and 1 at level 2. In the absence of this field\
                \ system defaults will apply"
          pageSize:
            type: integer
            format: int32
            description: Defines the maximum number of rows to display in the table
              at once (default 100).
            example: 100
          queryId:
            type: string
            description: TODO
          selectionHandlers:
            type: array
            items:
              $ref: "#/components/schemas/ComponentSelectionHandler"
          showDetail:
            type: boolean
          useDefaultExtractionPipeline:
            type: boolean
    TableCoprocessorSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/CoprocessorSettings"
      - type: object
        properties:
          componentIds:
            type: array
            items:
              type: string
          tableSettings:
            $ref: "#/components/schemas/TableSettings"
    TableResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/Result"
      - type: object
        properties:
          fields:
            type: array
            items:
              $ref: "#/components/schemas/Column"
          resultRange:
            $ref: "#/components/schemas/OffsetRange"
          rows:
            type: array
            items:
              $ref: "#/components/schemas/Row"
          totalResults:
            type: integer
            format: int64
      description: Object for describing a set of results in a table form that supports
        grouped data
      required:
      - componentId
      - fields
      - resultRange
      - rows
    TableResultRequest:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentResultRequest"
      - type: object
        properties:
          groupSelection:
            $ref: "#/components/schemas/GroupSelection"
          openGroups:
            type: array
            items:
              type: string
            uniqueItems: true
          requestedRange:
            $ref: "#/components/schemas/OffsetRange"
          tableName:
            type: string
          tableSettings:
            $ref: "#/components/schemas/TableSettings"
      required:
      - componentId
    TableSettings:
      type: object
      description: "An object to describe how the query results should be returned,\
        \ including which fields should be included and what sorting, grouping, filtering,\
        \ limiting, etc. should be applied"
      properties:
        aggregateFilter:
          $ref: "#/components/schemas/ExpressionOperator"
        applyValueFilters:
          type: boolean
        extractValues:
          type: boolean
        extractionPipeline:
          $ref: "#/components/schemas/DocRef"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/Column"
        maxResults:
          type: array
          description: "Defines the maximum number of results to return at each grouping\
            \ level, e.g. '1000,10,1' means 1000 results at group level 0, 10 at level\
            \ 1 and 1 at level 2. In the absence of this field system defaults will\
            \ apply"
          example: "1000,10,1"
          items:
            type: integer
            format: int64
            description: "Defines the maximum number of results to return at each\
              \ grouping level, e.g. '1000,10,1' means 1000 results at group level\
              \ 0, 10 at level 1 and 1 at level 2. In the absence of this field system\
              \ defaults will apply"
        queryId:
          type: string
          description: TODO
        showDetail:
          type: boolean
          description: When grouping is used a value of true indicates that the results
            will include the full detail of any results aggregated into a group as
            well as their aggregates. A value of false will only include the aggregated
            values for each group. Defaults to false.
        valueFilter:
          $ref: "#/components/schemas/ExpressionOperator"
        visSettings:
          $ref: "#/components/schemas/QLVisSettings"
        window:
          $ref: "#/components/schemas/Window"
    Tag:
      type: object
      properties:
        tagName:
          type: string
        tagValue:
          $ref: "#/components/schemas/Val"
    TaskId:
      type: object
      properties:
        id:
          type: string
        parentId:
          $ref: "#/components/schemas/TaskId"
    TaskProgress:
      type: object
      properties:
        expander:
          $ref: "#/components/schemas/Expander"
        filterMatchState:
          type: string
          enum:
          - MATCHED
          - NOT_MATCHED
        id:
          $ref: "#/components/schemas/TaskId"
        nodeName:
          type: string
        submitTimeMs:
          type: integer
          format: int64
        taskInfo:
          type: string
        taskName:
          type: string
        threadName:
          type: string
        timeNowMs:
          type: integer
          format: int64
        userRef:
          $ref: "#/components/schemas/UserRef"
    TaskProgressResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        pageResponse:
          $ref: "#/components/schemas/PageResponse"
        values:
          type: array
          items:
            $ref: "#/components/schemas/TaskProgress"
    TemporalKey:
      type: object
      properties:
        prefix:
          $ref: "#/components/schemas/KeyPrefix"
        time:
          type: string
          format: date-time
    TemporalRangeKeySchema:
      type: object
      properties:
        rangeType:
          type: string
          enum:
          - BYTE
          - SHORT
          - INT
          - LONG
        temporalPrecision:
          type: string
          enum:
          - DAY
          - HOUR
          - MINUTE
          - SECOND
          - MILLISECOND
          - NANOSECOND
    TemporalRangeState:
      type: object
      allOf:
      - $ref: "#/components/schemas/PlanBValue"
      - type: object
        properties:
          key:
            $ref: "#/components/schemas/Key"
          value:
            $ref: "#/components/schemas/Val"
    TemporalRangeStateSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          condense:
            $ref: "#/components/schemas/DurationSetting"
          keySchema:
            $ref: "#/components/schemas/TemporalRangeKeySchema"
          valueSchema:
            $ref: "#/components/schemas/StateValueSchema"
    TemporalState:
      type: object
      allOf:
      - $ref: "#/components/schemas/PlanBValue"
      - type: object
        properties:
          key:
            $ref: "#/components/schemas/TemporalKey"
          value:
            $ref: "#/components/schemas/Val"
    TemporalStateKeySchema:
      type: object
      properties:
        hashLength:
          type: string
          enum:
          - INTEGER
          - LONG
        keyType:
          type: string
          enum:
          - BOOLEAN
          - BYTE
          - SHORT
          - INT
          - LONG
          - FLOAT
          - DOUBLE
          - STRING
          - UID_LOOKUP
          - HASH_LOOKUP
          - VARIABLE
          - TAGS
        temporalPrecision:
          type: string
          enum:
          - DAY
          - HOUR
          - MINUTE
          - SECOND
          - MILLISECOND
          - NANOSECOND
    TemporalStateSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractPlanBSettings"
      - type: object
        properties:
          condense:
            $ref: "#/components/schemas/DurationSetting"
          keySchema:
            $ref: "#/components/schemas/TemporalStateKeySchema"
          valueSchema:
            $ref: "#/components/schemas/StateValueSchema"
    TemporalValue:
      type: object
      allOf:
      - $ref: "#/components/schemas/PlanBValue"
      - type: object
        properties:
          key:
            $ref: "#/components/schemas/TemporalKey"
          value:
            type: integer
            format: int64
    TerminateTaskProgressRequest:
      type: object
      properties:
        criteria:
          $ref: "#/components/schemas/FindTaskCriteria"
    TextAttributes:
      type: object
      properties:
        bold:
          type: boolean
        italic:
          type: boolean
    TextComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          colFromField:
            $ref: "#/components/schemas/ColumnRef"
          colToField:
            $ref: "#/components/schemas/ColumnRef"
          lineFromField:
            $ref: "#/components/schemas/ColumnRef"
          lineToField:
            $ref: "#/components/schemas/ColumnRef"
          modelVersion:
            type: string
          partNoField:
            $ref: "#/components/schemas/ColumnRef"
          pipeline:
            $ref: "#/components/schemas/DocRef"
          recordNoField:
            $ref: "#/components/schemas/ColumnRef"
          showAsHtml:
            type: boolean
          showStepping:
            type: boolean
          streamIdField:
            $ref: "#/components/schemas/ColumnRef"
          tableId:
            type: string
    TextConverterDoc:
      type: object
      properties:
        converterType:
          type: string
          enum:
          - NONE
          - DATA_SPLITTER
          - XML_FRAGMENT
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    TextInputComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          key:
            type: string
          value:
            type: string
    ThemeConfig:
      type: object
      properties:
        labelColours:
          type: string
        pageBorder:
          type: string
        selectedTabColour:
          type: string
    TimeFilter:
      type: object
      description: If the data includes time in the key then you can apply a time
        filter when retrieving rows
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
    TimeRange:
      type: object
      properties:
        condition:
          type: string
          enum:
          - CONTAINS
          - EQUALS
          - STARTS_WITH
          - ENDS_WITH
          - NOT_EQUALS
          - GREATER_THAN
          - GREATER_THAN_OR_EQUAL_TO
          - LESS_THAN
          - LESS_THAN_OR_EQUAL_TO
          - BETWEEN
          - IN
          - IN_DICTIONARY
          - IN_FOLDER
          - IS_DOC_REF
          - IS_USER_REF
          - IS_NULL
          - IS_NOT_NULL
          - MATCHES_REGEX
          - WORD_BOUNDARY
          - CONTAINS_CASE_SENSITIVE
          - EQUALS_CASE_SENSITIVE
          - NOT_EQUALS_CASE_SENSITIVE
          - STARTS_WITH_CASE_SENSITIVE
          - ENDS_WITH_CASE_SENSITIVE
          - MATCHES_REGEX_CASE_SENSITIVE
          - OF_DOC_REF
          - USER_HAS_PERM
          - USER_HAS_OWNER
          - USER_HAS_DELETE
          - USER_HAS_EDIT
          - USER_HAS_VIEW
          - USER_HAS_USE
        from:
          type: string
        name:
          type: string
        to:
          type: string
    TokenError:
      type: object
      properties:
        from:
          $ref: "#/components/schemas/DefaultLocation"
        text:
          type: string
        to:
          $ref: "#/components/schemas/DefaultLocation"
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
          format: int64
        id_token:
          type: string
        refresh_expires_in:
          type: integer
          format: int64
        refresh_token:
          type: string
        refresh_token_expires_in:
          type: integer
          format: int64
        token_type:
          type: string
    UiConfig:
      type: object
      properties:
        aboutHtml:
          type: string
        activity:
          $ref: "#/components/schemas/ActivityConfig"
        analyticUiDefaultConfig:
          $ref: "#/components/schemas/AnalyticUiDefaultConfig"
        authErrorMessage:
          type: string
        defaultApiKeyHashAlgorithm:
          type: string
          enum:
          - SHA3_256
          - SHA2_256
          - BCRYPT
          - ARGON_2
          - SHA2_512
        defaultMaxResults:
          type: string
        helpSubPathDocumentation:
          type: string
        helpSubPathExpressions:
          type: string
        helpSubPathJobs:
          type: string
        helpSubPathProperties:
          type: string
        helpSubPathQuickFilter:
          type: string
        helpSubPathStroomQueryLanguage:
          type: string
        helpUrl:
          type: string
        htmlTitle:
          type: string
        maintenanceMessage:
          type: string
        maxEditorCompletionEntries:
          type: integer
          format: int32
        namePattern:
          type: string
        nestedIndexFieldsDelimiterPattern:
          type: string
        nodeMonitoring:
          $ref: "#/components/schemas/NodeMonitoringConfig"
        oncontextmenu:
          type: string
          pattern: ^return (true|false);$
        process:
          $ref: "#/components/schemas/ProcessConfig"
        query:
          $ref: "#/components/schemas/QueryConfig"
        referencePipelineSelectorIncludedTags:
          type: array
          items:
            type: string
          uniqueItems: true
        reportUiDefaultConfig:
          $ref: "#/components/schemas/ReportUiDefaultConfig"
        source:
          $ref: "#/components/schemas/SourceConfig"
        splash:
          $ref: "#/components/schemas/SplashConfig"
        theme:
          $ref: "#/components/schemas/ThemeConfig"
        welcomeHtml:
          type: string
    UnlinkAnnotations:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          annotations:
            type: array
            items:
              type: integer
              format: int64
    UnlinkEvents:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractAnnotationChange"
      - type: object
        properties:
          events:
            type: array
            items:
              $ref: "#/components/schemas/EventId"
    UpdateAccountRequest:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        confirmPassword:
          type: string
        password:
          type: string
    UpdateField:
      type: object
      properties:
        fieldName:
          type: string
        indexDocRef:
          $ref: "#/components/schemas/DocRef"
        indexField:
          $ref: "#/components/schemas/IndexFieldImpl"
    UpdateStatusRequest:
      type: object
      properties:
        criteria:
          $ref: "#/components/schemas/FindMetaCriteria"
        currentStatus:
          type: string
          enum:
          - UNLOCKED
          - LOCKED
          - DELETED
        newStatus:
          type: string
          enum:
          - UNLOCKED
          - LOCKED
          - DELETED
    UpdateStoreRequest:
      type: object
      properties:
        queryKey:
          $ref: "#/components/schemas/QueryKey"
        searchProcessLifespan:
          $ref: "#/components/schemas/LifespanInfo"
        storeLifespan:
          $ref: "#/components/schemas/LifespanInfo"
    UploadDataRequest:
      type: object
      properties:
        effectiveMs:
          type: integer
          format: int64
        feedName:
          type: string
        fileName:
          type: string
        key:
          $ref: "#/components/schemas/ResourceKey"
        metaData:
          type: string
        streamTypeName:
          type: string
    UrlResponse:
      type: object
      properties:
        url:
          type: string
    User:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        displayName:
          type: string
        enabled:
          type: boolean
        fullName:
          type: string
        group:
          type: boolean
        id:
          type: integer
          format: int32
        subjectId:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: integer
          format: int32
    UserDependency:
      type: object
      properties:
        details:
          type: string
        docRef:
          $ref: "#/components/schemas/DocRef"
        userRef:
          $ref: "#/components/schemas/UserRef"
    UserDesc:
      type: object
      properties:
        displayName:
          type: string
        fullName:
          type: string
        subjectId:
          type: string
    UserInfo:
      type: object
      properties:
        deleted:
          type: boolean
        displayName:
          type: string
        enabled:
          type: boolean
        fullName:
          type: string
        group:
          type: boolean
        subjectId:
          type: string
        uuid:
          type: string
    UserPreferences:
      type: object
      properties:
        dateTimePattern:
          type: string
          description: A date time formatting pattern string conforming to the specification
            of java.time.format.DateTimeFormatter
        density:
          type: string
        editorKeyBindings:
          type: string
          enum:
          - STANDARD
          - VIM
        editorLiveAutoCompletion:
          type: string
          enum:
          - "ON"
          - "OFF"
        editorTheme:
          type: string
        enableTransparency:
          type: boolean
        font:
          type: string
        fontSize:
          type: string
        hideConditionalStyles:
          type: boolean
        theme:
          type: string
        timeZone:
          $ref: "#/components/schemas/UserTimeZone"
    UserRef:
      type: object
      properties:
        displayName:
          type: string
        enabled:
          type: boolean
        fullName:
          type: string
        group:
          type: boolean
        subjectId:
          type: string
        uuid:
          type: string
    UserRefEntryValue:
      type: object
      allOf:
      - $ref: "#/components/schemas/EntryValue"
      - type: object
        properties:
          userRef:
            $ref: "#/components/schemas/UserRef"
    UserTimeZone:
      type: object
      description: The timezone to apply to a date time value
      properties:
        id:
          type: string
          description: "The id of the time zone, conforming to java.time.ZoneId"
          example: GMT
        offsetHours:
          type: integer
          format: int32
          description: The number of hours this timezone is offset from UTC
          example: -1
        offsetMinutes:
          type: integer
          format: int32
          description: The number of minutes this timezone is offset from UTC
          example: -30
        use:
          type: string
          description: "How the time zone will be specified, e.g. from provided client\
            \ 'Local' time, 'UTC', a recognised timezone 'Id' or an 'Offset' from\
            \ UTC in hours and minutes."
          enum:
          - Local
          - UTC
          - Id
          - Offset
      required:
      - use
    Val:
      type: object
    ValidateExpressionRequest:
      type: object
      properties:
        dateTimeSettings:
          $ref: "#/components/schemas/DateTimeSettings"
        expressionItem:
          $ref: "#/components/schemas/ExpressionItem"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/QueryField"
    ValidateExpressionResult:
      type: object
      properties:
        groupBy:
          type: boolean
        ok:
          type: boolean
        string:
          type: string
    ValidateSessionResponse:
      type: object
      properties:
        redirectUri:
          type: string
        userId:
          type: string
        valid:
          type: boolean
    ValidationResult:
      type: object
      properties:
        message:
          type: string
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL
    VerifyApiKeyRequest:
      type: object
      properties:
        apiKey:
          type: string
        requiredAppPermissions:
          $ref: "#/components/schemas/AppPermissionSet"
    ViewDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        dataSource:
          $ref: "#/components/schemas/DocRef"
        description:
          type: string
        filter:
          $ref: "#/components/schemas/ExpressionOperator"
        name:
          type: string
        pipeline:
          $ref: "#/components/schemas/DocRef"
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    VisComponentSettings:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentSettings"
      - type: object
        properties:
          json:
            type: string
          tableId:
            type: string
          visualisation:
            $ref: "#/components/schemas/DocRef"
    VisResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/Result"
      - type: object
        properties:
          dataPoints:
            type: integer
            format: int64
          jsonData:
            type: string
      required:
      - componentId
    VisResultRequest:
      type: object
      allOf:
      - $ref: "#/components/schemas/ComponentResultRequest"
      - type: object
        properties:
          json:
            type: string
          requestedRange:
            $ref: "#/components/schemas/OffsetRange"
          tableSettings:
            $ref: "#/components/schemas/TableSettings"
          visualisation:
            $ref: "#/components/schemas/DocRef"
      required:
      - componentId
    VisualisationDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        description:
          type: string
        functionName:
          type: string
        name:
          type: string
        scriptRef:
          $ref: "#/components/schemas/DocRef"
        settings:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    Welcome:
      type: object
      properties:
        html:
          type: string
    Window:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
      required:
      - type
    Word:
      type: object
      properties:
        additionalSourceUuids:
          type: array
          items:
            type: string
        sourceUuid:
          type: string
        word:
          type: string
    WordList:
      type: object
      properties:
        sourceUuidToDocRefMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DocRef"
        wordList:
          type: array
          items:
            $ref: "#/components/schemas/Word"
    XPathFilter:
      type: object
      properties:
        ignoreCase:
          type: boolean
        matchType:
          type: string
          enum:
          - EXISTS
          - CONTAINS
          - EQUALS
          - NOT_EQUALS
          - UNIQUE
        path:
          type: string
        uniqueValues:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Rec"
        value:
          type: string
    XmlSchemaDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        deprecated:
          type: boolean
        description:
          type: string
        name:
          type: string
        namespaceURI:
          type: string
        schemaGroup:
          type: string
        systemId:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
    XsltDoc:
      type: object
      properties:
        createTimeMs:
          type: integer
          format: int64
        createUser:
          type: string
        data:
          type: string
        description:
          type: string
        name:
          type: string
        type:
          type: string
        updateTimeMs:
          type: integer
          format: int64
        updateUser:
          type: string
        uuid:
          type: string
        version:
          type: string
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
