/*
 * This file is generated by jOOQ.
 */
package stroom.data.store.impl.fs.db.jooq.tables;


import stroom.data.store.impl.fs.db.jooq.Keys;
import stroom.data.store.impl.fs.db.jooq.Stroom;
import stroom.data.store.impl.fs.db.jooq.tables.records.FsMetaVolumeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FsMetaVolume extends TableImpl<FsMetaVolumeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.fs_meta_volume</code>
     */
    public static final FsMetaVolume FS_META_VOLUME = new FsMetaVolume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FsMetaVolumeRecord> getRecordType() {
        return FsMetaVolumeRecord.class;
    }

    /**
     * The column <code>stroom.fs_meta_volume.meta_id</code>.
     */
    public final TableField<FsMetaVolumeRecord, Long> META_ID = createField(DSL.name("meta_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.fs_meta_volume.fs_volume_id</code>.
     */
    public final TableField<FsMetaVolumeRecord, Integer> FS_VOLUME_ID = createField(DSL.name("fs_volume_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private FsMetaVolume(Name alias, Table<FsMetaVolumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private FsMetaVolume(Name alias, Table<FsMetaVolumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.fs_meta_volume</code> table reference
     */
    public FsMetaVolume(String alias) {
        this(DSL.name(alias), FS_META_VOLUME);
    }

    /**
     * Create an aliased <code>stroom.fs_meta_volume</code> table reference
     */
    public FsMetaVolume(Name alias) {
        this(alias, FS_META_VOLUME);
    }

    /**
     * Create a <code>stroom.fs_meta_volume</code> table reference
     */
    public FsMetaVolume() {
        this(DSL.name("fs_meta_volume"), null);
    }

    public <O extends Record> FsMetaVolume(Table<O> child, ForeignKey<O, FsMetaVolumeRecord> key) {
        super(child, key, FS_META_VOLUME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public UniqueKey<FsMetaVolumeRecord> getPrimaryKey() {
        return Keys.KEY_FS_META_VOLUME_PRIMARY;
    }

    @Override
    public FsMetaVolume as(String alias) {
        return new FsMetaVolume(DSL.name(alias), this);
    }

    @Override
    public FsMetaVolume as(Name alias) {
        return new FsMetaVolume(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FsMetaVolume rename(String name) {
        return new FsMetaVolume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FsMetaVolume rename(Name name) {
        return new FsMetaVolume(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
