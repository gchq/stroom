/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.jooq.tables;


import stroom.index.impl.db.jooq.Keys;
import stroom.index.impl.db.jooq.Stroom;
import stroom.index.impl.db.jooq.tables.records.IndexVolumeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class IndexVolume extends TableImpl<IndexVolumeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.index_volume</code>
     */
    public static final IndexVolume INDEX_VOLUME = new IndexVolume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndexVolumeRecord> getRecordType() {
        return IndexVolumeRecord.class;
    }

    /**
     * The column <code>stroom.index_volume.id</code>.
     */
    public final TableField<IndexVolumeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.index_volume.version</code>.
     */
    public final TableField<IndexVolumeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.index_volume.create_time_ms</code>.
     */
    public final TableField<IndexVolumeRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.index_volume.create_user</code>.
     */
    public final TableField<IndexVolumeRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.index_volume.update_time_ms</code>.
     */
    public final TableField<IndexVolumeRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.index_volume.update_user</code>.
     */
    public final TableField<IndexVolumeRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.index_volume.node_name</code>.
     */
    public final TableField<IndexVolumeRecord, String> NODE_NAME = createField(DSL.name("node_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.index_volume.path</code>.
     */
    public final TableField<IndexVolumeRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.index_volume.fk_index_volume_group_id</code>.
     */
    public final TableField<IndexVolumeRecord, Integer> FK_INDEX_VOLUME_GROUP_ID = createField(DSL.name("fk_index_volume_group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.index_volume.state</code>.
     */
    public final TableField<IndexVolumeRecord, Byte> STATE = createField(DSL.name("state"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>stroom.index_volume.bytes_limit</code>.
     */
    public final TableField<IndexVolumeRecord, Long> BYTES_LIMIT = createField(DSL.name("bytes_limit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.index_volume.bytes_used</code>.
     */
    public final TableField<IndexVolumeRecord, Long> BYTES_USED = createField(DSL.name("bytes_used"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.index_volume.bytes_free</code>.
     */
    public final TableField<IndexVolumeRecord, Long> BYTES_FREE = createField(DSL.name("bytes_free"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.index_volume.bytes_total</code>.
     */
    public final TableField<IndexVolumeRecord, Long> BYTES_TOTAL = createField(DSL.name("bytes_total"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>stroom.index_volume.status_ms</code>.
     */
    public final TableField<IndexVolumeRecord, Long> STATUS_MS = createField(DSL.name("status_ms"), SQLDataType.BIGINT, this, "");

    private IndexVolume(Name alias, Table<IndexVolumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndexVolume(Name alias, Table<IndexVolumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.index_volume</code> table reference
     */
    public IndexVolume(String alias) {
        this(DSL.name(alias), INDEX_VOLUME);
    }

    /**
     * Create an aliased <code>stroom.index_volume</code> table reference
     */
    public IndexVolume(Name alias) {
        this(alias, INDEX_VOLUME);
    }

    /**
     * Create a <code>stroom.index_volume</code> table reference
     */
    public IndexVolume() {
        this(DSL.name("index_volume"), null);
    }

    public <O extends Record> IndexVolume(Table<O> child, ForeignKey<O, IndexVolumeRecord> key) {
        super(child, key, INDEX_VOLUME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<IndexVolumeRecord, Integer> getIdentity() {
        return (Identity<IndexVolumeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<IndexVolumeRecord> getPrimaryKey() {
        return Keys.KEY_INDEX_VOLUME_PRIMARY;
    }

    @Override
    public List<UniqueKey<IndexVolumeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_INDEX_VOLUME_NODE_NAME_PATH);
    }

    @Override
    public List<ForeignKey<IndexVolumeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INDEX_VOLUME_GROUP_LINK_FK_GROUP_NAME);
    }

    private transient IndexVolumeGroup _indexVolumeGroup;

    /**
     * Get the implicit join path to the <code>stroom.index_volume_group</code>
     * table.
     */
    public IndexVolumeGroup indexVolumeGroup() {
        if (_indexVolumeGroup == null)
            _indexVolumeGroup = new IndexVolumeGroup(this, Keys.INDEX_VOLUME_GROUP_LINK_FK_GROUP_NAME);

        return _indexVolumeGroup;
    }

    @Override
    public TableField<IndexVolumeRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public IndexVolume as(String alias) {
        return new IndexVolume(DSL.name(alias), this);
    }

    @Override
    public IndexVolume as(Name alias) {
        return new IndexVolume(alias, this);
    }

    @Override
    public IndexVolume as(Table<?> alias) {
        return new IndexVolume(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexVolume rename(String name) {
        return new IndexVolume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexVolume rename(Name name) {
        return new IndexVolume(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexVolume rename(Table<?> name) {
        return new IndexVolume(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, Integer, Long, String, Long, String, String, String, Integer, Byte, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Integer, ? super Integer, ? super Long, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Byte, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Integer, ? super Integer, ? super Long, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Byte, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
