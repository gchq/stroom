/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.jooq.tables.records;


import stroom.index.impl.db.jooq.tables.IndexField;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class IndexFieldRecord extends UpdatableRecordImpl<IndexFieldRecord> implements Record8<Integer, Byte, String, String, Boolean, Boolean, Boolean, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stroom.index_field.fk_index_field_source_id</code>.
     */
    public void setFkIndexFieldSourceId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.index_field.fk_index_field_source_id</code>.
     */
    public Integer getFkIndexFieldSourceId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stroom.index_field.type</code>.
     */
    public void setType(Byte value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.index_field.type</code>.
     */
    public Byte getType() {
        return (Byte) get(1);
    }

    /**
     * Setter for <code>stroom.index_field.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.index_field.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>stroom.index_field.analyzer</code>.
     */
    public void setAnalyzer(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.index_field.analyzer</code>.
     */
    public String getAnalyzer() {
        return (String) get(3);
    }

    /**
     * Setter for <code>stroom.index_field.indexed</code>.
     */
    public void setIndexed(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>stroom.index_field.indexed</code>.
     */
    public Boolean getIndexed() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>stroom.index_field.stored</code>.
     */
    public void setStored(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>stroom.index_field.stored</code>.
     */
    public Boolean getStored() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>stroom.index_field.term_positions</code>.
     */
    public void setTermPositions(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>stroom.index_field.term_positions</code>.
     */
    public Boolean getTermPositions() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>stroom.index_field.case_sensitive</code>.
     */
    public void setCaseSensitive(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>stroom.index_field.case_sensitive</code>.
     */
    public Boolean getCaseSensitive() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Byte, String, String, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, Byte, String, String, Boolean, Boolean, Boolean, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return IndexField.INDEX_FIELD.FK_INDEX_FIELD_SOURCE_ID;
    }

    @Override
    public Field<Byte> field2() {
        return IndexField.INDEX_FIELD.TYPE;
    }

    @Override
    public Field<String> field3() {
        return IndexField.INDEX_FIELD.NAME;
    }

    @Override
    public Field<String> field4() {
        return IndexField.INDEX_FIELD.ANALYZER;
    }

    @Override
    public Field<Boolean> field5() {
        return IndexField.INDEX_FIELD.INDEXED;
    }

    @Override
    public Field<Boolean> field6() {
        return IndexField.INDEX_FIELD.STORED;
    }

    @Override
    public Field<Boolean> field7() {
        return IndexField.INDEX_FIELD.TERM_POSITIONS;
    }

    @Override
    public Field<Boolean> field8() {
        return IndexField.INDEX_FIELD.CASE_SENSITIVE;
    }

    @Override
    public Integer component1() {
        return getFkIndexFieldSourceId();
    }

    @Override
    public Byte component2() {
        return getType();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getAnalyzer();
    }

    @Override
    public Boolean component5() {
        return getIndexed();
    }

    @Override
    public Boolean component6() {
        return getStored();
    }

    @Override
    public Boolean component7() {
        return getTermPositions();
    }

    @Override
    public Boolean component8() {
        return getCaseSensitive();
    }

    @Override
    public Integer value1() {
        return getFkIndexFieldSourceId();
    }

    @Override
    public Byte value2() {
        return getType();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getAnalyzer();
    }

    @Override
    public Boolean value5() {
        return getIndexed();
    }

    @Override
    public Boolean value6() {
        return getStored();
    }

    @Override
    public Boolean value7() {
        return getTermPositions();
    }

    @Override
    public Boolean value8() {
        return getCaseSensitive();
    }

    @Override
    public IndexFieldRecord value1(Integer value) {
        setFkIndexFieldSourceId(value);
        return this;
    }

    @Override
    public IndexFieldRecord value2(Byte value) {
        setType(value);
        return this;
    }

    @Override
    public IndexFieldRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public IndexFieldRecord value4(String value) {
        setAnalyzer(value);
        return this;
    }

    @Override
    public IndexFieldRecord value5(Boolean value) {
        setIndexed(value);
        return this;
    }

    @Override
    public IndexFieldRecord value6(Boolean value) {
        setStored(value);
        return this;
    }

    @Override
    public IndexFieldRecord value7(Boolean value) {
        setTermPositions(value);
        return this;
    }

    @Override
    public IndexFieldRecord value8(Boolean value) {
        setCaseSensitive(value);
        return this;
    }

    @Override
    public IndexFieldRecord values(Integer value1, Byte value2, String value3, String value4, Boolean value5, Boolean value6, Boolean value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IndexFieldRecord
     */
    public IndexFieldRecord() {
        super(IndexField.INDEX_FIELD);
    }

    /**
     * Create a detached, initialised IndexFieldRecord
     */
    public IndexFieldRecord(Integer fkIndexFieldSourceId, Byte type, String name, String analyzer, Boolean indexed, Boolean stored, Boolean termPositions, Boolean caseSensitive) {
        super(IndexField.INDEX_FIELD);

        setFkIndexFieldSourceId(fkIndexFieldSourceId);
        setType(type);
        setName(name);
        setAnalyzer(analyzer);
        setIndexed(indexed);
        setStored(stored);
        setTermPositions(termPositions);
        setCaseSensitive(caseSensitive);
        resetChangedOnNotNull();
    }
}
