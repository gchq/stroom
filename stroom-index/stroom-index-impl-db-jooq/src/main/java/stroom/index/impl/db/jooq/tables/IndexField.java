/*
 * This file is generated by jOOQ.
 */
package stroom.index.impl.db.jooq.tables;


import stroom.index.impl.db.jooq.Keys;
import stroom.index.impl.db.jooq.Stroom;
import stroom.index.impl.db.jooq.tables.records.IndexFieldRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class IndexField extends TableImpl<IndexFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.index_field</code>
     */
    public static final IndexField INDEX_FIELD = new IndexField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndexFieldRecord> getRecordType() {
        return IndexFieldRecord.class;
    }

    /**
     * The column <code>stroom.index_field.fk_index_field_source_id</code>.
     */
    public final TableField<IndexFieldRecord, Integer> FK_INDEX_FIELD_SOURCE_ID = createField(DSL.name("fk_index_field_source_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.index_field.type</code>.
     */
    public final TableField<IndexFieldRecord, Byte> TYPE = createField(DSL.name("type"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>stroom.index_field.name</code>.
     */
    public final TableField<IndexFieldRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.index_field.analyzer</code>.
     */
    public final TableField<IndexFieldRecord, String> ANALYZER = createField(DSL.name("analyzer"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.index_field.indexed</code>.
     */
    public final TableField<IndexFieldRecord, Boolean> INDEXED = createField(DSL.name("indexed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.index_field.stored</code>.
     */
    public final TableField<IndexFieldRecord, Boolean> STORED = createField(DSL.name("stored"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.index_field.term_positions</code>.
     */
    public final TableField<IndexFieldRecord, Boolean> TERM_POSITIONS = createField(DSL.name("term_positions"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.index_field.case_sensitive</code>.
     */
    public final TableField<IndexFieldRecord, Boolean> CASE_SENSITIVE = createField(DSL.name("case_sensitive"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private IndexField(Name alias, Table<IndexFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndexField(Name alias, Table<IndexFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.index_field</code> table reference
     */
    public IndexField(String alias) {
        this(DSL.name(alias), INDEX_FIELD);
    }

    /**
     * Create an aliased <code>stroom.index_field</code> table reference
     */
    public IndexField(Name alias) {
        this(alias, INDEX_FIELD);
    }

    /**
     * Create a <code>stroom.index_field</code> table reference
     */
    public IndexField() {
        this(DSL.name("index_field"), null);
    }

    public <O extends Record> IndexField(Table<O> child, ForeignKey<O, IndexFieldRecord> key) {
        super(child, key, INDEX_FIELD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public UniqueKey<IndexFieldRecord> getPrimaryKey() {
        return Keys.KEY_INDEX_FIELD_PRIMARY;
    }

    @Override
    public List<ForeignKey<IndexFieldRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INDEX_FIELD_FK_INDEX_FIELD_SOURCE_ID);
    }

    private transient IndexFieldSource _indexFieldSource;

    /**
     * Get the implicit join path to the <code>stroom.index_field_source</code>
     * table.
     */
    public IndexFieldSource indexFieldSource() {
        if (_indexFieldSource == null)
            _indexFieldSource = new IndexFieldSource(this, Keys.INDEX_FIELD_FK_INDEX_FIELD_SOURCE_ID);

        return _indexFieldSource;
    }

    @Override
    public IndexField as(String alias) {
        return new IndexField(DSL.name(alias), this);
    }

    @Override
    public IndexField as(Name alias) {
        return new IndexField(alias, this);
    }

    @Override
    public IndexField as(Table<?> alias) {
        return new IndexField(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexField rename(String name) {
        return new IndexField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexField rename(Name name) {
        return new IndexField(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexField rename(Table<?> name) {
        return new IndexField(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Byte, String, String, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Byte, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Byte, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
