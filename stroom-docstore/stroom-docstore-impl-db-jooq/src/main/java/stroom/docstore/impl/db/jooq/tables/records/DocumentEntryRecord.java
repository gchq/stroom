/*
 * This file is generated by jOOQ.
 */
package stroom.docstore.impl.db.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.docstore.impl.db.jooq.tables.DocumentEntry;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DocumentEntryRecord extends UpdatableRecordImpl<DocumentEntryRecord> implements Record4<Long, Long, String, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stroom.document_entry.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.document_entry.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>stroom.document_entry.fk_document_id</code>.
     */
    public void setFkDocumentId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.document_entry.fk_document_id</code>.
     */
    public Long getFkDocumentId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>stroom.document_entry.entry</code>.
     */
    public void setEntry(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stroom.document_entry.entry</code>.
     */
    public String getEntry() {
        return (String) get(2);
    }

    /**
     * Setter for <code>stroom.document_entry.data</code>.
     */
    public void setData(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>stroom.document_entry.data</code>.
     */
    public byte[] getData() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, String, byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return DocumentEntry.DOCUMENT_ENTRY.ID;
    }

    @Override
    public Field<Long> field2() {
        return DocumentEntry.DOCUMENT_ENTRY.FK_DOCUMENT_ID;
    }

    @Override
    public Field<String> field3() {
        return DocumentEntry.DOCUMENT_ENTRY.ENTRY;
    }

    @Override
    public Field<byte[]> field4() {
        return DocumentEntry.DOCUMENT_ENTRY.DATA;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getFkDocumentId();
    }

    @Override
    public String component3() {
        return getEntry();
    }

    @Override
    public byte[] component4() {
        return getData();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getFkDocumentId();
    }

    @Override
    public String value3() {
        return getEntry();
    }

    @Override
    public byte[] value4() {
        return getData();
    }

    @Override
    public DocumentEntryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DocumentEntryRecord value2(Long value) {
        setFkDocumentId(value);
        return this;
    }

    @Override
    public DocumentEntryRecord value3(String value) {
        setEntry(value);
        return this;
    }

    @Override
    public DocumentEntryRecord value4(byte[] value) {
        setData(value);
        return this;
    }

    @Override
    public DocumentEntryRecord values(Long value1, Long value2, String value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DocumentEntryRecord
     */
    public DocumentEntryRecord() {
        super(DocumentEntry.DOCUMENT_ENTRY);
    }

    /**
     * Create a detached, initialised DocumentEntryRecord
     */
    public DocumentEntryRecord(Long id, Long fkDocumentId, String entry, byte[] data) {
        super(DocumentEntry.DOCUMENT_ENTRY);

        setId(id);
        setFkDocumentId(fkDocumentId);
        setEntry(entry);
        setData(data);
        resetChangedOnNotNull();
    }
}
