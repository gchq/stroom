/*
 * This file is generated by jOOQ.
 */
package stroom.docstore.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.docstore.impl.db.jooq.Indexes;
import stroom.docstore.impl.db.jooq.Keys;
import stroom.docstore.impl.db.jooq.Stroom;
import stroom.docstore.impl.db.jooq.tables.records.DocumentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Document extends TableImpl<DocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.document</code>
     */
    public static final Document DOCUMENT = new Document();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentRecord> getRecordType() {
        return DocumentRecord.class;
    }

    /**
     * The column <code>stroom.document.id</code>.
     */
    public final TableField<DocumentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.document.type</code>.
     */
    public final TableField<DocumentRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.document.uuid</code>.
     */
    public final TableField<DocumentRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.document.name</code>.
     */
    public final TableField<DocumentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.document.unique_name</code>.
     */
    public final TableField<DocumentRecord, String> UNIQUE_NAME = createField(DSL.name("unique_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.document.version</code>.
     */
    public final TableField<DocumentRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Document(Name alias, Table<DocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Document(Name alias, Table<DocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.document</code> table reference
     */
    public Document(String alias) {
        this(DSL.name(alias), DOCUMENT);
    }

    /**
     * Create an aliased <code>stroom.document</code> table reference
     */
    public Document(Name alias) {
        this(alias, DOCUMENT);
    }

    /**
     * Create a <code>stroom.document</code> table reference
     */
    public Document() {
        this(DSL.name("document"), null);
    }

    public <O extends Record> Document(Table<O> child, ForeignKey<O, DocumentRecord> key) {
        super(child, key, DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DOCUMENT_DOC_TYPE_UUID_IDX);
    }

    @Override
    public Identity<DocumentRecord, Long> getIdentity() {
        return (Identity<DocumentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DOCUMENT_DOCUMENT_UUID_IDX, Keys.KEY_DOCUMENT_DOCUMENT_UNIQUE_NAME_IDX);
    }

    @Override
    public Document as(String alias) {
        return new Document(DSL.name(alias), this);
    }

    @Override
    public Document as(Name alias) {
        return new Document(alias, this);
    }

    @Override
    public Document as(Table<?> alias) {
        return new Document(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(String name) {
        return new Document(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(Name name) {
        return new Document(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(Table<?> name) {
        return new Document(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
