/*
 * This file is generated by jOOQ.
 */
package stroom.docstore.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.docstore.impl.db.jooq.Keys;
import stroom.docstore.impl.db.jooq.Stroom;
import stroom.docstore.impl.db.jooq.tables.records.DocumentEntryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DocumentEntry extends TableImpl<DocumentEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.document_entry</code>
     */
    public static final DocumentEntry DOCUMENT_ENTRY = new DocumentEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentEntryRecord> getRecordType() {
        return DocumentEntryRecord.class;
    }

    /**
     * The column <code>stroom.document_entry.id</code>.
     */
    public final TableField<DocumentEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.document_entry.fk_document_id</code>.
     */
    public final TableField<DocumentEntryRecord, Long> FK_DOCUMENT_ID = createField(DSL.name("fk_document_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.document_entry.entry</code>.
     */
    public final TableField<DocumentEntryRecord, String> ENTRY = createField(DSL.name("entry"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.document_entry.data</code>.
     */
    public final TableField<DocumentEntryRecord, byte[]> DATA = createField(DSL.name("data"), SQLDataType.BLOB, this, "");

    private DocumentEntry(Name alias, Table<DocumentEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentEntry(Name alias, Table<DocumentEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.document_entry</code> table reference
     */
    public DocumentEntry(String alias) {
        this(DSL.name(alias), DOCUMENT_ENTRY);
    }

    /**
     * Create an aliased <code>stroom.document_entry</code> table reference
     */
    public DocumentEntry(Name alias) {
        this(alias, DOCUMENT_ENTRY);
    }

    /**
     * Create a <code>stroom.document_entry</code> table reference
     */
    public DocumentEntry() {
        this(DSL.name("document_entry"), null);
    }

    public <O extends Record> DocumentEntry(Table<O> child, ForeignKey<O, DocumentEntryRecord> key) {
        super(child, key, DOCUMENT_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<DocumentEntryRecord, Long> getIdentity() {
        return (Identity<DocumentEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentEntryRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_ENTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentEntryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DOCUMENT_ENTRY_DOCUMENT_FK_DOCUMENT_ID_OATH);
    }

    @Override
    public List<ForeignKey<DocumentEntryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOCUMENT_ENTRY_FK_DOCUMENT_ID);
    }

    private transient Document _document;

    /**
     * Get the implicit join path to the <code>stroom.document</code> table.
     */
    public Document document() {
        if (_document == null)
            _document = new Document(this, Keys.DOCUMENT_ENTRY_FK_DOCUMENT_ID);

        return _document;
    }

    @Override
    public DocumentEntry as(String alias) {
        return new DocumentEntry(DSL.name(alias), this);
    }

    @Override
    public DocumentEntry as(Name alias) {
        return new DocumentEntry(alias, this);
    }

    @Override
    public DocumentEntry as(Table<?> alias) {
        return new DocumentEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentEntry rename(String name) {
        return new DocumentEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentEntry rename(Name name) {
        return new DocumentEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentEntry rename(Table<?> name) {
        return new DocumentEntry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
