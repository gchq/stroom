/*
 * This file is generated by jOOQ.
 */
package stroom.security.impl.db.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;

import stroom.security.impl.db.jooq.tables.PermissionDocId;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PermissionDocIdRecord extends UpdatableRecordImpl<PermissionDocIdRecord> implements Record2<UByte, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stroom.permission_doc_id.id</code>.
     */
    public void setId(UByte value) {
        set(0, value);
    }

    /**
     * Getter for <code>stroom.permission_doc_id.id</code>.
     */
    public UByte getId() {
        return (UByte) get(0);
    }

    /**
     * Setter for <code>stroom.permission_doc_id.permission</code>.
     */
    public void setPermission(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>stroom.permission_doc_id.permission</code>.
     */
    public String getPermission() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UByte> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UByte, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UByte, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UByte> field1() {
        return PermissionDocId.PERMISSION_DOC_ID.ID;
    }

    @Override
    public Field<String> field2() {
        return PermissionDocId.PERMISSION_DOC_ID.PERMISSION;
    }

    @Override
    public UByte component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPermission();
    }

    @Override
    public UByte value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPermission();
    }

    @Override
    public PermissionDocIdRecord value1(UByte value) {
        setId(value);
        return this;
    }

    @Override
    public PermissionDocIdRecord value2(String value) {
        setPermission(value);
        return this;
    }

    @Override
    public PermissionDocIdRecord values(UByte value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermissionDocIdRecord
     */
    public PermissionDocIdRecord() {
        super(PermissionDocId.PERMISSION_DOC_ID);
    }

    /**
     * Create a detached, initialised PermissionDocIdRecord
     */
    public PermissionDocIdRecord(UByte id, String permission) {
        super(PermissionDocId.PERMISSION_DOC_ID);

        setId(id);
        setPermission(permission);
        resetChangedOnNotNull();
    }
}
