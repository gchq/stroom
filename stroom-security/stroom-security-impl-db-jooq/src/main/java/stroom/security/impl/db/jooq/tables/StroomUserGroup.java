/*
 * This file is generated by jOOQ.
 */
package stroom.security.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.security.impl.db.jooq.Keys;
import stroom.security.impl.db.jooq.Stroom;
import stroom.security.impl.db.jooq.tables.records.StroomUserGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StroomUserGroup extends TableImpl<StroomUserGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.stroom_user_group</code>
     */
    public static final StroomUserGroup STROOM_USER_GROUP = new StroomUserGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StroomUserGroupRecord> getRecordType() {
        return StroomUserGroupRecord.class;
    }

    /**
     * The column <code>stroom.stroom_user_group.id</code>.
     */
    public final TableField<StroomUserGroupRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.stroom_user_group.user_uuid</code>.
     */
    public final TableField<StroomUserGroupRecord, String> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user_group.group_uuid</code>.
     */
    public final TableField<StroomUserGroupRecord, String> GROUP_UUID = createField(DSL.name("group_uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private StroomUserGroup(Name alias, Table<StroomUserGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private StroomUserGroup(Name alias, Table<StroomUserGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.stroom_user_group</code> table reference
     */
    public StroomUserGroup(String alias) {
        this(DSL.name(alias), STROOM_USER_GROUP);
    }

    /**
     * Create an aliased <code>stroom.stroom_user_group</code> table reference
     */
    public StroomUserGroup(Name alias) {
        this(alias, STROOM_USER_GROUP);
    }

    /**
     * Create a <code>stroom.stroom_user_group</code> table reference
     */
    public StroomUserGroup() {
        this(DSL.name("stroom_user_group"), null);
    }

    public <O extends Record> StroomUserGroup(Table<O> child, ForeignKey<O, StroomUserGroupRecord> key) {
        super(child, key, STROOM_USER_GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<StroomUserGroupRecord, Long> getIdentity() {
        return (Identity<StroomUserGroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StroomUserGroupRecord> getPrimaryKey() {
        return Keys.KEY_STROOM_USER_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<StroomUserGroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STROOM_USER_GROUP_STROOM_USER_GROUP_GROUP_UUID_USER_UUID_IDX, Keys.KEY_STROOM_USER_GROUP_STROOM_USER_GROUP_USER_UUID_GROUP_UUID_IDX);
    }

    @Override
    public List<ForeignKey<StroomUserGroupRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STROOM_USER_GROUP_FK_USER_UUID, Keys.STROOM_USER_GROUP_FK_GROUP_UUID);
    }

    private transient StroomUser _stroomUserGroupFkUserUuid;
    private transient StroomUser _stroomUserGroupFkGroupUuid;

    /**
     * Get the implicit join path to the <code>stroom.stroom_user</code> table,
     * via the <code>stroom_user_group_fk_user_uuid</code> key.
     */
    public StroomUser stroomUserGroupFkUserUuid() {
        if (_stroomUserGroupFkUserUuid == null)
            _stroomUserGroupFkUserUuid = new StroomUser(this, Keys.STROOM_USER_GROUP_FK_USER_UUID);

        return _stroomUserGroupFkUserUuid;
    }

    /**
     * Get the implicit join path to the <code>stroom.stroom_user</code> table,
     * via the <code>stroom_user_group_fk_group_uuid</code> key.
     */
    public StroomUser stroomUserGroupFkGroupUuid() {
        if (_stroomUserGroupFkGroupUuid == null)
            _stroomUserGroupFkGroupUuid = new StroomUser(this, Keys.STROOM_USER_GROUP_FK_GROUP_UUID);

        return _stroomUserGroupFkGroupUuid;
    }

    @Override
    public StroomUserGroup as(String alias) {
        return new StroomUserGroup(DSL.name(alias), this);
    }

    @Override
    public StroomUserGroup as(Name alias) {
        return new StroomUserGroup(alias, this);
    }

    @Override
    public StroomUserGroup as(Table<?> alias) {
        return new StroomUserGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StroomUserGroup rename(String name) {
        return new StroomUserGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StroomUserGroup rename(Name name) {
        return new StroomUserGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StroomUserGroup rename(Table<?> name) {
        return new StroomUserGroup(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
