/*
 * This file is generated by jOOQ.
 */
package stroom.security.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.security.impl.db.jooq.Keys;
import stroom.security.impl.db.jooq.Stroom;
import stroom.security.impl.db.jooq.tables.records.StroomUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StroomUser extends TableImpl<StroomUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.stroom_user</code>
     */
    public static final StroomUser STROOM_USER = new StroomUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StroomUserRecord> getRecordType() {
        return StroomUserRecord.class;
    }

    /**
     * The column <code>stroom.stroom_user.id</code>.
     */
    public final TableField<StroomUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.stroom_user.version</code>.
     */
    public final TableField<StroomUserRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.create_time_ms</code>.
     */
    public final TableField<StroomUserRecord, Long> CREATE_TIME_MS = createField(DSL.name("create_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.create_user</code>.
     */
    public final TableField<StroomUserRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.update_time_ms</code>.
     */
    public final TableField<StroomUserRecord, Long> UPDATE_TIME_MS = createField(DSL.name("update_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.update_user</code>.
     */
    public final TableField<StroomUserRecord, String> UPDATE_USER = createField(DSL.name("update_user"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.name</code>.
     */
    public final TableField<StroomUserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.uuid</code>.
     */
    public final TableField<StroomUserRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.stroom_user.is_group</code>.
     */
    public final TableField<StroomUserRecord, Boolean> IS_GROUP = createField(DSL.name("is_group"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.stroom_user.enabled</code>.
     */
    public final TableField<StroomUserRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.stroom_user.display_name</code>.
     */
    public final TableField<StroomUserRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.stroom_user.full_name</code>.
     */
    public final TableField<StroomUserRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255), this, "");

    private StroomUser(Name alias, Table<StroomUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private StroomUser(Name alias, Table<StroomUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.stroom_user</code> table reference
     */
    public StroomUser(String alias) {
        this(DSL.name(alias), STROOM_USER);
    }

    /**
     * Create an aliased <code>stroom.stroom_user</code> table reference
     */
    public StroomUser(Name alias) {
        this(alias, STROOM_USER);
    }

    /**
     * Create a <code>stroom.stroom_user</code> table reference
     */
    public StroomUser() {
        this(DSL.name("stroom_user"), null);
    }

    public <O extends Record> StroomUser(Table<O> child, ForeignKey<O, StroomUserRecord> key) {
        super(child, key, STROOM_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<StroomUserRecord, Integer> getIdentity() {
        return (Identity<StroomUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StroomUserRecord> getPrimaryKey() {
        return Keys.KEY_STROOM_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<StroomUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STROOM_USER_STROOM_USER_NAME_IS_GROUP_IDX, Keys.KEY_STROOM_USER_STROOM_USER_UUID_IDX);
    }

    @Override
    public TableField<StroomUserRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public StroomUser as(String alias) {
        return new StroomUser(DSL.name(alias), this);
    }

    @Override
    public StroomUser as(Name alias) {
        return new StroomUser(alias, this);
    }

    @Override
    public StroomUser as(Table<?> alias) {
        return new StroomUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StroomUser rename(String name) {
        return new StroomUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StroomUser rename(Name name) {
        return new StroomUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StroomUser rename(Table<?> name) {
        return new StroomUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, Long, String, Long, String, String, String, Boolean, Boolean, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Integer, ? super Integer, ? super Long, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super Integer, ? super Long, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
