/*
 * Copyright 2018 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package stroom.lmdb.serde;

import stroom.util.logging.LogUtil;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.Serializer;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;

import java.util.UUID;

/**
 * Kryo serializer for a string representation of a {@link UUID}. The string form must
 * conform to the output generated by {@link UUID#toString()}.
 * <p>
 * Uses fixed length serialisation so the serialised form will always be 16 bytes long
 */
public class FixedLengthUUIDKryoSerializer extends Serializer<String> {

    @Override
    public void write(final Kryo kryo, final Output output, final String uuidStr) {
        UUID uuid = null;
        try {
            uuid = UUID.fromString(uuidStr);
        } catch (final Exception e) {
            throw new RuntimeException(LogUtil.message("uuidStr [{}] is not a valid UUID", uuidStr), e);
        }
        output.writeLong(uuid.getMostSignificantBits());
        output.writeLong(uuid.getLeastSignificantBits());
    }

    public void read(final Kryo kryo, final Input input) {
        read(kryo, input, String.class);
    }

    @Override
    public String read(final Kryo kryo, final Input input, final Class<? extends String> type) {
        final long uuidHighBits = input.readLong();
        final long uuidLowBits = input.readLong();
        return new UUID(uuidHighBits, uuidLowBits).toString();
    }
}
