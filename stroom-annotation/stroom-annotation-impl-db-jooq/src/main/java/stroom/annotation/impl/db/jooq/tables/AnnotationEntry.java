/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationEntryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnnotationEntry extends TableImpl<AnnotationEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_entry</code>
     */
    public static final AnnotationEntry ANNOTATION_ENTRY = new AnnotationEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationEntryRecord> getRecordType() {
        return AnnotationEntryRecord.class;
    }

    /**
     * The column <code>stroom.annotation_entry.id</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_entry.fk_annotation_id</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> FK_ANNOTATION_ID = createField(DSL.name("fk_annotation_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.type</code>.
     */
    public final TableField<AnnotationEntryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_entry.data</code>.
     */
    public final TableField<AnnotationEntryRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.annotation_entry.entry_user_uuid</code>.
     */
    public final TableField<AnnotationEntryRecord, String> ENTRY_USER_UUID = createField(DSL.name("entry_user_uuid"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.annotation_entry.entry_time_ms</code>.
     */
    public final TableField<AnnotationEntryRecord, Long> ENTRY_TIME_MS = createField(DSL.name("entry_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    private AnnotationEntry(Name alias, Table<AnnotationEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnnotationEntry(Name alias, Table<AnnotationEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.annotation_entry</code> table reference
     */
    public AnnotationEntry(String alias) {
        this(DSL.name(alias), ANNOTATION_ENTRY);
    }

    /**
     * Create an aliased <code>stroom.annotation_entry</code> table reference
     */
    public AnnotationEntry(Name alias) {
        this(alias, ANNOTATION_ENTRY);
    }

    /**
     * Create a <code>stroom.annotation_entry</code> table reference
     */
    public AnnotationEntry() {
        this(DSL.name("annotation_entry"), null);
    }

    public <O extends Record> AnnotationEntry(Table<O> child, ForeignKey<O, AnnotationEntryRecord> key) {
        super(child, key, ANNOTATION_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationEntryRecord, Long> getIdentity() {
        return (Identity<AnnotationEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationEntryRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_ENTRY_PRIMARY;
    }

    @Override
    public List<ForeignKey<AnnotationEntryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOTATION_ENTRY_FK_ANNOTATION_ID);
    }

    private transient Annotation _annotation;

    /**
     * Get the implicit join path to the <code>stroom.annotation</code> table.
     */
    public Annotation annotation() {
        if (_annotation == null)
            _annotation = new Annotation(this, Keys.ANNOTATION_ENTRY_FK_ANNOTATION_ID);

        return _annotation;
    }

    @Override
    public AnnotationEntry as(String alias) {
        return new AnnotationEntry(DSL.name(alias), this);
    }

    @Override
    public AnnotationEntry as(Name alias) {
        return new AnnotationEntry(alias, this);
    }

    @Override
    public AnnotationEntry as(Table<?> alias) {
        return new AnnotationEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationEntry rename(String name) {
        return new AnnotationEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationEntry rename(Name name) {
        return new AnnotationEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationEntry rename(Table<?> name) {
        return new AnnotationEntry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
