/*
 * Copyright 2024 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package stroom.processor.impl.db.migration.legacyqd;

import stroom.docref.HasDisplayValue;
import stroom.docref.HasNameMutable;
import stroom.docref.HasType;
import stroom.docref.HasUuid;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import jakarta.xml.bind.annotation.XmlType;

import java.util.Objects;
import java.util.UUID;
import java.util.function.Function;

/**
 * {@value #CLASS_DESC}
 */
@XmlType(name = "DocRef", propOrder = {"type", "uuid", "name"})
@XmlRootElement(name = "doc")
@XmlAccessorType(XmlAccessType.FIELD)
@JsonPropertyOrder({"type", "uuid", "name"})
@JsonInclude(JsonInclude.Include.NON_NULL)
public final class DocRef implements Comparable<DocRef>, HasDisplayValue, HasType, HasUuid, HasNameMutable {

    public static final String CLASS_DESC = "A class for describing a unique reference to a 'document' in stroom.  " +
                                            "A 'document' is an entity in stroom such as a data source dictionary " +
                                            "or pipeline.";

    @JsonProperty
    private String type;

    @XmlElement
    @JsonProperty(required = true)
    private String uuid;

    @XmlElement
    @JsonProperty
    private String name;

    /**
     * JAXB requires a no-arg constructor.
     */
    public DocRef() {
    }

    /**
     * @param type The type of the 'document' that this docRef points to an instance of. Supported types are defined
     *             outside of this documentation.
     * @param uuid A UUID as generated by {@link UUID#randomUUID()}
     */
    public DocRef(final String type, final String uuid) {
        this(type, uuid, null);
    }

    /**
     * @param type The type of the 'document' that this docRef points to an instance of. Supported types are defined
     *             outside of this documentation.
     * @param uuid A UUID as generated by {@link UUID#randomUUID()}
     * @param name The name of the 'document' being referenced
     */
    @JsonCreator
    public DocRef(@JsonProperty("type") final String type,
                  @JsonProperty("uuid") final String uuid,
                  @JsonProperty("name") final String name) {
        this.type = type;
        this.uuid = uuid;
        this.name = name;
    }

    /**
     * @return The type of the 'document' that this docRef points to an instance of. Supported types are defined
     * outside of this documentation.
     */
    @Override
    public String getType() {
        return type;
    }

    public void setType(final String type) {
        this.type = type;
    }

    /**
     * @return A UUID as generated by {@link UUID#randomUUID()}
     */
    @Override
    public String getUuid() {
        return uuid;
    }

    public void setUuid(final String uuid) {
        this.uuid = uuid;
    }

    /**
     * @return The name of the 'document' being referenced
     */
    @Override
    public String getName() {
        return name;
    }

    @Override
    public void setName(final String name) {
        this.name = name;
    }

    @XmlTransient
    @JsonIgnore
    @Override
    public String getDisplayValue() {
        return name;
    }

    public String getDisplayValue(final DisplayType displayType) {
        final DisplayType dispType = displayType != null
                ? displayType
                : DisplayType.AUTO;
        final Function<DocRef, String> displayTextFunc = dispType.getDisplayTextFunc();
        return displayTextFunc.apply(this);
    }

    private String getNameOrUuid() {
        return name != null
                ? name
                : uuid;
    }

    @Override
    public int compareTo(final DocRef o) {
        int diff = 0;

        if (type != null && o.type != null) {
            diff = type.compareTo(o.type);
        }
        if (diff == 0) {
            if (name != null && o.name != null) {
                diff = name.compareTo(o.name);
            }
        }
        if (diff == 0) {
            diff = uuid.compareTo(o.uuid);
        }
        return diff;
    }

    public String toInfoString() {
        final StringBuilder sb = new StringBuilder();
        if (name != null) {
            sb.append(name);
        }
        if (uuid != null) {
            //noinspection SizeReplaceableByIsEmpty // Not in GWT
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append("{");
            sb.append(uuid);
            sb.append("}");
        }

        //noinspection SizeReplaceableByIsEmpty // Not in GWT
        if (sb.length() > 0) {
            return sb.toString();
        }

        return toString();
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DocRef)) {
            return false;
        }
        //noinspection PatternVariableCanBeUsed // Not in GWT
        final DocRef docRef = (DocRef) o;
        return Objects.equals(uuid, docRef.uuid);
    }

    @Override
    public int hashCode() {
        return uuid.hashCode();
    }

    /**
     * @return The {@link DocRef} in the form '{@code {type:uuid:name}}'
     */
    public String toShortString() {
        return "{" + type + ":" + uuid + ":" + name + "}";
    }

    @Override
    public String toString() {
        // TODO: 15/12/2022 I Think we ought to change the output to this shorter form, but not sure
        //  if we have any code that relies on the format.
//        return "{" + name + ":" + type + ":" + uuid + "}";
        return "DocRef{" +
               "type='" + type + '\'' +
               ", uuid='" + uuid + '\'' +
               ", name='" + name + '\'' +
               '}';
    }

    public enum DisplayType {
        /**
         * Displays the first non-null value in this order:
         * <p>name</p>
         * <p>UUID</p>
         */
        AUTO(DocRef::getNameOrUuid, "value"),
        /**
         * The name of the {@link DocRef}
         */
        NAME(DocRef::getName, "name"),
        /**
         * The type of the {@link DocRef}
         */
        TYPE(DocRef::getType, "type"),
        /**
         * The UUID of the {@link DocRef}
         */
        UUID(DocRef::getUuid, "UUID");

        private final Function<DocRef, String> displayTextFunc;
        private final String typeName;

        DisplayType(final Function<DocRef, String> displayTextFunc,
                    final String typeName) {
            this.displayTextFunc = displayTextFunc;
            this.typeName = typeName;
        }

        public Function<DocRef, String> getDisplayTextFunc() {
            return displayTextFunc;
        }

        /**
         * @return The name of the display type for use in UI text.
         */
        public String getTypeName() {
            return typeName;
        }
    }

}
